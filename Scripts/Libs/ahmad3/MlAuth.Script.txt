/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Util functions for auth system              *
 ************************************************/

#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json

/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2023-04-01"
#Const  ScriptName  "Auth.Script.txt"

#Const C_Token_Ttl 43200000 // 1000*60*60*12

#Const C_MP_App_Id			"de1ce3ba8e"
#Const C_MP_App_Secret	"52877e3c1aa428eeb75a042c52caa01fb74a7526"
#Const C_MP_Link				"https://prod.live.maniaplanet.com/login/oauth2/authorize?response_type=token&"
#Const C_MP_Redirect		"http://192.168.1.113:3001/player/give_token"
// #Const C_MP_Redirect "https://api.obstacle.ovh/player/give_token"
// #Const C_MP_Redirect "http://localhost:3000/player/give_token"

Text Private_Ml_LogMessage() {
	return """
Void LogMessage(Text _Msg) {
	log("[Obs Auth] " ^ _Msg);
}
	""";
}

Text Private_Ml_LogError() {
	return """
Void LogError(Text _Msg) {
	LogMessage("ERROR: " ^_Msg);
}
	""";
}

Text Private_Ml_CheckBanned() {
	return """
declare Text G_CurrentBan;
Boolean Private_CheckBanned(Text _Login, Text _Secret) {
	declare payload = "{"
		^"\"secret\":\"" ^ TL::StripFormatting(_Secret) ^ "\","
		^"\"login\":\"" ^ TL::StripFormatting(_Login) ^ "\""
	^ "}";

	declare req = Http.CreatePost(
		C_HostUrl ^ "player/is_banned",
		payload,
		"Content-Type: application/json\nAccept: application/xml");

	wait(req.IsCompleted);
	log("Ban info: " ^ req.StatusCode ^ " " ^ req.Result);
	
	// this condition is necessary even if the token is updated before
	// because the server may have closed meanwhile
	// thus lost the token so we need to register a new one
	if (req.StatusCode == 401) {
		// updating token
		return Private_CheckBanned(_Login, UpdateToken());
	}
	
	if (req.StatusCode != 200) {
		log("Error when checking if player is banned");
		return False;
	}

	declare response = Xml.Create(req.Result);
	declare banned = response.Root.GetFirstChild("banned").TextContents == "true";
	// todo: format banishment (see obs API doc)
	G_CurrentBan = response.Root.GetFirstChild("current_ban").TextContents;
	return banned;
}
	""";
}

Text Private_Ml_UpdateToken() {
	return """
Text UpdateToken() {
	LogMessage("Updating token...");

	declare persistent Text obsToken for LocalUser;
	declare persistent Text obsTokenAt for LocalUser = "0";
	
	declare login = LocalUser.Login;
	declare Text state = login ^ Now;
	declare payload = "{"
		^ "\"login\":\"" ^ TL::StripFormatting(login) ^ "\","
		^ "\"state\":\"" ^ TL::StripFormatting(state) ^ "\""
	^ "}";
	
	declare req = Http.CreatePost(
		C_HostUrl ^ "player/get_token",
		payload,
		"Content-Type: application/json\nAccept: application/xml");
		
	OpenLink(C_MP_Link
		^ "client_id=" ^ C_MP_App_Id
		^ "&client_secret=" ^ C_MP_App_Secret
		^ "&redirect_uri=" ^ C_MP_Redirect
		^ "&state=" ^ state
		^ "&scope=basic",
		CMlScript::LinkType::ExternalBrowser);
		
	wait(req.IsCompleted);		
	if (req.StatusCode != 200) {
		LogError("Error: " ^ req.StatusCode ^ req.Result);
		UI.SendChat("An error occurred. Please contact the developers (e.g. @ahmadbky or @MiLTanT on discord).");
		return obsToken;
	}
	
	declare response = Xml.Create(req.Result);
	declare token = response.Root.GetFirstChild("token").TextContents;
	obsToken = token;
	obsTokenAt = TimeLib::GetCurrent();
	return obsToken;
}
	""";
}

Text Private_Ml_CheckToken() {
	return """
Text CheckToken() {
	declare persistent Text obsToken for LocalUser;
	declare persistent Text obsTokenAt for LocalUser = "0";
	// obsTokenAt = "0"; // uncomment this line to reset the token

	// first time updating the token
	if (obsTokenAt == "0") {
		// display "welcoming" message
	}

	// update token if expired
	if (TimeLib::GetDelta(TimeLib::GetCurrent(), obsTokenAt) > C_Token_Ttl) {
		// no need to bind it to obsToken because it already does
		declare _new = UpdateToken();
	}
	
	return obsToken;
}
	""";
}

Text GetLayer() {
	return """
<manialink version="3" name="Obstacle:Auth">
<script><!--
	#Include "MathLib" as MathLib
	#Include "TimeLib" as TimeLib
	#Include "TextLib" as TL

	#Const C_Token_Ttl 43200000 // 1000*60*60*12

	#Const C_HostUrl "http://192.168.1.113:3001/"
	//#Const C_HostUrl "http://localhost:3000/"
	//#Const C_HostUrl "https://api.obstacle.ovh/"
	#Const C_MP_App_Id			"de1ce3ba8e"
	#Const C_MP_App_Secret	"52877e3c1aa428eeb75a042c52caa01fb74a7526"
	#Const C_MP_Link				"https://prod.live.maniaplanet.com/login/oauth2/authorize?response_type=token&"
	#Const C_MP_Redirect		"http://192.168.1.113:3001/player/give_token"
	// #Const C_MP_Redirect "https://api.obstacle.ovh/player/give_token"
	// #Const C_MP_Redirect "http://localhost:3000/player/give_token"

	{{{Private_Ml_LogMessage()}}}
	{{{Private_Ml_LogError()}}}
	{{{Private_Ml_UpdateToken()}}}
	{{{Private_Ml_CheckBanned()}}}
	{{{Private_Ml_CheckToken()}}}

	main() {
		declare login = LocalUser.Login;
		declare obsToken = CheckToken();

		if (Private_CheckBanned(login, obsToken)) {
			// todo: display ban infos: G_CurrentBan
			UI.SendChat("You are banned from this mode! Go out!!!");
			SendCustomEvent("banned", [login, "TODO REASON"]);
			return;
		}

		LogMessage("Everything is fine!");
	}
--></script>
</manialink>
	""";
}