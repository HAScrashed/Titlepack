#RequireContext CSmMapType

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType

declare Ident G_LastAnchorId;

Text Private_WeaponML() {
    return """
<frame id="Weapon" pos="0 -35">
            <label pos="0 18" size="75 7" class="text" text="Weapon" textsize="4" halign="center" valign="center2"/>
            <frame pos="0 14.5">
                <label id="Laser" pos="-30 -2.5" size="20 5" text="Laser" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Rocket" pos="-10 -2.5" size="20 5" text="Rocket" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Nucleus" pos="10 -2.5" size="20 5" text="Nucleus" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Arrow" pos="30 -2.5" size="20 5" text="Arrow" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad id="Weapon_Selector" pos="-20 0" size="20 5" bgcolor="292929AA"/>
                <quad pos="0 0.5" size="81 6" bgcolor="797979AA" halign="center"/>
            </frame>
            <label pos="-12 5.5" size="20 5" class="text" text="Gain (10%-1000%)" valign="center2" halign="center" textsize="2"/>
            <frame pos="-12 0">
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="bottom" textsize="1"/>
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="top" textsize="1"/>
                <entry id="Entry_Weapon_Gain" pos="0 0"size="20 5" class="entry" default="100" textfont="Oswald" halign="center" valign="center2"/>
                <quad pos="0 0" size="21 6" bgcolor="797979AA" halign="center" valign="center"/>
            </frame>
            <label pos="12 5.5" size="20 5" class="text" text="Amount (0-10)" valign="center2" halign="center" textsize="2"/>
            <frame pos="12 0">
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="bottom" textsize="1"/>
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="top" textsize="1"/>
                <entry id="Entry_Weapon_Amount" pos="0 0"size="20 5" class="entry" default="4" textfont="Oswald" halign="center" valign="center2"/>
                <quad pos="0 0" size="21 6" bgcolor="797979AA" halign="center" valign="center"/>
            </frame>
        </frame>
        <frame id="Stamina" pos="0 -65">
            <label pos="0 18" size="75 7" class="text" text="Stamina" textsize="4" halign="center" valign="center2"/>
            <frame pos="0 14.5">
                <label id="Normal" pos="-20 -2.5" size="20 5" text="Normal" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Custom" pos="0 -2.5" size="20 5" text="Custom" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Unlimited" pos="20 -2.5" size="20 5" text="Unlimited" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad id="Stamina_Selector" pos="-30 0" size="20 5" bgcolor="292929AA"/>
                <quad pos="0 0.5" size="61 6" bgcolor="797979AA" halign="center"/>
            </frame>
            <label pos="-12 5.5" size="20 5" class="text" text="Gain (10%-100%)" valign="center2" halign="center" textsize="2"/>
            <frame pos="-12 0">
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="bottom" textsize="1"/>
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="top" textsize="1"/>
                <entry id="Entry_Stamina_Gain" pos="0 0"size="20 5" class="entry" default="100" textfont="Oswald" halign="center" valign="center2"/>
                <quad pos="0 0" size="21 6" bgcolor="797979AA" halign="center" valign="center"/>
            </frame>
            <label pos="12 5.5" size="20 5" class="text" text="Amount (10%-300%)" valign="center2" halign="center" textsize="2"/>
            <frame pos="12 0">
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="bottom" textsize="1"/>
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="top" textsize="1"/>
                <entry id="Entry_Stamina_Amount" pos="0 0"size="20 5" class="entry" default="100" textfont="Oswald" halign="center" valign="center2"/>
                <quad pos="0 0" size="21 6" bgcolor="797979AA" halign="center" valign="center"/>
            </frame>
        </frame>
    """;
}

Text Private_WeaponUpdate() {
    return """
    declare Integer Weapon for Page;
    declare Real Weapon_Gain for Page;
    declare Integer Weapon_Amount for Page;
    declare Integer Stamina for Page;
    declare Real Stamina_Gain for Page;
    declare Real Stamina_Amount for Page;

    declare Quad_Weapon_Selector <=> (Frame_Properties.GetFirstChild("Weapon_Selector") as CMlQuad);
    declare Entry_Weapon_Gain <=> (Frame_Properties.GetFirstChild("Entry_Weapon_Gain") as CMlEntry);
    declare Entry_Weapon_Amount <=> (Frame_Properties.GetFirstChild("Entry_Weapon_Amount") as CMlEntry);
    declare Quad_Stamina_Selector <=> (Frame_Properties.GetFirstChild("Stamina_Selector") as CMlQuad);
    declare Entry_Stamina_Gain <=> (Frame_Properties.GetFirstChild("Entry_Stamina_Gain") as CMlEntry);
    declare Entry_Stamina_Amount <=> (Frame_Properties.GetFirstChild("Entry_Stamina_Amount") as CMlEntry);

    Quad_Weapon_Selector.RelativePosition_V3.X = -40. + Weapon*20.;
    Quad_Stamina_Selector.RelativePosition_V3.X = -30 + Stamina*20.;

    Entry_Weapon_Gain.SetText(TL::ToText(Weapon_Gain*100), False);
    Entry_Weapon_Amount.SetText(TL::ToText(Weapon_Amount), False);
    Entry_Stamina_Gain.SetText(TL::ToText(Stamina_Gain*100), False);
    Entry_Stamina_Amount.SetText(TL::ToText(Stamina_Amount*100), False);
    """;
}

Text Get_EditCheckpoint() {
    return """
<stylesheet>
    <style class="text" bgcolor="FFFF" textfont="Oswald" style="TextTitle3" focusareacolor1="0000" focusareacolor2="0000" textcolor="FFFFFFFF"/>
    <style class="entry" focusareacolor1="797979AA" focusareacolor2="292929AA" textsize="2"/>
</stylesheet>
<frame pos="125 20" scale="0.75">
    <frame z-index="1">
        <label pos="0 40" size="75 10" class="text" text="Edit checkpoint" textsize="5" halign="center" valign="center2"/>
        <label pos="42.5 42.5" size="5 5" text="❌" valign="center" halign="center" focusareacolor2="FF0000FF" scriptevents="1" textsize="2" focusareacolor1="0000" scriptaction="Close"/>
        <label id="Save" pos="0 -65" size="20 7" text="SAVE" halign="center" valign="center" focusareacolor1="797979AA" focusareacolor2="292929AA" scriptevents="1" textfont="Oswald" textcolor="FFFFFFFF"/>
        <frame pos="0 40">
            <label id="Enable" pos="-10 -8.5" size="20 5" text="enable" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
            <label id="Disable" pos="10 -8.5" size="20 5" text="disable" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
            <quad id="Enabled_Selector" pos="-20 -6" size="20 5" bgcolor="292929AA"/>
            <quad pos="0 -5.5" size="41 6" bgcolor="797979AA" halign="center"/>
        </frame>
    </frame>
    <frame id="properties" z-index="1" pos="0 10">
        <frame id="Basic" pos="0 15">
            <label pos="0 0" size="20 5" class="text" text="Type" halign="center" textsize="3"/>
            <frame pos="0 -5.5">
                <label id="Checkpoint" pos="-20 -2.5" size="20 5" text="Checkpoint" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Portal" pos="0 -2.5" size="20 5" text="Portal" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <label id="Goal" pos="20 -2.5" size="20 5" text="Goal" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
                <quad id="Type_Selector" pos="-30 0" size="20 5" bgcolor="292929AA"/>
                <quad pos="0 0.5" size="61 6" bgcolor="797979AA" halign="center"/>
            </frame>

            <label pos="0 -13" size="20 5" class="text" text="Order" halign="center" textsize="3"/>
            <frame pos="0 -21">
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="bottom" textsize="1"/>
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="top" textsize="1"/>
                <entry id="Entry_Order" pos="0 0"size="20 5" class="entry" default="0" textfont="Oswald" halign="center" valign="center2"/>
                <quad pos="0 0" size="21 6" bgcolor="797979AA" halign="center" valign="center"/>
            </frame>
        </frame>
        {{{Private_WeaponML()}}}
    </frame>
    <quad pos="-45 45" z-index="0" size="90 115" bgcolor="000000AA" scriptevents="1"/>
</frame>
    """;
}

Text Get_EditSpawn() {
    return """
<stylesheet>
    <style class="text" bgcolor="FFFF" textfont="Oswald" style="TextTitle3" focusareacolor1="0000" focusareacolor2="0000" textcolor="FFFFFFFF"/>
    <style class="entry" focusareacolor1="797979AA" focusareacolor2="292929AA" textsize="2"/>
</stylesheet>
<frame pos="125 20" scale="0.75">
    <frame z-index="1">
        <label pos="0 40" size="75 10" class="text" text="Edit spawn" textsize="5" halign="center" valign="center2"/>
        <label pos="42.5 42.5" z-index="0" size="5 5" text="❌" valign="center" halign="center" focusareacolor2="FF0000FF" scriptevents="1" textsize="2" focusareacolor1="0000" scriptaction="Close"/>
        <label id="Save" pos="0 -65" size="20 7" text="SAVE" halign="center" valign="center" focusareacolor1="797979AA" focusareacolor2="292929AA" scriptevents="1" textfont="Oswald" textcolor="FFFFFFFF"/>
        <frame pos="0 40">
            <label id="Enable" pos="-10 -8.5" size="20 5" text="enable" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
            <label id="Disable" pos="10 -8.5" size="20 5" text="disable" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
            <quad id="Enabled_Selector" pos="-20 -6" size="20 5" bgcolor="292929AA"/>
            <quad pos="0 -5.5" size="41 6" bgcolor="797979AA" halign="center"/>
        </frame>
    </frame>
    <frame id="properties" z-index="1" pos="0 10">
        <frame id="Basic" pos="0 15">
            <label pos="0 0" size="20 5" class="text" text="Type" halign="center" textsize="3"/>
            <frame pos="0 0">
                <label id="Spawn" scriptevents="1" pos="-10 -8.5" size="20 5" class="text" text="spawn" halign="center" valign="center" textsize="2"/>
                <label id="CPSpawn" scriptevents="1" pos="10 -8.5" size="20 5" class="text" text="cpspawn" halign="center" valign="center" textsize="2"/>
                <quad id="Type_Selector" pos="-20 -6" size="20 5" bgcolor="292929AA"/>
                <quad pos="0 -5.5" size="41 6" bgcolor="797979AA" halign="center"/>
            </frame>
            <label pos="0 -13" size="20 5" class="text" text="Order" halign="center" textsize="3"/>
            <frame pos="0 -21">
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="bottom" textsize="1"/>
                <label pos="9 0" size="6 3.5" class="text" text="" scriptevents="1" halign="center" valign="top" textsize="1"/>
                <entry id="Entry_Order" pos="0 0"size="20 5" class="entry" default="0" textfont="Oswald" halign="center" valign="center2"/>
                <quad pos="0 0" size="21 6" bgcolor="797979AA" halign="center" valign="center"/>
            </frame>
        </frame>
        {{{Private_WeaponML()}}}
    </frame>
    <quad pos="-45 45" z-index="0" size="90 115" bgcolor="000000AA" scriptevents="1"/>
</frame>
    """;
}

Text Get_EditGoal() {
    return """
<stylesheet>
    <style class="text" bgcolor="FFFF" textfont="Oswald" style="TextTitle3" focusareacolor1="0000" focusareacolor2="0000" textcolor="FFFFFFFF"/>
    <style class="entry" focusareacolor1="797979AA" focusareacolor2="292929AA" textsize="2"/>
</stylesheet>
<frame pos="125 20" scale="0.75">
    <frame z-index="1">
        <label pos="0 40" size="75 10" class="text" text="Edit goal" textsize="5" halign="center" valign="center2"/>
        <label pos="42.5 42.5" z-index="0" size="5 5" text="❌" valign="center" halign="center" focusareacolor2="FF0000FF" scriptevents="1" textsize="2" focusareacolor1="0000" scriptaction="Close"/>
        <label id="Save" pos="0 -65" size="20 7" text="SAVE" halign="center" valign="center" focusareacolor1="797979AA" focusareacolor2="292929AA" scriptevents="1" textfont="Oswald" textcolor="FFFFFFFF"/>
        <frame pos="0 40">
            <label id="Enable" pos="-10 -8.5" size="20 5" text="enable" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
            <label id="Disable" pos="10 -8.5" size="20 5" text="disable" halign="center" valign="center" textsize="2" class="text" scriptevents="1"/>
            <quad id="Enabled_Selector" pos="-20 -6" size="20 5" bgcolor="292929AA"/>
            <quad pos="0 -5.5" size="41 6" bgcolor="797979AA" halign="center"/>
        </frame>
    </frame>
    <frame id="properties" z-index="1" pos="0 10">
    </frame>
    <quad pos="-45 45" z-index="1" size="90 115" bgcolor="000000AA" scriptevents="1"/>
</frame>
    """;
}

Void Load() {
    log(Now^"> Loaded.");
    if (Map.TMObjective_AuthorTime == -1)
		    Map.TMObjective_AuthorTime = 1;
}

Void Unload() {
}

Void Init() {
    MapType::SetVersion(3);
    CustomEditAnchorData = True;
    ValidationStatus = CMapType::ValidationStatus::Validated;
}

Void InitBasePageVariables(CAnchorData _Anchor) {
    declare Boolean Enabled for ManialinkPage;
    declare metadata Meta_Enabled for _Anchor = True;

    Enabled = Meta_Enabled;
}

Void SaveBasePageVariables(CAnchorData _Anchor) {
    declare Boolean Enabled for ManialinkPage;
    declare metadata Meta_Enabled for _Anchor = True;

    Meta_Enabled = Enabled;
}

Void InitWeaponPageVariables(CAnchorData _Anchor) {
    declare Integer Weapon for ManialinkPage;
    declare Real Weapon_Gain for ManialinkPage;
    declare Integer Weapon_Amount for ManialinkPage;
    declare Integer Stamina for ManialinkPage;
    declare Real Stamina_Gain for ManialinkPage;
    declare Real Stamina_Amount for ManialinkPage;

    declare metadata Meta_Weapon for _Anchor = 1;
    declare metadata Meta_Weapon_Gain for _Anchor = 1.0;
    declare metadata Meta_Weapon_Amount for _Anchor = 4;
    declare metadata Meta_Stamina for _Anchor = 0;
    declare metadata Meta_Stamina_Gain for _Anchor = 1.0;
    declare metadata Meta_Stamina_Amount for _Anchor = 1.0;

    Weapon = Meta_Weapon;
    Weapon_Gain = Meta_Weapon_Gain;
    Weapon_Amount = Meta_Weapon_Amount;
    Stamina = Meta_Stamina;
    Stamina_Gain = Meta_Stamina_Gain;
    Stamina_Amount = Meta_Stamina_Amount;
}

Void SaveWeaponPageVariables(CAnchorData _Anchor) {
    declare Integer Weapon for ManialinkPage;
    declare Real Weapon_Gain for ManialinkPage;
    declare Integer Weapon_Amount for ManialinkPage;
    declare Integer Stamina for ManialinkPage;
    declare Real Stamina_Gain for ManialinkPage;
    declare Real Stamina_Amount for ManialinkPage;

    declare metadata Meta_Weapon for _Anchor = 1;
    declare metadata Meta_Weapon_Gain for _Anchor = 1.0;
    declare metadata Meta_Weapon_Amount for _Anchor = 4;
    declare metadata Meta_Stamina for _Anchor = 0;
    declare metadata Meta_Stamina_Gain for _Anchor = 1.0;
    declare metadata Meta_Stamina_Amount for _Anchor = 1.0;

    Meta_Weapon = Weapon;
    Meta_Weapon_Gain = Weapon_Gain;
    Meta_Weapon_Amount = Weapon_Amount;
    Meta_Stamina = Stamina;
    Meta_Stamina_Gain = Stamina_Gain;
    Meta_Stamina_Amount = Stamina_Amount;
}

Void EditGoal(CAnchorData _Goal) {
    InitBasePageVariables(_Goal);

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditGoal">
    {{{Get_EditGoal()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Boolean Enabled for Page;
        declare Boolean Saved for Page;

        declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
        declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);

        if(Enabled) {
            Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
            Frame_Properties.ZIndex = 1.;
        } else {
            Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
            Frame_Properties.ZIndex = -1.;
        }
    }

    main() {
        declare Boolean Enabled for Page;
        declare NeedUpdate = False;
        UpdateView();

        while(True) {
            yield;

            if(NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type){
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Save" : {
                                SendCustomEvent("Event_Save_Goal", Text[]);
                            }
                            case "Enable" : {
                                Enabled = True;
                                NeedUpdate = True;
                            }
                            case "Disable" : {
                                Enabled = False;
                                NeedUpdate = True;
                            }
                        }
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}

Void EditCheckpoint(CAnchorData _Checkpoint) {
    InitBasePageVariables(_Checkpoint);

    declare Integer Order for ManialinkPage;
    declare Integer CPType for ManialinkPage;
    declare Boolean IsPortal for ManialinkPage;
    declare metadata Meta_CPType for _Checkpoint = 0;
    declare metadata Meta_IsPortal for _Checkpoint = False;

    Order = _Checkpoint.Order;
    CPType = Meta_CPType;
    IsPortal = Meta_IsPortal;

    InitWeaponPageVariables(_Checkpoint);

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditCheckpoint">
    {{{Get_EditCheckpoint()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Boolean Enabled for Page;
        declare Boolean IsPortal for Page;
        declare Integer CPType for Page;
        declare Integer Order for Page;

        declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
        declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);
        declare Quad_Type_Selector <=> (Frame_Properties.GetFirstChild("Type_Selector") as CMlQuad);
        declare Entry_Order <=> (Frame_Properties.GetFirstChild("Entry_Order") as CMlEntry);

        if(Enabled) {
            Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
            Frame_Properties.ZIndex = 1.;
        } else {
            Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
            Frame_Properties.ZIndex = -1.;
        }

        // CP - PORTAL - GOAL
        Quad_Type_Selector.RelativePosition_V3.X = -30 + CPType*20.;

        Entry_Order.SetText(TL::ToText(Order), False);

        {{{Private_WeaponUpdate()}}}
    }

    main() {
        declare Boolean Enabled for Page;
        declare Integer Order for Page;
        declare Boolean IsPortal for Page;
        declare Integer CPType for Page;
        declare Integer Weapon for Page;
        declare Real Weapon_Gain for Page;
        declare Integer Weapon_Amount for Page;
        declare Integer Stamina for Page;
        declare Real Stamina_Gain for Page;
        declare Real Stamina_Amount for Page;
        declare NeedUpdate = False;
        UpdateView();

        while(True) {
            yield;

            if(NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Save" : SendCustomEvent("Event_Save_Checkpoint", Text[]);
                            case "Enable" : Enabled = True;
                            case "Disable" : Enabled = False;
                            case "Checkpoint" : CPType = 0;
                            case "Portal" : CPType = 1;
                            case "Goal" : CPType = 2;
                            case "Laser" : Weapon = 0;
                            case "Rocket" : Weapon = 1;
                            case "Nucleus" : Weapon = 2;
                            case "Arrow" : Weapon = 3;
                            case "Normal" : {
                                Stamina = 0;
                                Stamina_Gain = 1.;
                                Stamina_Amount = 1.;
                            }
                            case "Custom" : Stamina = 1;
                            case "Unlimited" : Stamina = 2;
                        }
                        IsPortal = CPType == 1;
                        NeedUpdate = True;
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);

                        switch(Entry.ControlId) {
                            case "Entry_Order": Order = TL::ToInteger(Entry.Value);
                            case "Entry_Weapon_Gain": Weapon_Gain = TL::ToReal(Entry.Value)/100;
                            case "Entry_Weapon_Amount": Weapon_Amount = TL::ToInteger(Entry.Value);
                            case "Entry_Stamina_Gain": Stamina_Gain = TL::ToReal(Entry.Value)/100;
                            case "Entry_Stamina_Amount": Stamina_Amount = TL::ToReal(Entry.Value)/100;
                        }
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}

Void EditSpawn(CAnchorData _Spawn) {
    InitBasePageVariables(_Spawn);

    declare Integer Order for ManialinkPage;
    declare Boolean IsCpSpawn for ManialinkPage;
    declare metadata Meta_IsCpSpawn for _Spawn = False;

    Order = _Spawn.Order;
    IsCpSpawn = Meta_IsCpSpawn;

    InitWeaponPageVariables(_Spawn);

    ManialinkText = """
    <manialink version="3" name="Obstacle:EditSpawn">
    {{{Get_EditSpawn()}}}
    <script><!--
    #Include "TextLib" as TL

    Void UpdateView() {
        declare Boolean Enabled for Page;
        declare Boolean IsCpSpawn for Page;
        declare Integer Order for Page;

        declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
        declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);
        declare Quad_Type_Selector <=> (Frame_Properties.GetFirstChild("Type_Selector") as CMlQuad);
        declare Entry_Order <=> (Frame_Properties.GetFirstChild("Entry_Order") as CMlEntry);

        if(Enabled) {
            Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
            Frame_Properties.ZIndex = 1.;
        } else {
            Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
            Frame_Properties.ZIndex = -1.;
        }

        if(!IsCpSpawn)
            Quad_Type_Selector.RelativePosition_V3.X = -20.;
        else
            Quad_Type_Selector.RelativePosition_V3.X = 0.;

        Entry_Order.SetText(TL::ToText(Order), False);
        {{{Private_WeaponUpdate()}}}
    }

    main() {
        declare Boolean Enabled for Page;
        declare Integer Order for Page;
        declare Boolean IsCpSpawn for Page;
        declare Integer Weapon for Page;
        declare Real Weapon_Gain for Page;
        declare Integer Weapon_Amount for Page;
        declare Integer Stamina for Page;
        declare Real Stamina_Gain for Page;
        declare Real Stamina_Amount for Page;
        declare NeedUpdate = False;
        UpdateView();

        while (True) {
            yield;

            if (NeedUpdate) {
                UpdateView();
                NeedUpdate = False;
            }

            foreach (Event in PendingEvents) {
                switch (Event.Type) {
                    case CMlEvent::Type::MouseClick: {
                        switch (Event.ControlId) {
                            case "Save" : {
                                SendCustomEvent("Event_Save_Spawn", Text[]);
                            }
                            case "Enable" : {
                                Enabled = True;
                                NeedUpdate = True;
                            }
                            case "Disable" : {
                                Enabled = False;
                                NeedUpdate = True;
                            }
                            case "Spawn" : {
                                IsCpSpawn = False;
                                NeedUpdate = True;
                            }
                            case "CPSpawn" : {
                                IsCpSpawn = True;
                                NeedUpdate = True;
                            }
                            case "Laser" : {
                                Weapon = 0;
                                NeedUpdate = True;
                            }
                            case "Rocket" : {
                                Weapon = 1;
                                NeedUpdate = True;
                            }
                            case "Nucleus" : {
                                Weapon = 2;
                                NeedUpdate = True;
                            }
                            case "Arrow" : {
                                Weapon = 3;
                                NeedUpdate = True;
                            }
                            case "Normal" : {
                                Stamina = 0;
                                Stamina_Gain = 1.;
                                Stamina_Amount = 1.;
                                NeedUpdate = True;
                            }
                            case "Custom" : {
                                Stamina = 1;
                                NeedUpdate = True;
                            }
                            case "Unlimited" : {
                                Stamina = 2;
                                NeedUpdate = True;
                            }
                        }
                    }
                    case CMlScriptEvent::Type::EntrySubmit: {
                        declare Entry <=> (Event.Control as CMlEntry);
                        switch(Entry.ControlId) {
                            case "Entry_Order": {
                                Order = TL::ToInteger(Entry.Value);
                            }
                            case "Entry_Weapon_Gain": {
                                Weapon_Gain = TL::ToReal(Entry.Value)/100;
                            }
                            case "Entry_Weapon_Amount": {
                                Weapon_Amount = TL::ToInteger(Entry.Value);
                            }
                            case "Entry_Stamina_Gain": {
                                Stamina_Gain = TL::ToReal(Entry.Value)/100;
                            }
                            case "Entry_Stamina_Amount": {
                                Stamina_Amount = TL::ToReal(Entry.Value)/100;
                            }
                        }
                    }
                }
            }
        }
    }
    --></script>
    </manialink>
    """;
}

Void SaveCheckpointSettings() {
    if(!AnchorData.existskey(G_LastAnchorId)) return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if(Anchor.Tag != "Checkpoint") return;

    declare Integer Order for ManialinkPage;
    Anchor.Order = Order;

    declare Integer CPType for ManialinkPage;
    declare metadata Meta_IsPortal for Anchor = False;
    declare metadata Meta_CPType for Anchor = 0;
    Meta_CPType = CPType;
    Meta_IsPortal = CPType == 1;


    SaveBasePageVariables(Anchor);
    SaveWeaponPageVariables(Anchor);
}

Void SaveSpawnSettings() {
    if(!AnchorData.existskey(G_LastAnchorId)) return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if(Anchor.Tag != "Spawn") return;

    declare Integer Order for ManialinkPage;
    Anchor.Order = Order;

    declare Boolean IsCpSpawn for ManialinkPage;
    declare metadata Meta_IsCpSpawn for Anchor = False;
    Meta_IsCpSpawn = IsCpSpawn;

    SaveBasePageVariables(Anchor);
    SaveWeaponPageVariables(Anchor);
}

Void SaveGoalSettings() {
    if(!AnchorData.existskey(G_LastAnchorId)) return;

    declare Anchor <=> AnchorData[G_LastAnchorId];
    if(Anchor.Tag != "Goal") return;

    SaveBasePageVariables(Anchor);
}

Void UpdateValidability() {
    declare StartSpawns = 0;
    declare Goals = 0;

    foreach (Anchor in AnchorData) {
        declare metadata Meta_Enabled for Anchor = False;
        if(!Meta_Enabled) continue;

        switch(Anchor.Tag) {
            case "Spawn": {
                declare metadata Meta_IsCpSpawn for Anchor = False;
                if(!Meta_IsCpSpawn) {
                    StartSpawns += 1;
                    if(StartSpawns > 1) {
                        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
                        ValidabilityRequirementsMessage = _("You must place exactly one Start Spawn.");
                        return;
                    }
                }
            }
            case "Checkpoint": {
                //Check order of checkpoints
            }
            case "Goal": {
                Goals += 1;
            }
        }
    }


    if(StartSpawns == 0) {
        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
        ValidabilityRequirementsMessage = _("You must place at least one Start Spawn.");
    } else if(Goals == 0) {
        ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
        ValidabilityRequirementsMessage = _("You must place at least one Goal.");
    } else {
        ValidationStatus = CSmMapType::ValidationStatus::Validated;
    }
}

Void Loop() {

  foreach (Event in PendingEvents) {
    switch (Event.Type) {
      case CPluginEvent::Type::MapModified: {
        UpdateValidability();
      }

      case CPluginEvent::Type::EditAnchor: {
        if (!AnchorData.existskey(Event.EditedAnchorDataId)) continue;

        declare Anchor <=> AnchorData[Event.EditedAnchorDataId];
        ManialinkText = "";

        switch (Anchor.DefaultTag) {
          case "Goal": EditGoal(Anchor);
          case "Checkpoint": EditCheckpoint(Anchor);
          case "Spawn": EditSpawn(Anchor);
          case "Ammo": {}
          case "OffzoneShield": {}
          default: continue;
        }

        G_LastAnchorId = Anchor.Id;
      }

      case CPluginEvent::Type::StartValidation: {
        TestMapWithMode("Obstacle.Script.txt");
      }

      case CPluginEvent::Type::EditObjectives: {
DisplayDefaultSetObjectivesDialog ();
      }

      case CPluginEvent::Type::LayerCustomEvent: {
            switch(Event.CustomEventType) {
                case "Close": ManialinkText = "";
                case "Event_Save_Goal": SaveGoalSettings();
                case "Event_Save_Checkpoint": SaveCheckpointSettings();
                case "Event_Save_Spawn": SaveSpawnSettings();
            }

            UpdateValidability();
      }

    }
  }
}

main() {
    Load();
    Init();
    while(True) {
        Loop();
        yield;
    }
    Unload();
}

