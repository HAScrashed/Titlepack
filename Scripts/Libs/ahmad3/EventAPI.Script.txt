#Include "TextLib" as TL

#Include "Libs/smokegun/Constants.Script.txt" as Constants

#Include "Libs/ahmad3/InnerEventAPI.Script.txt" as Inner
#Include "Libs/ahmad3/EventAPITypes.Script.txt" as Types

declare Boolean G_AuthHeadersPending;

Boolean EventHasContent(Text _EventHandle) {
    return Inner::EventHasContent(_EventHandle);
}

Types::K_Event GetEvent(Text _EventHandle) {
    return Inner::GetEvent(_EventHandle);
}

Integer Private_FindCharIndex(Text _Haystack, Text _ToFind) {
    for (I, 0, TL::Length(_Haystack)) {
        if (TL::SubText(_Haystack, I, 1) == _ToFind) {
            return I;
        }
    }
    return -1;
}

/**
 * Returns `""` when the cache isn't compatible, otherwise the events cache in its JSON format.
 */
Text Private_GetRawCache() {
    declare persistent Text ObsStore_EventsCache2 for LocalUser;
    declare Integer VersIndex = Private_FindCharIndex(ObsStore_EventsCache2, "{");
    if (VersIndex == -1) return "";
    declare Text Version = TL::SubText(ObsStore_EventsCache2, 0, VersIndex);
    declare Text EventsCache = TL::SubText(ObsStore_EventsCache2, VersIndex, TL::Length(ObsStore_EventsCache2) - VersIndex);
    if (Constants::C_Version_EventsCache == Version) 
        return EventsCache;
    return "";
}

Boolean HasCachedEvent(Text _EventHandle) {
    declare Text RawEventsCache = Private_GetRawCache();
    if (RawEventsCache == "") return False;
    declare Types::K_Event[Text] EventsCache;
    EventsCache.fromjson(RawEventsCache);
    return EventsCache.existskey(_EventHandle)
        && EventsCache[_EventHandle].EditionsDetails.count > 0;
}

Types::K_Event GetCachedEvent(Text _EventHandle) {
    declare Text RawEventsCache = Private_GetRawCache();
    declare Types::K_Event[Text] EventsCache;
    EventsCache.fromjson(RawEventsCache);
    return EventsCache[_EventHandle];
}

Void LoadEdition(Text _EventHandle, Integer _EventEdition, Boolean _Lazy) {
    Inner::LoadEdition(_EventHandle, _EventEdition, _Lazy);
}

Void LoadEdition(Text _EventHandle, Integer _EventEdition) {
    Inner::LoadEdition(_EventHandle, _EventEdition);
}

Void Private_UpdateAuthHeaders() {
    declare persistent Text ObsStore_UserToken for LocalUser = "";
    if (G_AuthHeadersPending && ObsStore_UserToken != "") {
        Inner::SetAuthHeaders("\nPlayerLogin: " ^ LocalUser.Login ^ "\nAuthorization: " ^ ObsStore_UserToken);
        G_AuthHeadersPending = False;
    }
}

Void Load() {
    G_AuthHeadersPending = True;
    Private_UpdateAuthHeaders();
    Inner::Init();
}

Void Private_UpdateEventsCache() {
    declare Types::K_Event[Text] Events = Inner::Private_EventAPI_GetEvents();
    declare persistent Text ObsStore_EventsCache2 for LocalUser = "";
    ObsStore_EventsCache2 = Constants::C_Version_EventsCache ^ Events.tojson();
}

Void Loop() {
    Private_UpdateAuthHeaders();
    if (Inner::Loop()) {
        Private_UpdateEventsCache();
    }
}