/************************************************
 *   Obstacle Library
 *   Author:     ahmad3
 *
 *   Update the player info in the API
 ***********************************************/

#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr
#Include "Libs/ahmad3/UI/UpdateAuth.Script.txt" as UpdateAuth
#Include "Libs/ahmad3/ErrMgr.Script.txt" as ErrMgr
#Include "Libs/ahmad3/ErrorReport.Script.txt" as ErrorReport
#Include "Libs/ahmad3/Ban.Script.txt" as Ban

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-25"
#Const ScriptName "UpdatePlayer.Script.txt"

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Public
////////////////////

/**
 * Returns the version of the script module.
 */
Text GetVersion() {
    return Version;
}

/**
 * Returns the name of the script module.
 */
Text GetScriptName() {
    return ScriptName;
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:UpdatePlayer">
    <script><![CDATA[

#Include "TextLib" as TL

#Struct K_PlayerUpdateBody {
    Text login;
    Text name;
    Text zone_path;
}

{{{Ban::ML_Preproc("Ban")}}}
{{{ReqMgr::ML_Preproc("ReqMgr")}}}
{{{ErrMgr::ML_Preproc("ErrMgr", "Ban")}}}

{{{ReqMgr::ML_Content("ReqMgr")}}}
{{{Ban::ML_Content("Ban")}}}
{{{ErrMgr::ML_Content("ErrMgr", "TL", "Ban")}}}
{{{UpdateAuth::ML_Content("UserAuth")}}}
{{{ErrorReport::ML_Content("ErrReport")}}}

////////////// ML Update
declare Integer G_AuthUpdated;

declare Boolean G_InitPlayerUpdate;
declare Ident G_PlayerUpdateReq;
declare Boolean G_PlayerUpdateReqIsPending;
declare Integer G_PendingPlayerUpdateReqId;
declare Boolean G_PlayerUpdateNeedsAuthUpdate;

declare ReqMgr_K_PostReqId G_ReqId;
declare ReqMgr_K_PostRequest G_Req;

Void InitPlayerUpdate() {
    declare K_PlayerUpdateBody Body = K_PlayerUpdateBody {
        login = LocalUser.Login,
        name = LocalUser.Name,
        zone_path = LocalUser.ZonePath
    };

    G_Req = ReqMgr_K_PostRequest {
        Route = "player/update",
        Body = Body.tojson(),
        Headers = ReqMgr_DefaultHeadersWith(ReqMgr_AuthHeaders())
    };

    G_ReqId = ReqMgr_Make(G_Req);
}

Void LoopPlayerUpdate() {
    if (!ReqMgr_IsPending(G_ReqId)) return;

    if (ReqMgr_IsWaiting(G_ReqId)) {
        G_ReqId = ReqMgr_MakePending(G_ReqId);
        if (ReqMgr_IsWaiting(G_ReqId)) return;
    }

    declare CHttpRequest Req <=> ReqMgr_GetReq(G_ReqId);
    if (!Req.IsCompleted) return;
    G_ReqId = ReqMgr_NullPostReq();

    if (Req.StatusCode == 401) {
        G_PlayerUpdateNeedsAuthUpdate = True;
        UserAuth_NotifyNeedUpdate();
    } else if (Req.StatusCode != 200) {
        declare ErrMgr_K_Error Err = ErrMgr_Handle(Req.StatusCode, Req.Result);
        if (Err.Ban.IsPresent) {
            SendCustomEvent("ban:update", [LocalUser.Login, Err.Ban.tojson()]);
        } else if (Err.Err.type != ErrMgr_C_Err_Maintenance) {
            ErrReport_Report(G_Req.Route, G_Req.Body, Req.Result, "POST");
        }
    }

    Http.Destroy(Req);
}

Void InitAuthUpdated() {
    declare netread Integer Net_AuthUpdated for UI = -1;
    G_AuthUpdated = Net_AuthUpdated;
}

Boolean AuthUpdated() {
    declare netread Integer Net_AuthUpdated for UI = -1;
    if (G_AuthUpdated != Net_AuthUpdated) {
        G_AuthUpdated = Net_AuthUpdated;
        return True;
    }
    return False;
}

main() {
    G_ReqId = ReqMgr_NullPostReq();

    InitAuthUpdated();
    InitPlayerUpdate();
    
    declare Boolean WaitingForAuthUpdate;

    while (True) {
        yield;

        LoopPlayerUpdate();

        if (G_PlayerUpdateNeedsAuthUpdate && AuthUpdated()) {
            InitPlayerUpdate();
            G_PlayerUpdateNeedsAuthUpdate = False;
        }
    }
}

    ]]></script>
</manialink>
    """;
}