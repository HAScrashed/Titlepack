/************************************************************
*	Checkpoint Times Library								*
*	Author:		steeffeen									*
*	Contact:	schteffens@gmail.com						*
*															*
*	Shows the best checkpoint times on the current map		*
*	on an additional scoreboard tab.						*
************************************************************/

#Include "TextLib" as TextLib
#Include "Libs/steeffeen/Tools.Script.txt" as Tools

/*************************
	CONSTANTS
*************************/

#Const	Version		"2013-09-07"
#Const	ScriptName	"CheckpointTimes.Script.txt"

/*************************
	GLOBALES
*************************/

declare Text		G_CPTimes_TabName;				// Name of the manialink tab
declare Ident		G_CPTimes_LayerId;				// Id of the layer

declare Text		G_CPTimes_BackgroundImage;		// Background image used to surround the layer
declare Vec2		G_CPTimes_BackgroundSize;		// Size of the background
declare Vec2		G_CPTimes_BackgroundPosition;	// Position of the background
declare Text		G_CPTimes_BackgroundColor;		// Colors of the manialink elements

declare Text		G_CPTimes_Title;				// A Title for the layer
declare Vec2		G_CPTimes_Size;					// Size of the layer
declare Vec2		G_CPTimes_Position;				// Position of the layer

declare Integer		G_CPTimes_CheckpointNb;			// Number of checkpoints

/*************************
	FUNCTIONS
*************************/

// Get the times layer
CUILayer Private_GetLayer() {
	if (UIManager.UILayers.existskey(G_CPTimes_LayerId)) {
		return UIManager.UILayers[G_CPTimes_LayerId];
	}
	return Null;
}

// Load the library
Void Load(Text _TabName) {
	// Create the layer
	declare Layer = UIManager.UILayerCreate();
	Layer.Type = CUILayer::EUILayerType::ScoresTable;
	UIManager.UIAll.UILayers.add(Layer);
	G_CPTimes_LayerId = Layer.Id;
	
	// Inialize the manialink properties
	G_CPTimes_BackgroundImage = "";
	G_CPTimes_BackgroundSize = <230., 100.6>;
	G_CPTimes_BackgroundPosition = <0., 0.>;
	G_CPTimes_BackgroundColor = "0007";
	
	// Set tab name
	G_CPTimes_TabName = _TabName;
	
	// Initialize values
	G_CPTimes_Title = _("Best Checkpoint Times");
	G_CPTimes_Size = <230., 100.>;
	G_CPTimes_Position = <0., 0.>;
	
	declare Integer[Integer] Net_Steff_LibTimes_BestCPTimes for Teams[0];
	declare Text[Integer] Net_Steff_LibTimes_BestCPNames for Teams[0];
	Net_Steff_LibTimes_BestCPTimes.clear();
	Net_Steff_LibTimes_BestCPNames.clear();
	
	declare netwrite Integer CPTimes_SynchroServer for Teams[0];
	CPTimes_SynchroServer = 1;
}

// Unload the library
Void Unload() {
	// Destroy the layer
	if (!UIManager.UILayers.existskey(G_CPTimes_LayerId)) return;
	declare Layer = UIManager.UILayers[G_CPTimes_LayerId];
	declare Removed = UIManager.UIAll.UILayers.remove(Layer);
	UIManager.UILayerDestroy(Layer);
	G_CPTimes_LayerId = NullId;
	
	declare netwrite Integer CPTimes_SynchroServer for Teams[0];
	CPTimes_SynchroServer = 0;
}

// Synchro the manialink
Void Synchro() {
	declare netwrite Integer CPTimes_SynchroServer for Teams[0];
	CPTimes_SynchroServer += 1;
}

// Build the manialink
Void Build() {
	declare Layer = Private_GetLayer();
	if (Layer == Null) return;
	declare Manialink = """
<manialink version="1" name="CPTimes">
	<script><!--
		#Include "TextLib" as TextLib
		
		Void UpdateFrameTab(CUIConfig UI, CMlPage Page, Text TabKey, CMlFrame MainFrame) {
			declare netread Boolean _TabsLib_UseTabs for UI;
			if (!_TabsLib_UseTabs) return;
			
			declare Boolean _TabsLib_ScoresLayerIsVisible 	for UI;
			declare Boolean _TabsLib_AltLayerIsVisible 		for UI;
			declare Text 	_TabsLib_CurrentTab 			for UI;
			declare netread Text _TabsLib_ScoresTableTab 	for UI;
			
			declare ShowCurrentTab = _TabsLib_AltLayerIsVisible && _TabsLib_CurrentTab == TabKey;
			
			if (TabKey == _TabsLib_ScoresTableTab) {
				ShowCurrentTab = _TabsLib_ScoresLayerIsVisible
					|| _TabsLib_AltLayerIsVisible && _TabsLib_CurrentTab == _TabsLib_ScoresTableTab;
			}
		
			if (ShowCurrentTab) {
				MainFrame.Show();
			} else {
				MainFrame.Hide();
			}
		}
		
		main() {
			wait(InputPlayer != Null);
			
			declare MainFrame <=> (Page.GetFirstChild("Frame_Times") as CMlFrame);
			declare Quad_Prev <=> (Page.GetFirstChild("Quad_Prev") as CMlQuad);
			declare Quad_Next <=> (Page.GetFirstChild("Quad_Next") as CMlQuad);
			
			declare netread Net_Steff_LibTimes_BestCPTimes for Teams[0] = Integer[Integer];
			declare netread Net_Steff_LibTimes_BestCPNames for Teams[0] = Text[Integer];
			declare netread Net_Steff_LibTimes_CPTimes for UI = Integer[Integer];
			
			declare PageNb = 1;
			
			declare LastUpdate = 0;
			
			while (True) {
				yield;
				
				if (!PageIsVisible) continue;
				
				UpdateFrameTab(UI, Page, "{{{TextLib::MLEncode(G_CPTimes_TabName)}}}", MainFrame);
				if (!MainFrame.Visible) continue;
				
				declare PageCount = Net_Steff_LibTimes_BestCPTimes.count / 21 + 1;
				
				foreach (Event in PendingEvents) {
					switch (Event.Type) {
						case CMlEvent::Type::MouseClick: {
							switch (Event.ControlId) {
								case "Quad_Next": {
									if (PageNb >= PageCount) continue;
									PageNb += 1;
								}
								case "Quad_Prev": {
									if (PageNb <= 1) continue;
									PageNb -= 1;
								}
								case "Label_Rank": {
									declare CPId for Event.Control = -1;
									if (CPId >= 0) {
										declare netread Integer CPTimes_SynchroServer for Teams[0];
										declare netwrite Integer CPTimes_SynchroClient for UI;
										declare netwrite Integer CPTimes_JumpToCPUpdate for UI;
										declare netwrite Integer CPTimes_JumpToCP for UI;
										CPTimes_SynchroClient = CPTimes_SynchroServer;
										CPTimes_JumpToCP = CPId;
										CPTimes_JumpToCPUpdate = Now;
									}
								}
							}
						}
					}
				}
				
				if (LastUpdate + 250 > Now) continue;
				LastUpdate = Now;
				
				// Pagers
				if (PageCount <= 1) {
					Quad_Prev.Visible = False;
					Quad_Next.Visible = False;
				} else {
					Quad_Prev.Visible = True;
					if (PageNb <= 1) {
						Quad_Prev.Substyle = "ArrowDisabled";
					} else {
						Quad_Prev.Substyle = "ArrowPrev";
					}
					Quad_Next.Visible = True;
					if (PageNb >= PageCount) {
						Quad_Next.Substyle = "ArrowDisabled";
					} else {
						Quad_Next.Substyle = "ArrowNext";
					}
				}
				
				// List checkpoint times
				for (Index, 1, 20) {
					declare CP = Index + (PageNb - 1) * 20;
					
					declare Frame_Time <=> (Page.GetFirstChild("Frame_Time"^Index) as CMlFrame);
					
					if (!Net_Steff_LibTimes_BestCPTimes.existskey(CP)) {
						Frame_Time.Visible = False;
						continue;
					}
					Frame_Time.Visible = True;
					
					declare Label_Rank <=> (Frame_Time.GetFirstChild("Label_Rank") as CMlLabel);
					declare Label_Name <=> (Frame_Time.GetFirstChild("Label_Name") as CMlLabel);
					declare Label_Time <=> (Frame_Time.GetFirstChild("Label_Time") as CMlLabel);
					declare Label_TimeDiff <=> (Frame_Time.GetFirstChild("Label_TimeDiff") as CMlLabel);
					
					declare CPId for Label_Rank = -1;
					if (CP != Net_Steff_LibTimes_BestCPTimes.count) {
						Label_Rank.Value = TextLib::ToText(CP);
						CPId = CP;
					} else {
						Label_Rank.Value = _("Goal");
						CPId = -1;
					}
					if (Net_Steff_LibTimes_BestCPTimes[CP] > 0
						&& Net_Steff_LibTimes_BestCPNames.existskey(CP)
						&& Net_Steff_LibTimes_BestCPNames[CP] != "") {
						Label_Name.Value = TextLib::MLEncode(Net_Steff_LibTimes_BestCPNames[CP]);
						Label_Time.Value = TextLib::TimeToText(Net_Steff_LibTimes_BestCPTimes[CP], True);
						if (!Net_Steff_LibTimes_CPTimes.existskey(CP) || Net_Steff_LibTimes_CPTimes[CP] < 0) {
							Label_TimeDiff.Value = "-";
						} else {
							declare TimeDiff = Net_Steff_LibTimes_CPTimes[CP] - Net_Steff_LibTimes_BestCPTimes[CP];
							if (TimeDiff <= 0) {
								Label_TimeDiff.Value = "$0f0=";
							} else {
								Label_TimeDiff.Value = TextLib::Compose("%1+%2", "$f00", TextLib::TimeToText(TimeDiff, True));
							}
						}
					} else {
						Label_Name.Value = "-";
						Label_Time.Value = "-";
						Label_TimeDiff.Value = "";
					}
				}
			}
		}
		--></script>
		<frame id="Frame_Times" pos="{{{Tools::GetPosn(G_CPTimes_Position)}}}">
			<label posn="0 {{{G_CPTimes_Size.Y * 0.36}}}" textprefix="$o$s" text="{{{TextLib::MLEncode(G_CPTimes_Title)}}}" textsize="4" translate="1"
				halign="center" valign="center2"/>
			<quad id="Quad_Prev" posn="-6 -54 5" sizen="7 7" style="Icons64x64_1" scriptevents="1" hidden="1" halign="center" valign="center2"/>
			<quad id="Quad_Next" posn="6 -54 5" sizen="7 7" style="Icons64x64_1" scriptevents="1" hidden="1" halign="center" valign="center2"/>""";
	
	// Background
	Manialink ^= """
		<quad posn="{{{Tools::GetPosn(G_CPTimes_BackgroundPosition)}}}" sizen="{{{Tools::GetPosn(G_CPTimes_BackgroundSize)}}}"
			halign="center" valign="center2" """;
	if (G_CPTimes_BackgroundImage == "") {
		Manialink ^= """bgcolor="{{{G_CPTimes_BackgroundColor}}}"/>""";
	} else {
		Manialink ^= """image="{{{G_CPTimes_BackgroundImage}}}"/>""";
	}
	
	// Times
	Manialink ^= """
		<framemodel id="Model_Time">
			<format textsize="2" textemboss="1"/>
			<label id="Label_Rank" posn="0 0" sizen="{{{G_CPTimes_Size.X * 0.03}}} 0" textprefix="$o" halign="center" valign="center2" style="CardButtonSmallXS" scriptevents="1" />
			<label id="Label_Name" posn="{{{G_CPTimes_Size.X * 0.03}}} 0" sizen="{{{G_CPTimes_Size.X * 0.19}}} 0" halign="left" valign="center2"/>
			<label id="Label_Time" posn="{{{G_CPTimes_Size.X * 0.24}}} 0" sizen="{{{G_CPTimes_Size.X * 0.8}}} 0" textprefix="$o"
				halign="left" valign="center2"/>
			<label id="Label_TimeDiff" posn="{{{G_CPTimes_Size.X * 0.34}}} 0" sizen="{{{G_CPTimes_Size.X * 0.09}}} 0" halign="left" valign="center2"/>
		</framemodel>""";
	
	declare BaseX = G_CPTimes_Size.X * -0.422;
	declare BaseY = 34.7;
	declare RowHeight = G_CPTimes_Size.Y * 0.08;
	
	for (Index, 1, 20) {
		if (Index == 11) {
			BaseX = G_CPTimes_Position.X + 5.;
			BaseY += 10 * RowHeight;
		}
		declare Y = BaseY - Index * RowHeight;
		Manialink ^= """<frameinstance id="Frame_Time{{{Index}}}" modelid="Model_Time" posn="{{{BaseX}}} {{{Y}}}"/>""";
	}
	
	Manialink ^= """
	</frame>
</manialink>""";
	
	// Set manialink
	Layer.ManialinkPage = Manialink;
}

// Set the title of the display
Void SetTitle(Text _Title) {
	G_CPTimes_Title = TextLib::MLEncode(_Title);
}

// Set the table size
Void SetSize(Vec2 _Size) {
	G_CPTimes_Size = _Size;
}

// Set the table position
Void SetPosition(Vec2 _Position) {
	G_CPTimes_Position = _Position;
}

// Use a background image for the layer
Void SetBackgroundImage(Text _ImagePath, Vec2 _Size, Vec2 _Position) {
	G_CPTimes_BackgroundImage = TextLib::MLEncode(_ImagePath);
	G_CPTimes_BackgroundSize = _Size;
	G_CPTimes_BackgroundPosition = _Position;
}

// Reset checkpoint times
Void ResetTimes() {
	declare netwrite Integer[Integer] Net_Steff_LibTimes_BestCPTimes for Teams[0];
	declare netwrite Text[Integer] Net_Steff_LibTimes_BestCPNames for Teams[0];
	Net_Steff_LibTimes_BestCPTimes.clear();
	Net_Steff_LibTimes_BestCPNames.clear();
	for (Index, 1, G_CPTimes_CheckpointNb) {
		Net_Steff_LibTimes_BestCPTimes[Index] = -1;
	}
	foreach (Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;
		declare netwrite Net_Steff_LibTimes_CPTimes for UI = Integer[Integer];
		Net_Steff_LibTimes_CPTimes.clear();
	}
}

// Set the number of checkpoints
Void SetNbCheckpoints(Integer _Number) {
	G_CPTimes_CheckpointNb = _Number;
}

// Submit new checkpoint time
Boolean SubmitCheckpointTime(Integer _CheckpointNb, CSmPlayer _Player, Integer _CPTime) {
	if (Private_GetLayer() == Null) return False;
	if (_CheckpointNb < 1 || _Player == Null || _CPTime <= 0) return False;
	declare netwrite Integer[Integer] Net_Steff_LibTimes_BestCPTimes for Teams[0];
	if (!Net_Steff_LibTimes_BestCPTimes.existskey(_CheckpointNb)) return False;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) {
		declare netwrite Net_Steff_LibTimes_CPTimes for UI = Integer[Integer];
		if (!Net_Steff_LibTimes_CPTimes.existskey(_CheckpointNb) || Net_Steff_LibTimes_CPTimes[_CheckpointNb] > _CPTime) {
			Net_Steff_LibTimes_CPTimes[_CheckpointNb] = _CPTime;
		}
	}
	
	if (Net_Steff_LibTimes_BestCPTimes[_CheckpointNb] > _CPTime || Net_Steff_LibTimes_BestCPTimes[_CheckpointNb] <= 0) {
		Net_Steff_LibTimes_BestCPTimes[_CheckpointNb] = _CPTime;
		declare netwrite Text[Integer] Net_Steff_LibTimes_BestCPNames for Teams[0];
		Net_Steff_LibTimes_BestCPNames[_CheckpointNb] = _Player.Name;
		return True;
	}
	
	return False;
}

// Check if a player request a jump to a CP
Integer[CSmPlayer] PendingJumps() {
	declare Result = Integer[CSmPlayer];
	
	foreach (Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;
		
		declare CPTimes_PrevJumpToCPUpdate for Player = -1;
		declare netread Integer CPTimes_JumpToCPUpdate for UI;
		if (CPTimes_PrevJumpToCPUpdate != CPTimes_JumpToCPUpdate) {
			CPTimes_PrevJumpToCPUpdate = CPTimes_JumpToCPUpdate;
			
			declare netwrite Integer CPTimes_SynchroServer for Teams[0];
			declare netread Integer CPTimes_SynchroClient for UI;
			if (CPTimes_SynchroServer == CPTimes_SynchroClient) {
				declare netread Integer CPTimes_JumpToCP for UI;
				Result[Player] = CPTimes_JumpToCP;
			}
		}
	}
	
	return Result;
}