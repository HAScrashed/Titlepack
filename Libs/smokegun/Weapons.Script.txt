/************************************************
*   Obstacle Library                            *
*   Author:     smokegun                        *
*                                               *
*   Weapons related functions.                  *
************************************************/

#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/ShootMania/Attributes.Script.txt" as Attributes

#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/smokegun/Constants.Script.txt" as Constants

/***************************************
    CONSTANTS
***************************************/

#Const  Version     "2021-07-4"
#Const  ScriptName  "Weapons.Script.txt"


/* Reset a player's weapon max ammo default values
 * Set weapon to rocket
 */
Void ResetWeapon(CSmPlayer _Player) {
    _Player.AmmoGain = 1.0;
    SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, 1);
    SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
    SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, 2);
    SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Arrow, 3);
    SetPlayerWeapon(_Player, CSmMode::EWeapon::Rocket, False);
}

Void SetWeapon(CSmPlayer _Player, Integer _WeaponType, Real _Gain, Integer _Count) {
    ResetWeapon(_Player);

    declare Weapon = CSmMode::EWeapon::Rocket;
    switch(_WeaponType) {
        case Constants::C_Weapon_Laser: {
            Weapon = CSmMode::EWeapon::Laser;
        }
        case Constants::C_Weapon_Nucleus: {
            Weapon = CSmMode::EWeapon::Nucleus;
        }
        case Constants::C_Weapon_Arrow: {
            Weapon = CSmMode::EWeapon::Arrow;
        }
    }

    _Player.AmmoGain = _Gain;
    SetPlayerWeapon(_Player, Weapon, False);
    SetPlayerAmmoMax(_Player, Weapon, _Count);
}

Void FillUpPlayerAmmo(CSmPlayer _Player) {

    declare LastCheckpointId = Player::getLastCheckpoint(_Player);
    if (MapLandmarks.existskey(LastCheckpointId)) {
        declare CheckpointLandmark <=> MapLandmarks[LastCheckpointId];
        declare metadata Meta_EmptyWeapon for CheckpointLandmark = False;
        if (Meta_EmptyWeapon) {
            return;
        }
    }

    if (_Player == Null || _Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
        declare PlayerHasRespawned for _Player = False;
        PlayerHasRespawned = True;
    } else {
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 18);
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Laser, 21);
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Nucleus, 16);
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Arrow, 21);
    }
}

Void EmptyPlayerAmmo(CSmPlayer _Player) {
    if (_Player == Null || _Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
        declare PlayerHasRespawned for _Player = False;
        PlayerHasRespawned = True;
    } else {
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 0);
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Laser, 0);
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Nucleus, 0);
        SetPlayerAmmo(_Player, CSmMode::EWeapon::Arrow, 0);
    }
}

Void ApplyEffects(CSmPlayer _Player, CSmMapLandmark _Anchor) {
    declare metadata Meta_Weapon for _Anchor = 1;
    declare metadata Meta_Weapon_Gain for _Anchor = 1.0;
    declare metadata Meta_Weapon_Amount for _Anchor = 4;
    declare metadata Meta_RefillWeapon for _Anchor = False;
    declare metadata Meta_EmptyWeapon for _Anchor = False;

    declare metadata Meta_Stamina for _Anchor = 0;
    declare metadata Meta_Stamina_Gain for _Anchor = 1.0;
    declare metadata Meta_Stamina_Amount for _Anchor = 1.0;
    declare metadata Meta_RefillStamina for _Anchor = False;
    declare metadata Meta_EmptyStamina for _Anchor = False;

    SetWeapon(_Player, Meta_Weapon, Meta_Weapon_Gain, Meta_Weapon_Amount);
    _Player.StaminaMax = Meta_Stamina_Amount;
    _Player.StaminaGain = Meta_Stamina_Gain;

    declare StaminaUnlimited for _Player = False;
    StaminaUnlimited = Meta_Stamina == 2;
    if (StaminaUnlimited) {
        _Player.StaminaMax = 3.;
        _Player.StaminaGain = 1.;
    }

    if (Meta_RefillWeapon) {
        FillUpPlayerAmmo(_Player);
    }

    if (Meta_EmptyWeapon) {
        EmptyPlayerAmmo(_Player);
    }

    if (Meta_RefillStamina) {
        _Player.Stamina = _Player.StaminaMaxValue;
    }

    if (Meta_EmptyStamina) {
        _Player.Stamina = 0;
    }

}

/*
 * Set the weapon based on the type of old checkpionts
 */
Void ApplyWeaponForCheckpointType(CSmPlayer _Player, Integer _Type) {
    declare Text UIMessage;

    switch (_Type) {
        // No ammunition gain
        case 1: {
            SetWeapon(_Player, Constants::C_Weapon_Rocket, 0.0, 0);
            UIMessage = _("No Ammunition!");
        }

        // Endless ammunition
        case 2: {
            SetWeapon(_Player, Constants::C_Weapon_Rocket, 10.0, 10);
            UIMessage = ("Endless Ammunition!");
        }

        default: {
            // Default values
            ResetWeapon(_Player);
            UIMessage = ("Normal Ammunition!");
        }
    }

    declare LastWeaponType for _Player = 0;
    if (LastWeaponType != _Type) {
        Message::SendStatusMessage(_Player, UIMessage, 3000, 1);
        LastWeaponType = _Type;
    }
}
