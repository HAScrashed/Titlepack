#Include "TextLib" as TL

Text GetScrollBarML(Vec2 _Position, Text _Name, Text _Dir) {
    declare ML_Text = """
        <frame class="Lib_ScrollBar__Frame" pos="{{{_Position.X}}} {{{_Position.Y}}}" data-for="{{{_Name}}}" data-dir="{{{_Dir}}}" size="5 5">
            <frame size="5 5" id="Lib_ScrollBar__Handle">
                <quad pos="1.67 -1.67" size="1.67 0.83" id="Lib_ScrollBar__Tip1" image="file://Media/Images/Obstacle/ScrollBar/FTip.png"/>
                <quad pos="1.67 -1.67" size="1.67 0.33" id="Lib_ScrollBar__Solid" image="file://Media/Images/Obstacle/ScrollBar/FSolid.png"/>
                <quad pos="1.67 -1.67" size="1.67 0.83" id="Lib_ScrollBar__Tip2" image="file://Media/Images/Obstacle/ScrollBar/FTip.png"/>
            </frame>
            <quad size="5 5" id="Lib_ScrollBar__Hitbox"/>
        </frame>
    """;
    return ML_Text;
}

Text GetInitFrames() {
    declare ML_Text = """//!
        declare CMlFrame[] Lib_ScrollBar__Frames;
        declare CMlFrame[] Lib_ScrollBar__ParentFrames;
        declare Text[] Lib_ScrollBar__Dir;
        declare Text[] Lib_ScrollBar__ParentDir;

        Page.GetClassChildren("Lib_ScrollBar__Frame", Page.MainFrame, True);
        foreach (Frame in Page.GetClassChildren_Result) {
            declare Lib_ScrollBar__MDown for Frame = <0., 99.>;
            Lib_ScrollBar__Frames.add((Frame as CMlFrame));
            Lib_ScrollBar__ParentFrames.add((Page.GetFirstChild(Frame.DataAttributeGet("for")) as CMlFrame));
            Lib_ScrollBar__Dir.add(Frame.DataAttributeGet("dir"));
        }
    """;
    return ML_Text;
}

Text GetLoop() {
    // events are unreliable because there might be stuff above the scrollbar elements
    // so out of security, we check every frame if the mouse is down and if it is, we check if it's above one of the elements we manage
    return """//!
    for (I, 0, Lib_ScrollBar__Frames.count - 1) {
        declare Frame = Lib_ScrollBar__Frames[I];
        declare Vec2 Lib_ScrollBar__MDown for Frame;
        declare Lib_ScrollBar__IsMouseDown for Frame = False;
        declare LastActive for Frame = 0;

        declare Handle = (Frame.GetFirstChild("Lib_ScrollBar__Handle") as CMlFrame);
        declare Hitbox = Frame.GetFirstChild("Lib_ScrollBar__Hitbox");

        declare Tip1 = (Handle.GetFirstChild("Lib_ScrollBar__Tip1") as CMlQuad);
        declare Solid = (Handle.GetFirstChild("Lib_ScrollBar__Solid") as CMlQuad);
        declare Tip2 = (Handle.GetFirstChild("Lib_ScrollBar__Tip2") as CMlQuad);

        // Check if mouse is on the gutter (Hitbox)
        if (Input.MousePos.X >= Hitbox.AbsolutePosition_V3.X && Input.MousePos.X <= Hitbox.AbsolutePosition_V3.X + Hitbox.Size.X && Input.MousePos.Y <= Hitbox.AbsolutePosition_V3.Y && Input.MousePos.Y >= Hitbox.AbsolutePosition_V3.Y - Hitbox.Size.Y) {
            if (Input.MouseLeftButton) {
                if (Lib_ScrollBar__MDown.Y == 99.) {
                    // New click
                    if (!Lib_ScrollBar__IsMouseDown) {
                        // Initiate dragging
                        Lib_ScrollBar__MDown = Input.MousePos;
                        // Move handle to mouse pos (if mouse is not on the handle)
                        if (Lib_ScrollBar__Dir[I] == "x") {
                            if (Input.MousePos.X < Handle.AbsolutePosition_V3.X || Input.MousePos.X > Handle.AbsolutePosition_V3.X + Handle.Size.X) {
                                Handle.RelativePosition_V3.X = Input.MousePos.X - Frame.AbsolutePosition_V3.X - Handle.Size.X / 2.;
                                Lib_ScrollBar__ParentFrames[I].ScrollOffset.Y = Handle.RelativePosition_V3.X / ML::Max(1., Hitbox.Size.X - Handle.Size.X) * Lib_ScrollBar__ParentFrames[I].ScrollMax.Y;    
                            }
                        } else {
                            if (Input.MousePos.Y > Handle.AbsolutePosition_V3.Y || Input.MousePos.Y < Handle.AbsolutePosition_V3.Y - Handle.Size.Y) {
                                Handle.RelativePosition_V3.Y = Input.MousePos.Y - Frame.AbsolutePosition_V3.Y + Handle.Size.Y / 2.;
                                Lib_ScrollBar__ParentFrames[I].ScrollOffset.Y = -Handle.RelativePosition_V3.Y / ML::Max(1., Hitbox.Size.Y - Handle.Size.Y) * Lib_ScrollBar__ParentFrames[I].ScrollMax.Y;
                            }
                        }
                    }
                }
            }

            Tip1.ModulateColor = <1., 1., 1.>;
            Solid.ModulateColor = <1., 1., 1.>;
            Tip2.ModulateColor = <1., 1., 1.>;
        } else {
            Tip1.ModulateColor = <0.5, 0.5, 0.5>;
            Solid.ModulateColor = <0.5, 0.5, 0.5>;
            Tip2.ModulateColor = <0.5, 0.5, 0.5>;
        }

        if (Input.MouseLeftButton) {
            if (Lib_ScrollBar__MDown.Y != 99.) { // Dragging was already initiated
                if (Lib_ScrollBar__Dir[I] == "x") {
                    Handle.RelativePosition_V3.X += Input.MousePos.X - Lib_ScrollBar__MDown.X;
                    Lib_ScrollBar__ParentFrames[I].ScrollOffset.Y = Handle.RelativePosition_V3.X / ML::Max(1., Hitbox.Size.X - Handle.Size.X) * Lib_ScrollBar__ParentFrames[I].ScrollMax.Y;
                } else {
                    Handle.RelativePosition_V3.Y += Input.MousePos.Y - Lib_ScrollBar__MDown.Y;
                    Lib_ScrollBar__ParentFrames[I].ScrollOffset.Y = -Handle.RelativePosition_V3.Y / ML::Max(1., Hitbox.Size.Y - Handle.Size.Y) * Lib_ScrollBar__ParentFrames[I].ScrollMax.Y;
                }

                Tip1.ModulateColor = <1., 1., 1.>;
                Solid.ModulateColor = <1., 1., 1.>;
                Tip2.ModulateColor = <1., 1., 1.>;
                Lib_ScrollBar__MDown = Input.MousePos;
            }

            Lib_ScrollBar__IsMouseDown = True;
        } else {
            Lib_ScrollBar__MDown.Y = 99.;
            Lib_ScrollBar__IsMouseDown = False;
        }

        if (Lib_ScrollBar__ParentFrames[I].ScrollMax.Y > 0.) {
            if (Lib_ScrollBar__Dir[I] == "x") {
                declare LastSize = Handle.Size.X;
                declare LastPos = Handle.RelativePosition_V3.X;

                Frame.Size.X = Lib_ScrollBar__ParentFrames[I].Size.X;
                Hitbox.Size.X = Frame.Size.X;

                Handle.Size.X = Hitbox.Size.X * Lib_ScrollBar__ParentFrames[I].Size.Y / (Lib_ScrollBar__ParentFrames[I].Size.Y + Lib_ScrollBar__ParentFrames[I].ScrollMax.Y);
                Handle.RelativePosition_V3.X = (Hitbox.Size.X - Handle.Size.X) * Lib_ScrollBar__ParentFrames[I].ScrollAnimOffset.Y / Lib_ScrollBar__ParentFrames[I].ScrollMax.Y;

                if (LastSize != Handle.Size.X || LastPos != Handle.RelativePosition_V3.X) {
                    LastActive = Now;

                    Tip1.RelativePosition_V3.Y = -Tip1.Size.X - 1.67;
                    Tip1.RelativePosition_V3.X = 0.;
                    Tip1.RelativeRotation = -90.;

                    Solid.RelativeRotation = -90.;
                    Solid.RelativePosition_V3.Y = -Solid.Size.X - 1.67;
                    Solid.RelativePosition_V3.X = Tip1.Size.Y;
                    Solid.Size.Y = Handle.Size.X - Tip1.Size.Y - Tip2.Size.Y;

                    Tip2.RelativePosition_V3.X = Handle.Size.X;
                    Tip2.RelativeRotation = 90.;
                }
            } else {
                declare LastSize = Handle.Size.Y;
                declare LastPos = Handle.RelativePosition_V3.Y;

                Frame.Size.Y = Lib_ScrollBar__ParentFrames[I].Size.Y;
                Hitbox.Size.Y = Frame.Size.Y;

                Handle.Size.Y = Hitbox.Size.Y * Lib_ScrollBar__ParentFrames[I].Size.Y / (Lib_ScrollBar__ParentFrames[I].Size.Y + Lib_ScrollBar__ParentFrames[I].ScrollMax.Y);
                Handle.RelativePosition_V3.Y = ML::Min(-0.01, -(Hitbox.Size.Y - Handle.Size.Y) * Lib_ScrollBar__ParentFrames[I].ScrollAnimOffset.Y / Lib_ScrollBar__ParentFrames[I].ScrollMax.Y);

                if (LastSize != Handle.Size.Y || LastPos != Handle.RelativePosition_V3.Y) {
                    LastActive = Now;

                    Tip1.RelativePosition_V3.Y = 0.;
                    Solid.RelativePosition_V3.Y = -Tip1.Size.Y;
                    Solid.Size.Y = Handle.Size.Y - Tip1.Size.Y - Tip2.Size.Y;
                    Tip2.RelativePosition_V3.Y = -Handle.Size.Y;
                    Tip2.RelativeRotation = 180.;
                    Tip2.RelativePosition_V3.X = Tip2.Size.X * 0.5 + Frame.Size.X / 2.;
                }
            }

            if (Now - LastActive < 190) {
                Tip1.ModulateColor = <1., 1., 1.>;
                Solid.ModulateColor = <1., 1., 1.>;
                Tip2.ModulateColor = <1., 1., 1.>;
            }

            Frame.Show();
        } else {
            Frame.Hide();
        }
    }""";
}