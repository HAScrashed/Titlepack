/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Util functions for auth system              *
 ************************************************/

#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/smokegun/Constants.Script.txt" as Constants

/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2023-04-01"
#Const  ScriptName  "Auth.Script.txt"

#Const C_Token_Ttl 43200000 // 1000*60*60*12

#Const C_MP_App_Id			"de1ce3ba8e"
#Const C_MP_App_Secret	"52877e3c1aa428eeb75a042c52caa01fb74a7526"
#Const C_MP_Link				"https://prod.live.maniaplanet.com/login/oauth2/authorize?response_type=token&"
#Const C_MP_Redirect		"http://192.168.1.113:3001/player/give_token"
// #Const C_MP_Redirect "https://api.obstacle.ovh/player/give_token"
// #Const C_MP_Redirect "http://localhost:3000/player/give_token"

Void LogMessage(Text _Msg) {
	log("[Obs Auth] " ^ _Msg);
}

Void LogError(Text _Msg) {
	LogMessage("ERROR: " ^_Msg);
}

Text UpdateToken() {
	LogMessage("Updating token...");

	declare persistent Text obsToken for LocalUser;
	declare persistent Text obsTokenAt for LocalUser = "0";
	
	declare login = LocalUser.Login;
	declare Text state = login ^ Now;
	declare payload = """{
		"login": {{{Json::GetText(login)}}},
		"state": {{{Json::GetText(state)}}}
	}""";
	
	declare req = Http.CreatePost(
		Constants::C_HostUrl ^ "player/get_token",
		payload,
		"Content-Type: application/json\nAccept: application/xml");
		
	OpenLink(C_MP_Link
		^ "client_id=" ^ C_MP_App_Id
		^ "&client_secret=" ^ C_MP_App_Secret
		^ "&redirect_uri=" ^ C_MP_Redirect
		^ "&state=" ^ state
		^ "&scope=basic",
		CManiaApp::ELinkType::ExternalBrowser);
		
	wait(req.IsCompleted);		
	if (req.StatusCode != 200) {
		LogError("Error: " ^ req.StatusCode ^ req.Result);
		Dialog_Message("An error occurred. Please contact the developers (e.g. @ahmadbky or @MiLTanT on discord).");
		// UI.SendChat("An error occurred. Please contact the developers (e.g. @ahmadbky or @MiLTanT on discord).");
		return obsToken;
	}
	
	declare response = Xml.Create(req.Result);
	declare token = response.Root.GetFirstChild("token").TextContents;
	obsToken = token;
	obsTokenAt = TimeLib::GetCurrent();
	return obsToken;
}

Text CheckToken() {
	declare persistent Text obsToken for LocalUser;
	declare persistent Text obsTokenAt for LocalUser = "0";
	// obsTokenAt = "0"; // uncomment this line to reset the token

	// first time updating the token
	if (obsTokenAt == "0") {
		// display "welcoming" message
	}

	// update token if expired
	if (TimeLib::GetDelta(TimeLib::GetCurrent(), obsTokenAt) > C_Token_Ttl) {
		// no need to bind it to obsToken because it already does
		declare _new = UpdateToken();
	}
	
	return obsToken;
}
