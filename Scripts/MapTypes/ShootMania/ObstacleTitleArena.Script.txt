#RequireContext CSmMapType

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
#Include "Libs/smokegun/MapType/UI.Script.txt" as ObsUI

Void Load() {
  log("Loaded.");
}

Void Unload() {
}

Void Init() {
  MapType::SetVersion(3);
  CustomEditAnchorData = True;
}

Void EditCheckpoint(CAnchorData _Checkpoint) {
  log("Edit cp");
  declare Boolean Closed for ManialinkPage;

  declare Boolean Enabled for ManialinkPage;
  declare Boolean IsPortal for ManialinkPage;
  declare Text Order for ManialinkPage;
  declare Integer Weapon for ManialinkPage;
  declare Real Weapon_Gain for ManialinkPage;
  declare Integer Weapon_Amount for ManialinkPage;
  declare Integer Stamina for ManialinkPage;
  declare Real Stamina_Gain for ManialinkPage;
  declare Real Stamina_Amount for ManialinkPage;

  declare metadata Meta_Enabled for _Checkpoint = True;
  declare metadata Meta_IsPortal for _Checkpoint = False;
  declare metadata Meta_Weapon for _Checkpoint = 1;
  declare metadata Meta_Weapon_Gain for _Checkpoint = 1.0;
  declare metadata Meta_Weapon_Amount for _Checkpoint = 4;
  declare metadata Meta_Stamina for _Checkpoint = 0;
  declare metadata Meta_Stamina_Gain for _Checkpoint = 1.0;
  declare metadata Meta_Stamina_Amount for _Checkpoint = 1.0;

  Closed = False;
  Order = TL::ToText(_Checkpoint.Order);
  Enabled = Meta_Enabled;
  IsPortal = Meta_IsPortal;
  Weapon = Meta_Weapon;
  Weapon_Gain = Meta_Weapon_Gain;
  Weapon_Amount = Meta_Weapon_Amount;
  Stamina = Meta_Stamina;
  Stamina_Gain = Meta_Stamina_Gain;
  Stamina_Amount = Meta_Stamina_Amount;

  ManialinkText = """
<manialink version="3" name="Obstacle_EditCheckpoint">
  {{{ObsUI::Get_EditCheckpoint()}}}
  <script><!--
  #Include "TextLib" as TL

  Void UpdateView() {
    declare Boolean Enabled for Page;
    declare Boolean IsPortal for Page;
    declare Text Order for Page;
    declare Integer Weapon for Page;
    declare Real Weapon_Gain for Page;
    declare Integer Weapon_Amount for Page;
    declare Integer Stamina for Page;
    declare Real Stamina_Gain for Page;
    declare Real Stamina_Amount for Page;

    declare Quad_Enabled_Selector <=> (Page.GetFirstChild("Enabled_Selector") as CMlQuad);
    declare Frame_Properties <=> (Page.GetFirstChild("properties") as CMlFrame);
    declare Quad_Type_Selector <=> (Frame_Properties.GetFirstChild("Type_Selector") as CMlQuad);
    declare Entry_Order <=> (Frame_Properties.GetFirstChild("Entry_Order") as CMlEntry);
    declare Quad_Weapon_Selector <=> (Frame_Properties.GetFirstChild("Weapon_Selector") as CMlQuad);
    declare Entry_Weapon_Gain <=> (Frame_Properties.GetFirstChild("Entry_Weapon_Gain") as CMlEntry);
    declare Entry_Weapon_Amount <=> (Frame_Properties.GetFirstChild("Entry_Weapon_Amount") as CMlEntry);
    declare Quad_Stamina_Selector <=> (Frame_Properties.GetFirstChild("Stamina_Selector") as CMlQuad);
    declare Entry_Stamina_Gain <=> (Frame_Properties.GetFirstChild("Entry_Stamina_Gain") as CMlEntry);
    declare Entry_Stamina_Amount <=> (Frame_Properties.GetFirstChild("Entry_Stamina_Amount") as CMlEntry);

    if(Enabled) {
      Quad_Enabled_Selector.RelativePosition_V3.X = -20.;
      Frame_Properties.ZIndex = 1.;
    } else {
      Quad_Enabled_Selector.RelativePosition_V3.X = 0.;
      Frame_Properties.ZIndex = 0.;
    }

    if(!IsPortal)
      Quad_Type_Selector.RelativePosition_V3.X = -20.;
    else
      Quad_Type_Selector.RelativePosition_V3.X = 0.;

    Quad_Weapon_Selector.RelativePosition_V3.X = -40. + Weapon*20.;
    Quad_Stamina_Selector.RelativePosition_V3.X = -30 + Stamina*20.;


    Entry_Order.SetText(Order, False);
    Entry_Weapon_Gain.SetText(TL::ToText(Weapon_Gain*100), False);
    Entry_Weapon_Amount.SetText(TL::ToText(Weapon_Amount), False);
    Entry_Stamina_Gain.SetText(TL::ToText(Stamina_Gain*100), False);
    Entry_Stamina_Amount.SetText(TL::ToText(Stamina_Amount*100), False);
  }

  main() {
    declare Boolean Closed for Page;

    declare Boolean Enabled for Page;
    declare Boolean IsPortal for Page;
    declare Integer Weapon for Page;
    declare Integer Stamina for Page;
    declare Real Stamina_Gain for Page;
    declare Real Stamina_Amount for Page;
    declare NeedUpdate = False;
    UpdateView();

    while(!Closed) {
      yield;

      if(NeedUpdate) {
        UpdateView();
        NeedUpdate = False;
      }

      foreach (Event in PendingEvents) {
        switch (Event.Type){
          case CMlEvent::Type::MouseClick: {
            switch (Event.ControlId) {
              case "Close" : {
                Closed = True;
              }
              case "Save" : {
                Closed = True;
              }
              case "Enable" : {
                Enabled = True;
                NeedUpdate = True;
              }
              case "Disable" : {
                Enabled = False;
                NeedUpdate = True;
              }
              case "Checkpoint" : {
                IsPortal = False;
                NeedUpdate = True;
              }
              case "Portal" : {
                IsPortal = True;
                NeedUpdate = True;
              }
              case "Laser" : {
                Weapon = 0;
                NeedUpdate = True;
              }
              case "Rocket" : {
                Weapon = 1;
                NeedUpdate = True;
              }
              case "Nucleus" : {
                Weapon = 2;
                NeedUpdate = True;
              }
              case "Arrow" : {
                Weapon = 3;
                NeedUpdate = True;
              }
              case "Normal" : {
                Stamina = 0;
                Stamina_Gain = 1.;
                Stamina_Amount = 1.;
                NeedUpdate = True;
              }
              case "Custom" : {
                Stamina = 1;
                NeedUpdate = True;
              }
              case "Unlimited" : {
                Stamina = 2;
                NeedUpdate = True;
              }
            }
          }
        }
      }
    }
  }
  --></script>
</manialink>
  """;

  while(!Closed) {
    yield;
  }

  log("Cp panel closed.");
}

Void Loop() {
  foreach (Event in PendingEvents) {
    switch (Event.Type) {
      case CPluginEvent::Type::MapModified: {
      }
      case CPluginEvent::Type::EditAnchor: {
        if (!AnchorData.existskey(Event.EditedAnchorDataId)) return;
        declare Anchor <=> AnchorData[Event.EditedAnchorDataId];

        switch (Anchor.DefaultTag) {
          case "Goal": {
          }
          case "Checkpoint": {
            EditCheckpoint(Anchor);
          }
          case "Spawn": {
          }
          case "Ammo": {
          }
          case "OffzoneShield": {
          }
          default: {
            return;
          }
        }

        ManialinkText = "";
      }
      case CPluginEvent::Type::StartValidation: {
        TestMapWithMode("Obstacle.Script.txt");
      }
      case CPluginEvent::Type::EditObjectives: {
      }
    }
  }
}

main() {
  Load();
  Init();
  while(True) {
    Loop();
    yield;
  }
  Unload();
}

