#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Editors/Index.Script.txt"		as Editors
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Credits/Index.Script.txt"		as Credits
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Play/Index.Script.txt"		as Play
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Home/Index.Script.txt"		as Home
#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Windows.Script.txt"			as Windows
#Include "Libs/Nadeo_Fork/Common/Core/MenuLayers.Script.txt"					as Layers
#Include "Libs/miltant/ObstacleV2/Styles.Script.txt"							as Styles
#Include "TextLib" 																as TL

Text Build() {
	declare ML_Text =  """
<manialink version="3" name="L_Menus">
	{{{Styles::GetStyleSheet()}}}
	<frame pos="-160 90">
		<label text="" class="lato" pos="72.33 -5.6" textsize="5" id="Label_Home" data-name="home" scriptevents="1"/> <!-- class="LibManialink_TooltipShow"/>
		<frame hidden="1" class="LibManialink_Tooltip" id="Label_Home">
			<label posn="0 0 1" sizen="48 4" halign="center" valign="center2" textsize="1.5" textcolor="aaa" id="Tooltip_Message"/>
			<quad sizen="50 6" halign="center" valign="center" bgcolor="000d" id="Tooltip_BoundingBox" />
		</frame> -->

		<frame id="Frame_Menus">
			<frame pos="97.5 -8.66" data-name="editors">
				<label halign="center" valign="center2" textprefix="$t" text="editors" class="lato" pos="0 -0.2"/>
				<quad halign="center" valign="center2" size="25 7.17" modulatecolor="9b9b9e" image="file://Media/Images/Obstacle/Menu/BNav.png" id="Quad_Trigger" scriptevents="1"/>
			</frame>
			<frame pos="125.83 -8.66" data-name="profile">
				<label halign="center" valign="center2" textprefix="$t" text="profile" class="lato" pos="0 -0.2"/>
				<quad halign="center" valign="center2" size="25 7.17" modulatecolor="9b9b9e" image="file://Media/Images/Obstacle/Menu/BNav.png" id="Quad_Trigger" scriptevents="1"/>
			</frame>
			<frame pos="159.88 -8.29" data-name="play">
				<label halign="center" valign="center2" textprefix="$t" text="play" class="lato" pos="0 -0.2"/>
				<quad halign="center" valign="center2" size="30.09 8.58" modulatecolor="9b9b9e" image="file://Media/Images/Obstacle/Menu/BPlay.png" id="Quad_Trigger" scriptevents="1"/>
			</frame>
			<frame pos="194.17 -8.66" data-name="credits">
				<label halign="center" valign="center2" textprefix="$t" text="credits" class="lato" pos="0 -0.2"/>
				<quad halign="center" valign="center2" size="25 7.17" modulatecolor="9b9b9e" image="file://Media/Images/Obstacle/Menu/BNav.png" id="Quad_Trigger" scriptevents="1"/>
			</frame>
			<frame pos="222.5 -8.66" data-name="quit">
				<label halign="center" valign="center2" textprefix="$t" text="quit" class="lato" pos="0 -0.2"/>
				<quad halign="center" valign="center2" size="25 7.17" modulatecolor="9b9b9e" image="file://Media/Images/Obstacle/Menu/BNav.png" id="Quad_Trigger" scriptevents="1"/>
			</frame>
		</frame>

		<label text="" class="lato" pos="241.67 -5.6" textsize="5"/>
		<label text="1000" pos="249.33 -6.33" textsize="3" class="lato"/>

		<quad pos="3.33 -3.83" z-index="0" size="11.17 8.83" bgcolor="FFFA" image="file://Media/Images/Obstacle/Menu/LogoWeb.png"/>
		<quad size="320 16.67" bgcolor="0009"/>
	</frame>

	<script><![CDATA[
		#Include "MathLib" as ML


		// ---------------------------------- //
		// Tooltip Start (see Scripts/Libs/aessi/library-manialink)
		// ---------------------------------- //
		Void LibManialink_TooltipShow(Text _Id, CMlControl _Control, Text _Text) {
			Page.GetClassChildren("LibManialink_Tooltip", Page.MainFrame, True);
			foreach (Control in Page.GetClassChildren_Result) {
				if (Control.ControlId != _Id) continue;
				
				declare Frame_Tooltip <=> (Control as CMlFrame);
				if (Frame_Tooltip == Null) return;
				declare Tooltip_Message   <=> (Frame_Tooltip.GetFirstChild("Tooltip_Message")   as CMlLabel);
				declare Tooltip_BoundingBox <=> (Frame_Tooltip.GetFirstChild("Tooltip_BoundingBox") as CMlQuad);
				
				declare Vec3 Pos;
				Pos.X = (_Control.AbsolutePosition.X - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
				Pos.Y = (_Control.AbsolutePosition.Y - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
				Pos.Z = (_Control.AbsolutePosition.Z - Frame_Tooltip.AbsolutePosition.Z) + Frame_Tooltip.RelativePosition.Z + 1.;
				
				if (_Control.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
					Pos.X -= (_Control.Size.X / 2.);
				} else if (_Control.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
					Pos.X -= (_Control.Size.X);
				}
				
				if (_Control.VerticalAlign == CMlControl::AlignVertical::Top) {
					Pos.Y -= _Control.Size.Y;
				} else if (_Control.VerticalAlign == CMlControl::AlignVertical::VCenter || _Control.VerticalAlign == CMlControl::AlignVertical::VCenter2) {
					Pos.Y -= _Control.Size.Y / 2.;
				}
				
				if (Tooltip_BoundingBox != Null) {
					if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
						Pos.X += (Tooltip_BoundingBox.Size.X / 2.);
					} else if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
						Pos.X += (Tooltip_BoundingBox.Size.X);
					}
					
					if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::Bottom) {
						Pos.Y -= Tooltip_BoundingBox.Size.Y;
					} else if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::VCenter) {
						Pos.Y -= Tooltip_BoundingBox.Size.Y / 2.;
					}
				}
				
				if (Tooltip_BoundingBox != Null) {
					declare PosMax = <160., 90.>;
					declare PosMin = <-160., -90.>;
					
					if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) {
						PosMax.X = ((160. - Tooltip_BoundingBox.Size.X / 2.) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
						PosMin.X = ((-160. + Tooltip_BoundingBox.Size.X / 2.) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
					} else if (Tooltip_BoundingBox.HorizontalAlign == CMlControl::AlignHorizontal::Right) {
						PosMin.X = ((-160. + Tooltip_BoundingBox.Size.X) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
					} else {
						PosMax.X = ((160. - Tooltip_BoundingBox.Size.X) - Frame_Tooltip.AbsolutePosition.X) + Frame_Tooltip.RelativePosition.X;
					}
					
					if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::VCenter) {
						PosMax.Y = ((90. - Tooltip_BoundingBox.Size.Y / 2.) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
						PosMin.Y = ((-90. + Tooltip_BoundingBox.Size.Y / 2.) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
					} else if (Tooltip_BoundingBox.VerticalAlign == CMlControl::AlignVertical::Bottom) {
						PosMax.Y = ((90. - Tooltip_BoundingBox.Size.Y) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
					} else {
						PosMin.Y = ((-90. + Tooltip_BoundingBox.Size.Y) - Frame_Tooltip.AbsolutePosition.Y) + Frame_Tooltip.RelativePosition.Y;
					}
					
					if (Pos.X > PosMax.X) Pos.X = PosMax.X;
					if (Pos.X < PosMin.X) Pos.X = PosMin.X;
					if (Pos.Y > PosMax.Y) Pos.Y = PosMax.Y;
					if (Pos.Y < PosMin.Y) Pos.Y = PosMin.Y;
				}
					
				Frame_Tooltip.RelativePosition = Pos;
				Frame_Tooltip.Visible = True;
				if (Tooltip_Message != Null) Tooltip_Message.Value = _Text;
			}
		}
		
		Void LibManialink_TooltipHide(Text _Id) {
			Page.GetClassChildren("LibManialink_Tooltip", Page.MainFrame, True);
			foreach (Control in Page.GetClassChildren_Result) {
				if (Control.ControlId != _Id) continue;
				Control.Visible = False;
			}
		}
		
		Void LibManialink_TooltipLoop() {
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlEvent::Type::MouseOver) {
					if (Event.Control.HasClass("LibManialink_TooltipShow")) {
						declare Text LibManialink_TooltipMessage for Event.Control;
						LibManialink_TooltipShow(Event.ControlId, Event.Control, LibManialink_TooltipMessage);
					}
				} else if (Event.Type == CMlEvent::Type::MouseOut) {
					if (Event.Control.HasClass("LibManialink_TooltipShow")) {
						LibManialink_TooltipHide(Event.ControlId);
					}
				}
			}
		}
		
		Void LibManialink_SetTooltipMessage(Text _Id, Text _Message) {
			Page.GetClassChildren("LibManialink_TooltipShow", Page.MainFrame, True);
			foreach (Control in Page.GetClassChildren_Result) {
				if (Control.ControlId != _Id) continue;
				declare Text LibManialink_TooltipMessage for Control;
				LibManialink_TooltipMessage = _Message;
			}
		}
		// ---------------------------------- //
		// Tooltip Stop
		// ---------------------------------- //

		main() {
			LibManialink_SetTooltipMessage("Label_Home", "Home");


			declare Frame_Menus = (Page.GetFirstChild("Frame_Menus") as CMlFrame);
			foreach (MenuContainer in Frame_Menus.Controls) {
				declare Frame_MenuItem = (MenuContainer as CMlFrame);
				declare Quad_Trigger = (Frame_MenuItem.GetFirstChild("Quad_Trigger") as CMlQuad);

				declare Text ItemId for Quad_Trigger;
				if (Frame_MenuItem.DataAttributeExists("name")) {
					ItemId = Frame_MenuItem.DataAttributeGet("name");
				}
			}

			while(True) {
				yield;

				if (!PageIsVisible && PendingEvents.count == 0) continue;

				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlScriptEvent::Type::MouseClick: {
							declare Text ItemId for Event.Control;
							
							if (ItemId != "") {
								SendCustomEvent("menu_item_click", [ItemId]);
							}

							if (Event.Control.DataAttributeExists("name")) {
								SendCustomEvent("menu_item_click", [Event.Control.DataAttributeGet("name")]);
							}
						}

						case CMlScriptEvent::Type::MouseOver: {
							declare Text ItemId for Event.Control;
							
							if (ItemId != "") {
								declare Frame_MenuItem = (Event.Control.Parent as CMlFrame);

								declare Quad_Trigger = (Frame_MenuItem.GetFirstChild("Quad_Trigger") as CMlQuad);
								Quad_Trigger.Scale = 1.1;
								Quad_Trigger.ModulateColor = <75 / 255., 89 / 255., 125 / 255.>; // 4B597D
							}
						}

						case CMlScriptEvent::Type::MouseOut: {
							declare Text ItemId for Event.Control;
							
							if (ItemId != "") {
								declare Frame_MenuItem = (Event.Control.Parent as CMlFrame);

								declare Quad_Trigger = (Frame_MenuItem.GetFirstChild("Quad_Trigger") as CMlQuad);
								Quad_Trigger.Scale = 1.;
								Quad_Trigger.ModulateColor = <155 / 255., 155 / 255., 158 / 255.>;
							}
						}
					}
				}

				LibManialink_TooltipLoop();
			}
		}
	]]></script>
</manialink>
	""";

	return ML_Text;
}

Void Load() {
	declare LayerName = "L_Menu";
	declare Text MLText = Build();

	Layers::Create(LayerName, MLText);
	Layers::Attach(LayerName);

	Home::Load();
	Editors::Load();
	Play::Load();
	Credits::Load();

	Windows::Load(Home::GetName());
}



Void Loop() {
    foreach(Event in PendingEvents) {
        switch(Event.Type) {
            case CManiaAppEvent::EType::LayerCustomEvent: {
                switch(Event.CustomEventType) {
                    case "menu_item_click" : {
                        if (Event.CustomEventData.count > 0) {
                            switch (Event.CustomEventData[0]) {
                                case "home": {
									Windows::Load(Home::GetName());
                                }

                                case "editors": {
									Windows::Load(Editors::GetName());
                                }

                                case "profile": {
                                    Menu_Profile();
                                }

                                case "play": {
									Windows::Load(Play::GetName());
                                }

                                case "credits": {
									Windows::Load(Credits::GetName());
                                }

                                case "quit": {
                                    Menu_Quit();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}