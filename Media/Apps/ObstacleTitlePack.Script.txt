#RequireContext CManiaAppTitle

#Include "TextLib" as TL

#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Index.Script.txt"				as ObstacleController
#Include "Libs/miltant/ObstacleV2/Titlepack/Background/Index.Script.txt"		as Background
#Include "Libs/miltant/ObstacleV2/Titlepack/Store.Script.txt"   				as ObsStore
#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/UI.Script.txt"   			as UI

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/smokegun/Constants.Script.Txt" as Constants

#Const C_UnauthorizedStatusCode 401

#Const C_MP_App_Id			"de1ce3ba8e"
#Const C_MP_Link				"https://prod.live.maniaplanet.com/login/oauth2/authorize?response_type=code&"
#Const C_MP_Redirect		"https://obstacle.titlepack.io/give_token"
//#Const C_MP_Redirect		"http://192.168.1.30:8000/give_token"
//#Const C_MP_Redirect		"http://192.168.1.30:3001/player/give_token"
// #Const C_MP_Redirect "https://api.obstacle.ovh/player/give_token"
// #Const C_MP_Redirect "http://localhost:3000/player/give_token"

#Struct K_Banishment {
    Integer id;
    Text date_ban;
    Integer duration;
    Text reason;
    Text banished_by;
    Boolean was_reprieved;
    Boolean is_current;
}

#Struct K_UpdatePlayerBody {
	Text login;
	Text name;
	Text zone_path;	
}

#Struct K_UpdatePlayerResponse {
	Text login;
    Boolean banned;
    K_Banishment current_ban;
}

#Struct K_GetTokenBody {
	Text login;
	Text state;
	Text redirect_uri;
}

#Struct K_GetTokenResponse {
	Text token;
}

declare Boolean G_Errored;

declare K_Banishment G_CurrentBan;

Void LogMessage(Text _Msg) {
	log("[Obs Auth] " ^ _Msg);
}

Void LogError(Text _Msg) {
	LogMessage("ERROR: " ^_Msg);
}

Text Private_UpdateToken() {
	LogMessage("Updating token...");

	declare persistent obsToken for LocalUser = "";

	declare login = LocalUser.Login;
	declare Text state = login ^ Now;
	declare body = K_GetTokenBody {
		login = login,
		state = state,
		redirect_uri = C_MP_Redirect
	};
	
	declare req = Http.CreatePost(
		Constants::C_HostUrl ^ "player/get_token",
		body.tojson(),
		"Content-Type: application/json\nAccept: application/json");
		
	declare Link = C_MP_Link
		^ "client_id=" ^ C_MP_App_Id
		^ "&redirect_uri=" ^ C_MP_Redirect
		^ "&state=" ^ state
		^ "&scope=basic";
	OpenLink(Link, CManiaApp::ELinkType::ExternalBrowser);


	declare PendingDialog = UI::NewDialog("Welcome to Obstacle!",
		UI::K_Message {
			Label = "Please follow the instructions in your browser,\n"
			^ "or scan the  QR code bellow:"
		}, []
	);
	UI::Add(UI::K_Image {
		URL = "http://api.qrserver.com/v1/create-qr-code/?size=300x300&data=" ^ TL::URLEncode(Link) ^ "&.png",
		PlaceHolder = "(Click to load...)",
		Width = 50,
		Height = 50
	}, PendingDialog);

	while (!req.IsCompleted) {
		UI::Prompt(PendingDialog, True);
		yield;
	}
	UI::CloseDialog(PendingDialog);


	if (req.StatusCode != 200) {
		UI::Notice_Async("Error: " ^ req.StatusCode, "An error occurred.\nIf it persists please contact the Obstacle developers\n(i.e. @ahmadbky or @MiLTanT on discord).");
		// UI.SendChat("An error occurred. Please contact the developers (e.g. @ahmadbky or @MiLTanT on discord).");
		G_Errored = True;
		return obsToken;
	}
	
	declare K_GetTokenResponse response;
	response.fromjson(req.Result);
	obsToken = response.token;

	LogMessage("Token updated!");

	return obsToken;
}

K_UpdatePlayerResponse Private_UpdatePlayer(Text _Secret) {
	declare body = K_UpdatePlayerBody {
		login = LocalUser.Login,
		name = LocalUser.Name,
		zone_path = LocalUser.ZonePath
	};

	log(Constants::C_HostUrl);

	declare req = Http.CreatePost(
		Constants::C_HostUrl ^ "player/update",
		body.tojson(),
		"Content-Type: application/json\nAccept: application/json\nPlayerLogin: " ^ LocalUser.Login
		^ "\nAuthorization: " ^ _Secret ^ "\n");
	
	wait (req.IsCompleted);

	log("Update info: " ^ req.StatusCode ^ " " ^ req.Result);

	if (req.StatusCode == C_UnauthorizedStatusCode && !G_Errored) {
		// updating token
		return Private_UpdatePlayer(Private_UpdateToken());
	}

	declare K_UpdatePlayerResponse res;
	declare err = res.fromjson(req.Result);

	log(req.Result);

	if (err) {
		log("conversion not ok");
		// return Null;
	}

	if (res.banned) G_CurrentBan = res.current_ban;
	return res;
}

Boolean DetectOffline() {
	if (TL::Split("|", LocalUser.ZonePath).count == 0)
		return True;
	
	declare Req = Http.CreateGet("http://clients3.google.com/generate_204", False);
	declare Timestamp = Now;

	while (!Req.IsCompleted) {
		if (Now > Timestamp + 5000)
			return True;

		yield;
	}

	return Req.StatusCode != 204 && Req.StatusCode != 200;
}

Void Greet() {
	G_Errored = False;

	declare persistent obsToken for LocalUser = "";

	if (obsToken == "") {
		declare WelcomeDialog = UI::NewDialog("Welcome to Obstacle!",
			UI::K_Message {
				Label = "Before we race on, let's take a quick pit stop: We're\n"
					^ "upgrading our system to include browser-based\n"
					^ "authentication via Maniaplanet services.\n\n"
					^ "This quick step ensures that only you can set\n"
					^ "records under your name.\n\n"
					^ "We appreciate your understanding and support.\n"
					^ "Let's race on!"
			}, [
				UI::K_Button {
					ControlId = "OK_Button",
					Label = "Gear Up!",
					Default = True
				}
			]
		);
		
		declare MoveOn = False;

		while (!MoveOn) {
			declare DialogState = UI::Prompt(WelcomeDialog, True);
			MoveOn = DialogState.Over && DialogState.Success;
			
			yield;
		}
	}

	declare CurrentAccount = Private_UpdatePlayer(obsToken);

	if (CurrentAccount.banned) {
		declare BanDialog = UI::NewDialog("Account Banned",
			UI::K_Message {
				Label = "We're sorry, but it appears that your account\n"
					^ "has been banned from Obstacle.\n\n"
					^ "This may be due to violation of our community\n"
					^ "standards, like cheating or offensive behavior.\n\n"
					^ "If you believe this is a mistake or if you'd like\n"
					^ "to appeal the decision, please contact our\n"
					^ "support team on Discord.\n"
			}, [
				UI::K_Button {
					ControlId = "OK_Button",
					Label = "Understood",
					Default = True
				}
			]
		);

		declare MoveOn = False;

		while (!MoveOn) {
			declare DialogState = UI::Prompt(BanDialog, True);
			MoveOn = DialogState.Over;
			yield;
		}

		Menu_Quit();
		return;
	}
}

main() {
	if (!DetectOffline())
		Greet();
	
	ObsStore::Load();
	ObstacleController::Load();
	Background::Load();


	// declare CVideo[Text] ObsStore_Previews for LocalUser;
	// ObsStore_Previews.clear();

	while(True) {
		yield;
		
		UI::Loop();
		ObsStore::Loop();
		ObstacleController::Loop();
	}
}