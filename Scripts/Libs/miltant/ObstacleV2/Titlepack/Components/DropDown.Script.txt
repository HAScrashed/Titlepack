#Include "Libs/miltant/ObstacleV2/TitlePack/Components/Index.Script.txt" as Lib

Text BuildML(Text[Text] _Values, Text _Default, Lib::K_Options _Options) {
    declare List = "";
    declare I = 0;
    foreach (K => V in _Values) {
        List ^= """<label textprefix=" " text="{{{V}}}" id="Component__DropDown_Option" scriptevents="1" data-key="{{{K}}}" pos="0 {{{-I * 6 - 3}}}" size="{{{_Options.Width}}} 6" valign="center2"/>""";
        I += 1;
    }

    declare Default = "(choose)";
    if (_Values.existskey(_Default)) {
        Default = _Values[_Default];
    }

    declare ML_Text = """
    <frame {{{Lib::BuildOptions(_Options, False)}}}>
        <label pos="{{{-_Options.Width / 2 - _Options.Height / 2}}} {{{-_Options.Height / 2}}}" size="{{{_Options.Width - _Options.Height}}} {{{_Options.Height}}}" text="{{{Default}}}" halign="center" valign="center2" textcolor="000" id="Component__DropDown_Text"/>
        <quad pos="{{{-_Options.Height + 0.5}}} -.5" size="{{{_Options.Height - 1}}} {{{_Options.Height - 1}}}" bgcolor="000"/>
        <quad pos="{{{-_Options.Width}}}" size="{{{_Options.Width}}} {{{_Options.Height}}}" bgcolor="FFFA" scriptevents="1" id="Component__DropDown_Trigger"/>

        <frame id="Component__DropDown_List" hidden="1" pos="{{{-_Options.Width}}} {{{-_Options.Height}}}">
            {{{List}}}
            <quad size="{{{_Options.Width}}} {{{6 * _Values.count}}}" bgcolor="FFFA" id="Component__DropDown_Background"/>
        </frame>
    </frame>
    """;

    return ML_Text;
}

Text BuildInit(Text[Text] _Values, Lib::K_Options _Options) {
    declare Init = """//!
        declare Boolean Component__DropDown_LastMDown = True;
    """;

    return Init;
}

Text BuildMainLoop(Text[Text] _Values, Lib::K_Options _Options) {
    declare MainLoop = """//!
    foreach(Event in PendingEvents) {
        if (Event.Type == CMlEvent::Type::MouseClick) {
            switch (Event.ControlId) {
                case "Component__DropDown_Trigger": {
                    declare Component <=> (Event.Control.Parent as CMlFrame);
                    declare List <=> (Component.GetFirstChild("Component__DropDown_List") as CMlFrame);

                    if (List.Visible) {
                        List.Hide();
                    } else {
                        declare Component__DropDown_Trigger <=> List.GetFirstChild("Component__DropDown_Trigger");
                        declare Component__DropDown_Background <=> List.GetFirstChild("Component__DropDown_Background");
                        
                        if (Component.AbsolutePosition_V3.Y > 0) {
                            List.RelativePosition_V3.Y = -Component__DropDown_Trigger.Size.Y;
                            List.VerticalAlign = CMlControl::AlignVertical::Top;
                        } else {
                            List.RelativePosition_V3.Y = Component__DropDown_Background.Size.Y;
                            List.VerticalAlign = CMlControl::AlignVertical::Bottom;
                        }

                        List.Show();
                        Component__DropDown_LastMDown = True;
                    }
                }
                case "Component__DropDown_Option": {
                    if (Event.Control.DataAttributeExists("key")) {
                        declare Option <=> (Event.Control as CMlLabel);
                        declare Component <=> (Option.Parent.Parent as CMlFrame);
                        declare Label <=> (Component.GetFirstChild("Component__DropDown_Text") as CMlLabel);

                        declare Key = Option.DataAttributeGet("key");
                        declare ComponentName = Component.DataAttributeGet("name");

                        Label.SetText(Option.Value);

                        SendCustomEvent("onChange__" ^ ComponentName, [Key]);
                    }
                }
            }
        }
    }
    if (Input.MouseLeftButton && !Component__DropDown_LastMDown) {
        declare Component <=> (Page.GetFirstChild("Component__DropDown_List") as CMlFrame);
        Component.Hide();
        Component__DropDown_LastMDown = True;
    } else {
        Component__DropDown_LastMDown = Input.MouseLeftButton;
    }
    """;

    return MainLoop;
}

Lib::K_Component Build(Text[Text] _Values, Text _Default, Lib::K_Options _Options) {
    return Lib::K_Component {
        XML = BuildML(_Values, _Default, _Options),
        Init = BuildInit(_Values, _Options),
        MainLoop = BuildMainLoop(_Values, _Options)
    };
}