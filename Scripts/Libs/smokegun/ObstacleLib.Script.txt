/*********************************************
 * Obstacle Library                           *
 * Author:  smokegun                          *
 *                                            *
 * Obstacle functions.                        *
 *********************************************/

#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/miltant/Nadeo_Fork/ShootMania/Map.Script.txt" as Map
#Include "Libs/miltant/Nadeo_Fork/Ladder.Script.txt" as Ladder
#Include "Libs/miltant/Nadeo_Fork/ShootMania/SM3.Script.txt" as SM
#Include "Libs/miltant/Nadeo_Fork/Message.Script.txt" as Message
#Include "Libs/miltant/Nadeo_Fork/Log.Script.txt" as Log
#Include "Libs/miltant/Nadeo_Fork/TabsServer.Script.txt" as Tabs

#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/miltant/Randomizer.Script.txt" as RNG
#Include "Libs/smokegun/Weapons.Script.txt" as Weapons
#Include "Libs/smokegun/ObstacleRecords.Script.txt" as API

#Include "Libs/smokegun/CPTimes.Script.txt" as CPTimes

#Include "Libs/smokegun/UI/TimeDiff.Script.txt" as TimeDiff
#Include "Libs/smokegun/Settings.Script.txt" as Settings
#Include "Libs/smokegun/Score.Script.txt" as ObsScores


/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2023-06-30"
#Const  ScriptName  "ObstacleLib.Script.txt"


/*********************************************
  GLOBALES
 *********************************************/

declare Ident[] ActionsId;

// Map
declare Integer G_Mode;

declare Integer G_CheckpointsTotal;
declare Ident[] G_SpawnLandmarks;
declare Ident[] G_GoalLandmarks;

declare Ident G_Editor_WayPointSpawn;

declare Boolean G_IsRandomizerMap;
declare Integer[] G_RandomizerMap_TargetNumbers;
declare Ident[][Integer] G_RandomizerMap_Landmarks;


/*********************************************
  FUNCTIONS
 *********************************************/

Void SetMode(Integer _Mode) {
    G_Mode = _Mode;
}

Integer GetMode() {
    return G_Mode;
}

Boolean IsPvPWeaponsMap() {
    declare metadata Meta_PvP_Weapons for Map = False;
    return Meta_PvP_Weapons;
}
Boolean IsPvPCollisionsMap() {
    declare metadata Meta_PvP_Collisions for Map = False;
    return Meta_PvP_Collisions;
}
Boolean IsSameWallJumpMap() {
    declare metadata Meta_SameWallJump for Map = True;
    return Meta_SameWallJump;
}
Integer ForceFastRSMap() {
    declare metadata Integer Meta_ForceFastRS for Map = 0;
    return Meta_ForceFastRS;
}
Integer InvulnerabilityDuration() {
    declare metadata Integer Meta_Invulnerability for Map = 2000;
    return Meta_Invulnerability;
}

Integer GetCheckpointsTotal() {
    return G_CheckpointsTotal;
}
Ident[] GetSpawnLandmarks() {
    return G_SpawnLandmarks;
}
Ident[] GetGoalLandmarks() {
    return G_GoalLandmarks;
}

Boolean IsRandomizerMap() {
    return G_IsRandomizerMap;
}
Integer[] GetRNGTargetNumbers() {
    return G_RandomizerMap_TargetNumbers;
}
Ident[][Integer] GetRNGLandmarks() {
    return G_RandomizerMap_Landmarks;
}

Void LoadActions() {
    ActionList_Begin();

    //ActionsId.add(ActionList_Add("Quake_RL.Action.Gbx"));
    //ActionsId.add(ActionList_Add("Waterbomb.Action.Gbx"));
    //ActionsId.add(ActionList_Add("Hoverrocket.Action.Gbx"));

    ActionList_End();
}


/**
 * Initialize a player
 *
 */
Void NewPlayer(CSmPlayer _Player)
{
    Player::InitPlayer(_Player);

    if (ActionsId.count > 0) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_A, ActionsId[0]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_A, CSmMode::EActionInput::Weapon);
    }
    if (ActionsId.count > 1) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_B, ActionsId[1]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::Consumable2);
    }
    if (ActionsId.count > 2) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_C, ActionsId[2]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_C, CSmMode::EActionInput::Activable1);
    }
    if (ActionsId.count > 3) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_D, ActionsId[3]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_D, CSmMode::EActionInput::Activable2);
    }
    if (ActionsId.count > 4) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_E, ActionsId[4]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_E, CSmMode::EActionInput::Activable3);
    }
    if (ActionsId.count > 5) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_F, ActionsId[5]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_F, CSmMode::EActionInput::Activable4);
    }
    if (ActionsId.count > 6) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_G, ActionsId[6]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_G, CSmMode::EActionInput::Consumable1);
    }
    if (ActionsId.count > 7) {
        ActionLoad(_Player, CSmMode::EActionSlot::Slot_H, ActionsId[7]);
        ActionBind(_Player, CSmMode::EActionSlot::Slot_H, CSmMode::EActionInput::Movement);
    }

    Ladder::AddPlayer(_Player.Score);

    declare UI <=> UIManager.GetUI(_Player);
    if (UI == Null) return;
    Tabs::UseTabs(UI, "ScoresTab");
    if (Hud == Null || Hud.ScoresTable == Null) return;
    Hud.ScoresTable.SetColumnValue (_Player.Score, "BestTime", "--:--:--");
    Hud.ScoresTable.SetColumnValue (_Player.Score, "RS", 0);
}

Void UpdatePlayersSkin(Ident _SkinId) {
    foreach (Player in Players) {
        if (Settings::GetForceInvisibleSkin() && Player.ForceModelId != _SkinId) {
            Player.ForceModelId = _SkinId;
        }

        if (!Settings::GetForceInvisibleSkin() && Player.ForceModelId != NullId) {
            Player.ForceModelId = NullId;
        }

        if (Player.IsHighlighted != Settings::GetEnablePlayerHighlight()) {
            Player.IsHighlighted = Settings::GetEnablePlayerHighlight();
            Player.HasShield = Settings::GetEnablePlayerHighlight();
        }
    }
}


/**
 * Initialize the map (count cp, find spawn, send api request)
 *
 * Returns: boolean is the map valid
 */
Boolean PrepareMap(Text ModeName) {
    G_CheckpointsTotal = 0;
    G_IsRandomizerMap = False;
    G_RandomizerMap_Landmarks.clear();

    foreach (Landmark in MapLandmarks) {
        if (Tools::IsCheckpoint(Landmark) && Landmark.Order < 0) {
            if (!G_RandomizerMap_Landmarks.existskey(Landmark.Order))
                G_RandomizerMap_Landmarks[Landmark.Order] = [];
            
            G_RandomizerMap_Landmarks[Landmark.Order].add(Landmark.Id);
            G_IsRandomizerMap = True;
        }

        if (!G_IsRandomizerMap && (Tools::IsACandidateGoal(Landmark) || Tools::IsACandidateSpawn(Landmark))) {
            declare metadata Meta_Randomize for Landmark = False;
            if (Meta_Randomize) G_IsRandomizerMap = True;
        }
    }

    // We save checkpoints to CheckpointOrders to count multiple checkpoints with the same order once
    declare Integer[Integer] CheckpointOrders = [];
   
    foreach (Landmark in MapLandmarks) {
        if (Landmark.Gauge != Null)
            Landmark.Gauge.ValueReal = 1.0;

        if (Tools::IsCheckpoint(Landmark)) {
            if (!CheckpointOrders.existskey(Landmark.Order)) {
                G_CheckpointsTotal += 1;
                CheckpointOrders[Landmark.Order] = 0;
            }
            else if (Landmark.Order == 0) {
                G_CheckpointsTotal += 1;
            }

            CheckpointOrders[Landmark.Order] += 1;
        }
    }

    if (G_IsRandomizerMap) {
        G_RandomizerMap_TargetNumbers = Tools::FindMissingNumbers(CheckpointOrders);
    }

    // Publish the numbers of checkpoint for the UI
    declare netwrite Integer Net_CheckpointsTotal for Teams[0];
    Net_CheckpointsTotal = G_CheckpointsTotal;

    CPTimes::StartMap(G_CheckpointsTotal);
    ObsScores::SetCheckpointTotal(G_CheckpointsTotal);
    ObsScores::OnMapBegin();

    // Search start spawns
    G_SpawnLandmarks.clear();
    foreach (SpawnLandmark in MapLandmarks_PlayerSpawn) {
        if (Tools::IsACandidateSpawn(SpawnLandmark)) {
            RNG::SetDefaultSpawn(SpawnLandmark.Id);
            G_SpawnLandmarks.add(SpawnLandmark.Id);
        }
    }

    if (G_SpawnLandmarks.count == 0) {
        Log::Log("ERROR: No Start Spawn on this Map!");
        UIManager.UIAll.SendChat("$f00ERROR: No Start Spawn on this Map!");
        return False;
    }

    // Search end goals
    G_GoalLandmarks.clear();
    foreach (Landmark in MapLandmarks) {
        if (Tools::IsACandidateGoal(Landmark)) {
            G_GoalLandmarks.add(Landmark.Id);
        }
    }

    declare MapVersion = Map::GetMapTypeVersion();
    if (MapVersion < 2) {
        UIManager.UIAll.SendChat("$f00WARNING: This is an old map, please disable fast respawn in the settings if some cps are made with poles!");
    }

    if (Settings::GetEnableRecords()) {
        API::ReplaceOrCreateMap(G_CheckpointsTotal);
    }

    return True;
}

/////////////////////////////////////////////////////////////////
///////////////////// XMLRPC CALLBACKS  /////////////////////////
/////////////////////////////////////////////////////////////////

/**
 * Send a xmlrpc callback with a predefined payload
 *
 */
Void Private_SendXmlRpcCallback(Text _CallbackName, CSmPlayer _Player, Integer _RunTime, Ident _CheckpointId) {
    if (_Player == Null || _Player.IsFakePlayer || _Player.Score == Null || _CallbackName == "" || _RunTime <= 0) return;

    declare LastCPTimes = Player::getLastCPTimes(_Player);

    declare JSON =
        """{
            "Player":
            {
                "Name": "{{{Json::EscapeText(_Player.User.Name)}}}",
                "Login": "{{{Json::EscapeText(_Player.User.Login)}}}"
            },
            "Run":
            {
                "Time": {{{_RunTime}}},
                "RespawnCount": {{{Player::getRespawnCount(_Player)}}},
                "CheckpointIndex": {{{LastCPTimes.count - 1}}},
                "CheckpointId": "{{{_CheckpointId}}}"
            }
        }""";

    XmlRpc.SendCallback(_CallbackName, JSON);
}

/**
 * Side effects when a player finishes a run
 *   - XmlRpc for compatibility with controllers such as ManiaControl
 *   - Api to save records online
 *
 */
Void Private_SendFinishedRun(CSmPlayer _Player, Integer _Run, Ident _GoalId) {
    Private_SendXmlRpcCallback("OnFinish", _Player, _Run, _GoalId);
    if (Settings::GetEnableRecords()) {
        declare netwrite _LastRun for UIManager.GetUI(_Player) = -1;
        declare netwrite _RespawnCount for UIManager.GetUI(_Player) = 0;
        declare netwrite Integer[] _LastCPTimes for UIManager.GetUI(_Player);

        _LastRun = Player::getLastRun(_Player);
        _RespawnCount = Player::getRespawnCount(_Player);

        declare lastCpTime = 0;
        _LastCPTimes.clear();
        foreach (time in Player::getLastCPTimes(_Player)) {
            _LastCPTimes.add(time - lastCpTime);
            lastCpTime = time;
        }
    }
}

/////////////////////////////////////////////////////////////////
///////////////////// SCORESTABLE SYNC  /////////////////////////
/////////////////////////////////////////////////////////////////

/**
 * Update the column best time
 *
 * Arguments: CSmPlayer _Player player to update
 */
Void Private_UpdatePlayerBestTime(CSmPlayer _Player) {
    if (Hud == Null || Hud.ScoresTable == Null) return;

    declare cpProgress = Player::getCpProgress(_Player);
    declare usedJump = Player::usedJump(_Player);
    declare bestRun = Player::getBestRun(_Player);
    declare newBestTime = "--:--.--";

    if (bestRun > 0) {
        newBestTime = TL::TimeToText(bestRun, True);
    } else {
        newBestTime = "CP"^cpProgress;

        if (usedJump) {
            newBestTime = "$f33"^newBestTime^"$z";
        }
    }

    Hud.ScoresTable.SetColumnValue (_Player.Score, "BestTime", newBestTime);
}

/**
 * Update the column respawn counter
 *
 * Arguments: CSmPlayer _Player player to update
 */
Void Private_UpdatePlayerRsCounter(CSmPlayer _Player) {
    if (Hud == Null || Hud.ScoresTable == Null) return;
    Hud.ScoresTable.SetColumnValue (_Player.Score, "RS", Player::getRespawnCount(_Player));
}

/////////////////////////////////////////////////////////////////
/////////////////////   RESPAWN LOGIC   /////////////////////////
/////////////////////////////////////////////////////////////////

Void Private_RestartEffect(CSmPlayer _Player, Ident _SpawnId) {
    declare MapVersion = Map::GetMapTypeVersion();
    declare Spawn <=> MapLandmarks[_SpawnId];

    if (MapVersion <= 2) {
        declare WeaponType = Tools::GetWeaponTypeFromSpawn(Spawn);
        Weapons::ApplyWeaponForCheckpointType(_Player, WeaponType);
    } else {
        Weapons::ApplyEffects(_Player, Spawn);
    }

    declare SpawnPosition for _Player = Spawn.Position;
}

/**
 * Logic to respawn a player when they already have checkpoints and don't want to restart from the beginning
 *
 * Arguments: CSmPlayer _Player         Player to respawn
 *            Integer   _Delay          Activation delay for SM::Spawn
 *            Ident     _LastCheckpoint Id of the last checkpoint
 *            Ident     _CPSpawn        Id of the spawn if fast rs isnt possible
 *            Boolean   _Legit          False when jumping to a cp
 */
Void Private_CpRestart(CSmPlayer _Player, Integer _Delay, Ident _LastCheckpoint, Ident _CPSpawn, Boolean _Legit) {
    Player::incrementRespawnCount(_Player);

    declare Checkpoint <=> MapLandmarks[_LastCheckpoint];
    declare CanFastRespawn = Settings::GetFastRespawn();

    if (_Legit) {
        switch (ForceFastRSMap()) {
            case 0: {
                CanFastRespawn = (_CPSpawn != NullId);
            }
            case 2: {
                CanFastRespawn = False;
            }
        }
    }

    // Check if fast respawn is possible
    if (CanFastRespawn) {
        declare metadata DefaultTag for  Checkpoint = "";
        if (DefaultTag != "Checkpoint" && DefaultTag != "" || Tools::IsPortal(Checkpoint))
            CanFastRespawn = False;
    }

    // Respawn player
    if (_Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && CanFastRespawn)
        RespawnPlayer(_Player, Checkpoint.Waypoint);
    else if (_CPSpawn != NullId)
        SM::SpawnNoLadder(_Player, 0, MapLandmarks_PlayerSpawn[_CPSpawn].PlayerSpawn, Now + _Delay);
    else return;

    declare metadata Meta_EmptyWeapon for Checkpoint = False;
    if (Meta_EmptyWeapon) {
        Weapons::EmptyPlayerAmmo(_Player);
    }

    XmlRpc.SendCallback("OnRespawn", _Player.User.Login);
}

/**
 * Shorthand for the function above without the increment parameter
 *
 * Arguments: CSmPlayer _Player         Player to respawn
 *            Integer   _Delay          Activation delay for SM::Spawn
 *            Ident     _LastCheckpoint Id of the last checkpoint
 *            Ident     _CPSpawn        Id of the spawn if fast rs isnt possible
 */
Void Private_CpRestart( CSmPlayer _Player, Integer _Delay, Ident _LastCheckpointId, Ident _CPSpawnId) {
    Private_CpRestart(_Player, _Delay, _LastCheckpointId, _CPSpawnId, True);
}

/**
 * Logic to spawn a player to the beginning of the map
 *
 * Arguments: CSmPlayer _Player Player to respawn
 *            Integer   _Delay  Activation delay for SM::Spawn
 */
Void Private_FullRestart(CSmPlayer _Player, Integer _Delay) {
    declare Spawn <=> MapLandmarks_PlayerSpawn[RNG::GetEnabledSpawn()];

    declare IsFirstRespawn = Player::getStartTime(_Player) <= 0;

    SM::SpawnNoLadder(_Player, 0, Spawn.PlayerSpawn, Now + _Delay);

    Private_RestartEffect(_Player, Spawn.Id);

    // Update values

    if (G_Mode != Constants::C_Mode_Sprint) {
        Player::setUsedJump(_Player, False);
        Player::setUsedRSBug(_Player, False);
        Player::setUsedAltGlitch(_Player, False);
        Player::setUsedPvPWeapons(_Player, UsePvPWeapons);
        Player::setUsedPvPCollisions(_Player, UsePvPCollisions);
        Player::setUsedSpeedHack(_Player, False);
        
        Player::setLastCheckpoint(_Player, NullId);
        Player::setCpProgress(_Player, 0);
        Player::setRespawnCount(_Player, 0);
        Player::setStartTime(_Player, _Player.StartTime);
    }

    if (G_Mode == Constants::C_Mode_Sprint && IsFirstRespawn) {
        Player::setStartTime(_Player, _Player.StartTime);
    }
    
    declare netwrite Net_NewSpawn for _Player = 0;
    Net_NewSpawn = Now;


    Player::setLastCheckpoint(_Player, NullId);
    Player::clearLastCPTimes(_Player);

    // XmlRpc callback
    XmlRpc.SendCallback("OnRestart", _Player.User.Login);
}

/**
 * Respawn a player to the last cp or to the beginning
 *
 * Arguments: CSmPlayer _Player       Player to respawn
 *            Boolean   _forceRestart Force spawn to the beginning of the map
 */
Void ObsRespawnPlayer(CSmPlayer _Player, Boolean _forceRestart) {
    if (_Player.RequestsSpectate)
        return;

    declare shouldRestart = Player::wantsRestart(_Player, _forceRestart);

    if (shouldRestart) {
        declare Editor_WayPointSpawn_Flag for This = 0;
        Editor_WayPointSpawn_Flag = 0;
    }

    if (!Player::isInitialized(_Player)) {
        NewPlayer(_Player);
    }

    declare LastCP = Player::getV2PortalCache(_Player);
    if (LastCP == NullId)
        LastCP = Player::getLastCheckpoint(_Player);

    declare Delay = -1;
    declare CPSpawnId = NullId;
    
    if (LastCP != NullId)
        CPSpawnId = Tools::GetClosestSpawn(LastCP, Player::getCpProgress(_Player));
    if (StartTime > Now + Delay)
        Delay = StartTime - Now;

    // Check if there is a cp spawn, if not we full restart
    if ((CPSpawnId != NullId || G_Editor_WayPointSpawn != NullId) && LastCP != NullId && !shouldRestart)
        Private_CpRestart(_Player, Delay, LastCP, CPSpawnId);
    else if(Player::usedJump(_Player) && !shouldRestart)
        Private_CpRestart(_Player, Delay, LastCP, CPSpawnId, False);
    else
        Private_FullRestart(_Player, Delay);

    /////////////////////////////////
    // Common behaviour after spawns

    if (G_Mode == Constants::C_Mode_Obstacle) {
       ObsScores::OnRespawnPlayer(_Player);
    }


    Private_UpdatePlayerBestTime(_Player); // update rs count

    if (Player::getBestRun(_Player) < 0) {
        Private_UpdatePlayerRsCounter(_Player);
    }

    Player::clearBuffTimes(_Player);

    if (Settings::GetFullAmmoSpawn()) {
        Weapons::FillUpPlayerAmmo(_Player);
    }
}

/**
 * Shorthand for the function above without the force restart parameter
 *
 * Arguments: CSmPlayer _Player       Player to respawn
 */
Void ObsRespawnPlayer(CSmPlayer _Player) {
    ObsRespawnPlayer(_Player, False);
}

/////////////////////////////////////////////////////////////////
///////////////////// CHECKPOINTS LOGIC /////////////////////////
/////////////////////////////////////////////////////////////////

/**
 * Logic to teleport a player using portal
 *
 * Arguments: CSmPlayer _Player Player to teleport
 *            Ident     _Portal Id of the portal landmark
 */
Void Private_UsePortal(CSmPlayer _Player, Ident _Portal) {
    declare SpawnId = NullId;

    SpawnId = Tools::GetClosestSpawn(_Portal, Player::getCpProgress(_Player));

    // Quit if there is no exit for the portal
    if (!MapLandmarks_PlayerSpawn.existskey(SpawnId))
        return;

    SM::SpawnNoLadder(_Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, Now);

    // Send message
    Message::SendBigMessage(_Player, _("Portal!"), 2500, 0);
}

/* TODO: Make a separate checkpoint lib ?
 *
 * Effects:
 *  - Ammo:
 *   - ammo type
 *   - ammo gain (0% - 1000%)
 *   - ammo count
 *
 *  - Stamina:
 *   - Stamina amount (0% - 300%)
 *   - Stamina gain (0% - 100%)
 */
Void Private_CheckpointEffect(CSmPlayer _Player, Ident _CheckpointId) {
    declare MapVersion = Map::GetMapTypeVersion();
    declare Checkpoint <=> MapLandmarks[_CheckpointId];
    declare CheckpointName = Checkpoint.Tag;

    if (MapVersion <= 2) {
        if (TL::Length(CheckpointName) > 10) {
            declare CheckPointType = TL::ToInteger(TL::SubString(CheckpointName, 14, 1));
            if (CheckPointType == 3) { // CheckpointType3
                Private_UsePortal(_Player, _CheckpointId);
            } else { // CheckpointType1, CheckpointType2
                Weapons::ApplyWeaponForCheckpointType(_Player, CheckPointType);
            }
        } else if (CheckpointName == "Portal") { // Portal
            Private_UsePortal(_Player, _CheckpointId);
        } else { // ?
            Weapons::ApplyWeaponForCheckpointType(_Player, 0);
        }
    } else { // contemporary customizable effects
        Weapons::ApplyEffects(_Player, Checkpoint);

        if (Tools::IsPortal(Checkpoint))
            Private_UsePortal(_Player, _CheckpointId);
    }
}


Boolean JumpToCheckpointIdent_ByPassSpawn(CSmPlayer _Player, Ident _Target) {
    G_Editor_WayPointSpawn = _Target;

    Player::setUsedJump(_Player, True);
    Player::setLastCheckpoint(_Player, _Target);

    Private_CpRestart(_Player, 3500, _Target, NullId, False);

    // TODO: Below is copy pasted in common behaviour after respawn
    Player::clearBuffTimes(_Player);

    if (Settings::GetFullAmmoSpawn()) {
        Weapons::FillUpPlayerAmmo(_Player);
    }
    return True;
}


Boolean JumpToCheckpointIdent(CSmPlayer _Player, Ident _Target) {
    Player::setUsedJump(_Player, True);
    declare Spawn = Tools::GetClosestSpawn(_Target, Player::getCpProgress(_Player));

    declare LastCP = Player::getV2PortalCache(_Player);
    if (LastCP == NullId)
        LastCP = Player::getLastCheckpoint(_Player);

    if (_Target == LastCP) {
        Private_CpRestart(_Player, 3500, _Target, Spawn, False);
        return True;
    }

    Player::clearLastCPTimes(_Player);
    Player::setLastCheckpoint(_Player, _Target);
    Private_CpRestart(_Player, 3500, _Target, Spawn, False);
    Private_CheckpointEffect(_Player, _Target);

    if (RNG::GetOrder(MapLandmarks_Sector[_Target]) != 0)
        Player::setCpProgress(_Player, RNG::GetOrder(MapLandmarks_Sector[_Target]));
    else
        Player::setCpProgress(_Player, Player::getLastCPTimes(_Player).count + 1);

    // TODO: Below is copy pasted in common behaviour after respawn
    Player::clearBuffTimes(_Player);

    if (Settings::GetFullAmmoSpawn()) {
        Weapons::FillUpPlayerAmmo(_Player);
    }
    return True;
}

/**
 * Jump a player to the desired checkpoint
 *
 * Arguments: CSmPlayer _Player Player to teleport
 *            Integer   _Target Order of the checkpoint to teleport to
 */

Void JumpToCheckpoint(CSmPlayer _Player, Integer _Target) {
    declare UI <=> UIManager.GetUI(_Player);
    if (_Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned || UI == Null)
        return;

    if (!Settings::GetAllowJump()) {
        UI.SendChat("$f00Jumping is disabled!$z");
        return;
    }

    // Search for the checkpoint to jump to
    declare CSmMapLandmark Target <=> Null;
    foreach (Landmark in MapLandmarks) {
        if (Tools::IsCheckpoint(Landmark) && RNG::GetOrder(Landmark) == _Target) {
            Target <=> Landmark;
            break;
        }
    }

    // Maybe all checkpoints are order 0
    // In this case it's a bit random and that sucks but who jumps in orderless maps anyway...
    if (Target == Null) {
        declare PoleIndex = 0;
        foreach (Landmark in MapLandmarks) {
            if (Tools::IsCheckpoint(Landmark) && PoleIndex == _Target) {
                Target <=> Landmark;
                break;
            }
            PoleIndex += 1;
        }
    }

    if (Target == Null) {
        UI.SendChat("$f11Cannot find Checkpoint "^_Target^"!$z");
        return;
    }

    if (JumpToCheckpointIdent(_Player, Target.Id)) {
        UI.SendChat("$1f1Jumping to Checkpoint "^_Target^"!");
    } else {
        UI.SendChat("$f11Cannot find Spawn for Checkpoint "^_Target^"!$z");
    }
}

/**
 * Logic when a player capture the goal
 *
 * Arguments: CSmPlayer _Player Player who finish the map
 *            Ident     _GoalId Goal
 */
Void Private_HandleFinish(CSmPlayer _Player, Ident _GoalId) {
    declare Goal <=> MapLandmarks[_GoalId];

    declare BestRun = Player::getBestRun(_Player);
    declare Time = Player::getTime(_Player);

    Player::setLastRun(_Player, Time);
    Player::setLastCPTimes(_Player, _GoalId, Time);
    Player::setCpProgress(_Player, -1);

    // Update time diff before updating best run
    TimeDiff::UpdateLayer(_Player, Time, BestRun);
    declare netwrite Net_NewGoal for _Player = 0;
    Net_NewGoal = Now;

    // Check if last run is  if last run is better
    if (Time < BestRun || BestRun < 0) {
        Player::setBestRun(_Player, Time);
        Player::setBestCPTimes(_Player, Player::getLastCPTimes(_Player));

        Private_UpdatePlayerRsCounter(_Player);

        CPTimes::UpdateLayer(_Player);
    }


    // Send score
    Private_SendFinishedRun(_Player, Time, _GoalId);
    XmlRpc.SendCallback("Obstacle_OnFinish", Player::ToJSON(_Player));

    //Update UI
    declare UI <=> UIManager.GetUI(_Player);
    if (UI != Null) {
        declare TimeStr = TL::TimeToText(Time, True);
        declare Variant = 1;
        declare Color = "$f00";

        declare message = "";
        if (Player::getBestRun(_Player) == Time) {
            Variant = 0;
            Color = "$00f";
            message = _("(New Best Time!)");
        }

        UI.SendNotice(TL::Compose("%1: $<%2$> %3", _("|Goal|Finish"), Color^TimeStr, message),
                CUIConfig::ENoticeLevel::PlayerInfo, _Player.User, CUIConfig::EAvatarVariant::Default,
                CUIConfig::EUISound::Finish, Variant);
    }
}


/**
 * Jump a player back to their last legitimate position
 *
 * Arguments: CSmPlayer _Player Player to teleport
 */

Void JumpBack(CSmPlayer _Player) {
    declare LastCP = Player::loadLastLegitPosition(_Player);
    if (LastCP != NullId) {
        Private_CheckpointEffect(_Player, LastCP);
    }
    ObsRespawnPlayer(_Player);
}

/**
 * Logic when a player capture a checkpoint
 *
 * Arguments: CSmPlayer _Player       Player who captured checkpoint
 *            Ident     _CheckpointId Checkpoint captured (guaranted to be the next cp)
 */
Void Private_HandleCheckpoint(CSmPlayer _Player, Ident _CheckpointId) {
    declare Checkpoint <=> MapLandmarks[_CheckpointId];
    declare Order = RNG::GetOrder(Checkpoint);

    declare LastCPTimes = Player::getLastCPTimes(_Player);
    declare BestCPTimes = Player::getBestCPTimes(_Player);

    declare time = Player::getTime(_Player);

    Player::setLastCPTimes(_Player, _CheckpointId, time);
    Player::setV2PortalCache(_Player, NullId);

    if (Player::usedJump(_Player)) {
        if (Order == 0) {
            if (!LastCPTimes.existskey(Checkpoint.Id)) {
                Player::setCpProgress(_Player, Player::getCpProgress(_Player) + 1);
            }
        } else {
            Player::setCpProgress(_Player, Order);
        }
    }
    else {
        Player::setCpProgress(_Player, LastCPTimes.count + 1);
    }

    Player::setLastCheckpoint(_Player, _CheckpointId);
    Private_CheckpointEffect(_Player, _CheckpointId);

    XmlRpc.SendCallback("Obstacle_OnCheckpoint", Player::ToJSON(_Player));

    // UPDATE UI
    Private_UpdatePlayerBestTime(_Player);

    declare UI <=> UIManager.GetUI(_Player);
    if (_Player.Score == Null) return;
    declare Variant = 0;

    declare BestTime = Player::getBestTime(_Player, _CheckpointId);
    if (time > BestTime) Variant = 1;

    TimeDiff::UpdateLayer(_Player, time, BestTime);

    UI.SendNotice("",
            CUIConfig::ENoticeLevel::PlayerInfo, _Player.User, CUIConfig::EAvatarVariant::Default,
            CUIConfig::EUISound::Checkpoint, Variant);

    if (G_Mode == Constants::C_Mode_Obstacle) {
       ObsScores::OnCheckpoint(_Player);
    }
}

/**
 * Manage interactions between player and landmarks (checkpoints, goals, portals, more?)
 *
 * Arguments: CSmPlayer _Player Player who captured a landmark
 * Returns: True if the player captured a goal
 */
Boolean HandleCapture(CSmPlayer _Player) {
    declare HasCapturedGoal = False;

    declare Landmark <=> _Player.CapturedLandmark;
    declare MapVersion = Map::GetMapTypeVersion();
    declare CpProgress = Player::getCpProgress(_Player);
    declare HasJumped = Player::usedJump(_Player);
    declare MessageToShow = "";

    if (!RNG::IsEnabled(Landmark)) {
        return HasCapturedGoal;
    }

    declare Time = Player::getTime(_Player);
    if (Time < 0) {
        ObsRespawnPlayer(_Player, True);
        return HasCapturedGoal;
    }

    if (Tools::IsGoal(Landmark)) {
        if (HasJumped) {
            MessageToShow =  _("You used a Jump! Your Time is invalid.");
        }
        else {
            declare CpMissing = G_CheckpointsTotal - CpProgress;
            if (CpMissing == 0) {
                Private_HandleFinish(_Player, Landmark.Id);
                HasCapturedGoal = True;
            }
            else {
                MessageToShow = "Missing "^CpMissing^" checkpoint(s)!";
            }
        }
    }
    else if (Tools::IsCheckpoint(Landmark) || Tools::IsPortal(Landmark)) {
        // Take any checkpoints if player jumped
        if (HasJumped) {
            declare LastCPId = Player::getLastCheckpoint(_Player);

            if (LastCPId != NullId) {
                declare LastCP <=> MapLandmarks_Sector[LastCPId];
                declare Distance = ML::Distance(LastCP.Position, _Player.Position);

                if (ML::Abs(Distance) > 3)
                    Private_HandleCheckpoint(_Player, Landmark.Id);
            } else {
                Private_HandleCheckpoint(_Player, Landmark.Id);
            }

        } else {
            declare LastCpTimes = Player::getLastCPTimes(_Player);
            declare PreviousCheckpointsOrder = Player::getPreviousCheckpointsOrder(_Player);

            // Check if the checkpoint is the next one
            declare isNextCp = True;
            declare Order = RNG::GetOrder(Landmark);
            if (Order == 0) {
                if (Landmark.Order == 0) {
                    isNextCp = !LastCpTimes.existskey(Landmark.Id);
                } else {
                    isNextCp = !PreviousCheckpointsOrder.exists(Landmark.Order);
                }
            } else {
                isNextCp = Order == CpProgress + 1;
            }

            if (isNextCp) {
                if (Tools::IsPortal(Landmark)) {
                    declare HasANormalCP = False;

                    foreach (CP in MapLandmarks) {
                        if (Tools::IsCheckpoint(CP) && !Tools::IsPortal(CP)
                            && RNG::GetOrder(CP) == CpProgress + 1)
                        {
                            HasANormalCP = True;
                            break;
                        }
                    }

                    if (HasANormalCP) {
                        Player::setV2PortalCache(_Player, Landmark.Id);
                        Player::setLastCheckpoint(_Player, Landmark.Id);
                        Private_UsePortal(_Player, Landmark.Id);
                    } else {
                        Private_HandleCheckpoint(_Player, Landmark.Id);
                    }
                } else {
                    Private_HandleCheckpoint(_Player, Landmark.Id);
                }
            }
        }
    }

    // TODO: Change this to a separate function (in Tools or Player?)
    declare LastStatusMessage for _Player = Now;
    if (MessageToShow != "" && LastStatusMessage + 2500 < Now) {
        LastStatusMessage = Now;
        Message::SendBigMessage(_Player, MessageToShow, 2000, 0, CUIConfig::EUISound::Warning, 1);
    }

    return HasCapturedGoal;
}
