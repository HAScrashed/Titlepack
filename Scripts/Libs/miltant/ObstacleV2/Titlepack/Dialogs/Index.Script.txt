/*
	Dialog library by MiLTanT
	Wraps manialinks into a unified design and logic
*/
#Include "Libs/miltant/Nadeo_Fork/Common/Core/MenuLayers.Script.txt"    as Layers
#Include "MathLib" as ML

#Struct K_Dialog {
	Text Close_Event;
	Boolean Aborted;
	Text BuildId;
	Boolean Pending;
}

#Struct K_Result {
	Boolean Over;
	Boolean Success;
	Text[] CustomData;
}

declare K_Dialog[Text] G_Dialogs;
declare Text[] G_Queue;
declare Text G_Current;

declare Boolean G_Initialized;
declare CUILayer G_LayerWrapper;

// Initializes the library
Void Initialize() {
	if (G_Initialized)
		return;

	declare ML_Text = """
<manialink version="3">
	<framemodel id="header">
		<quad size="1.666667 1.666667" id="Quad_TopLeft" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/CornerBlue.png"/>
		<quad size="1.666667 1.666667" rot="90" id="Quad_TopRight" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/CornerBlue.png"/>

		<quad size="1.666667 16" id="Quad_SideLeft" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/SideBlue.png"/>
		<quad size="0 17.66666" id="Quad_Middle" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/MiddleBlue.png"/>
		<quad size="1.666667 16" id="Quad_SideRight" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/SideBlue.png"/>
	</framemodel>
	<framemodel id="body">
		<quad size="1.666667" id="Quad_SideLeft" scriptevents="1" opacity="0.8" bgcolor="010101"/>
		<quad id="Quad_Middle" scriptevents="1" opacity="0.8" bgcolor="010101"/>
		<quad size="1.666667" id="Quad_SideRight" scriptevents="1" opacity="0.8" bgcolor="010101"/>

		<quad size="1.666667 1.666667" id="Quad_BottomLeft" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/Corner.png" modulatecolor="010101" rot="270"/>
		<quad size="1.666667 1.666667" id="Quad_BottomRight" scriptevents="1" opacity="0.8" image="file://Media/Images/Obstacle/Dialogs/Corner.png" modulatecolor="010101" rot="180"/>
	</framemodel>

	<frame z-index="999">
		<label id="Label_Close" text="" size="5 5" halign="right" valign="top" scriptevents="1" focusareacolor1="0000" focusareacolor2="0000" textcolor="fff"/>
		<frameinstance id="Frame_BG_Header" modelid="header"/>
		<frameinstance id="Frame_BG_Body" modelid="body"/>

		<frameinstance id="Frame_BG2_Header" modelid="header"/>
		<frameinstance id="Frame_BG2_Body" modelid="body"/>
		<quad id="Quad_Backdrop" pos="-160 90" size="320 180" style="Bgs1" substyle="BgSystemBar" opacity="0.8" scriptevents="1"/>
	</frame>
	<script><![CDATA[
		#Include "MathLib" as ML
		#Include "TextLib" as TL

		#Struct K_Dialog {
			Text Close_Event;
			Boolean Aborted;
			Text BuildId;
			Boolean Pending;
		}

		main () {
			declare CMlQuad Quad_Backdrop = (Page.GetFirstChild("Quad_Backdrop") as CMlQuad);
			declare K_Dialog DialogLib_CurrentDialog for LocalUser;

			while (True) {
				foreach (Event in PendingEvents) {
					if (Event.Type == CMlScriptEvent::Type::MouseClick) {
						if (Event.ControlId == "Quad_Backdrop" || Event.ControlId == "Label_Close") {
							DialogLib_CurrentDialog.Aborted = True;
						}
					}
					if (Event.Type == CMlScriptEvent::Type::KeyPress) {
						if (Event.KeyCode == 36) {
							DialogLib_CurrentDialog.Aborted = True;
						}
					}
				}
				yield;
			}
		}
	]]></script>
</manialink>""";

	Layers::Create("DialogLib_Backdrop", ML_Text);
	G_LayerWrapper = Layers::Get("DialogLib_Backdrop");

	G_Initialized = True;
	G_Current = "";
}

// Creates a new dialog
Void RegisterDialog(Text _ID, Text _Content, Text _Close_Event) {
	Initialize();

	declare K_Dialog Dialog;
	Dialog.Close_Event = _Close_Event;
	Dialog.Aborted = False;
	Dialog.Pending = True;
	Dialog.BuildId = "DialogLib__" ^ _ID;

	// both update if already exists
	G_Dialogs[_ID] = Dialog;
	Layers::Create("DialogLib__" ^ _ID, _Content);
}

Void DestroyDialog(Text _ID) {
	if (G_Dialogs.existskey(_ID)) {
		G_Dialogs.removekey(_ID);
		Layers::Destroy("DialogLib__" ^ _ID);
	}
}

// Check if a dialog is registered
Boolean DialogRegistered(Text _ID) {
	return G_Dialogs.existskey(_ID);
}

// Returns the current dialog
Text Current() {
	return G_Current;
}

// Go to the next dialog in queue
Void Private_NextDialog() {
	if (G_Queue.count > 0)
		G_Queue.remove(G_Current);

	if (G_Queue.count > 0) {
		G_Current = G_Queue[0];
	} else {
		G_Current = "";
	}
}

// Aborts a dialog
Void AbortDialog(Text _Procedure_ID) {
	if (G_Queue.exists(_Procedure_ID)) {
		if (G_Current == _Procedure_ID) {
			declare K_Dialog DialogLib_CurrentDialog for LocalUser;
			if (Layers::Exists(DialogLib_CurrentDialog.BuildId)) {
				DialogLib_CurrentDialog.Aborted = True;
				Layers::Detach(DialogLib_CurrentDialog.BuildId);
				Layers::Detach("DialogLib_Backdrop");
			}

			Private_NextDialog();
		} else {
			G_Queue.remove(_Procedure_ID);
		}
	}
}


Void Private_ResizeDialog(CMlFrame _Header, CMlFrame _Body, Vec2 _Size) {
	declare halfWidth = _Size.X / 2.0;
	declare halfHeight = _Size.Y / 2.0;

	// resize header
	declare H_TopLeft = (_Header.GetFirstChild("Quad_TopLeft") as CMlQuad);
	declare H_TopRight = (_Header.GetFirstChild("Quad_TopRight") as CMlQuad);
	declare H_SideLeft = (_Header.GetFirstChild("Quad_SideLeft") as CMlQuad);
	declare H_Middle = (_Header.GetFirstChild("Quad_Middle") as CMlQuad);
	declare H_SideRight = (_Header.GetFirstChild("Quad_SideRight") as CMlQuad);

	H_TopLeft.RelativePosition_V3.X = -halfWidth;
	H_TopLeft.RelativePosition_V3.Y = halfHeight;

	H_TopRight.RelativePosition_V3.X = halfWidth;
	H_TopRight.RelativePosition_V3.Y = halfHeight;

	H_SideLeft.RelativePosition_V3.X = -halfWidth;
	H_SideLeft.RelativePosition_V3.Y = halfHeight - 1.666667;

	H_Middle.RelativePosition_V3.X = -halfWidth + 1.666667;
	H_Middle.RelativePosition_V3.Y = halfHeight;
	H_Middle.Size.X = _Size.X - 3.333333;

	H_SideRight.RelativePosition_V3.X = halfWidth - 1.666667;
	H_SideRight.RelativePosition_V3.Y = halfHeight - 1.666667;

	// resize body
	declare B_SideLeft = (_Body.GetFirstChild("Quad_SideLeft") as CMlQuad);
	declare B_Middle = (_Body.GetFirstChild("Quad_Middle") as CMlQuad);
	declare B_SideRight = (_Body.GetFirstChild("Quad_SideRight") as CMlQuad);
	declare B_BottomLeft = (_Body.GetFirstChild("Quad_BottomLeft") as CMlQuad);
	declare B_BottomRight = (_Body.GetFirstChild("Quad_BottomRight") as CMlQuad);

	B_SideLeft.RelativePosition_V3.X = -halfWidth;
	B_SideLeft.RelativePosition_V3.Y = halfHeight - 17.66667;
	B_SideLeft.Size.Y = _Size.Y - 17.66667 - 1.666667;

	B_Middle.RelativePosition_V3.X = -halfWidth + 1.666667;
	B_Middle.RelativePosition_V3.Y = halfHeight - 17.66667;
	B_Middle.Size.X = _Size.X - 3.333333;
	B_Middle.Size.Y = _Size.Y - 17.66667;

	B_SideRight.RelativePosition_V3.X = halfWidth - 1.666667;
	B_SideRight.RelativePosition_V3.Y = halfHeight - 17.66667;
	B_SideRight.Size.Y = _Size.Y - 17.66667 - 1.666667;

	B_BottomLeft.RelativePosition_V3.X = -halfWidth;
	B_BottomLeft.RelativePosition_V3.Y = -halfHeight;

	B_BottomRight.RelativePosition_V3.X = halfWidth;
	B_BottomRight.RelativePosition_V3.Y = -halfHeight;
}

Void Private_ResizeWrapper(CMlPage _Dialog, CMlPage _Wrapper, Real _Split, Boolean _NoClose) {
	declare Label_Close      = (_Wrapper.GetFirstChild("Label_Close")      as CMlLabel);
	declare Frame_BG_Header  = (_Wrapper.GetFirstChild("Frame_BG_Header")  as CMlFrame);
	declare Frame_BG_Body    = (_Wrapper.GetFirstChild("Frame_BG_Body")    as CMlFrame);
	declare Frame_BG2_Header = (_Wrapper.GetFirstChild("Frame_BG2_Header") as CMlFrame);
	declare Frame_BG2_Body   = (_Wrapper.GetFirstChild("Frame_BG2_Body")   as CMlFrame);
	
	declare Vec2 WrapperPos;
	declare Vec2 WrapperBottomRight;
	foreach (Control in _Dialog.MainFrame.Controls) {
		if (Control.AbsolutePosition_V3.X < WrapperPos.X) {
			WrapperPos.X = Control.AbsolutePosition_V3.X;
		}
		if (Control.AbsolutePosition_V3.Y > WrapperPos.Y) {
			WrapperPos.Y = Control.AbsolutePosition_V3.Y;
		}
		if (Control.Size.X + Control.AbsolutePosition_V3.X > WrapperBottomRight.X) {
			WrapperBottomRight.X = Control.Size.X + Control.AbsolutePosition_V3.X;
		}
		if (Control.AbsolutePosition_V3.Y - Control.Size.Y < WrapperBottomRight.Y) {
			WrapperBottomRight.Y = Control.AbsolutePosition_V3.Y - Control.Size.Y;
		}
	}

	declare WrapperSize = <
		ML::Abs(WrapperBottomRight.X - WrapperPos.X),
		ML::Abs(WrapperBottomRight.Y - WrapperPos.Y)
	>;

	Label_Close.Visible = !_NoClose;
	Label_Close.RelativePosition_V3.X = WrapperPos.X + WrapperSize.X - 4.833333;
	Label_Close.RelativePosition_V3.Y = WrapperPos.Y - 3.833333;


	if (_Split == 0.) {
		Private_ResizeDialog(Frame_BG_Header, Frame_BG_Body, WrapperSize);
		Frame_BG_Header.RelativePosition_V3.X = WrapperPos.X + WrapperSize.X / 2.;
		Frame_BG_Header.RelativePosition_V3.Y = WrapperPos.Y - WrapperSize.Y / 2.;

		Frame_BG_Body.RelativePosition_V3.X = WrapperPos.X + WrapperSize.X / 2.;
		Frame_BG_Body.RelativePosition_V3.Y = WrapperPos.Y - WrapperSize.Y / 2.;

		Frame_BG2_Header.Hide();
		Frame_BG2_Body.Hide();
	} else {
		Private_ResizeDialog(Frame_BG_Header, Frame_BG_Body, <_Split - 5.25, WrapperSize.Y>);
		Frame_BG_Header.RelativePosition_V3.X = WrapperPos.X + (_Split - 5.25) / 2.;
		Frame_BG_Header.RelativePosition_V3.Y = WrapperPos.Y - WrapperSize.Y / 2.;

		Frame_BG_Body.RelativePosition_V3.X = WrapperPos.X + (_Split - 5.25) / 2.;
		Frame_BG_Body.RelativePosition_V3.Y = WrapperPos.Y - WrapperSize.Y / 2.;

		Private_ResizeDialog(Frame_BG2_Header, Frame_BG2_Body, <WrapperSize.X - _Split - 4.5, WrapperSize.Y>);
		Frame_BG2_Header.RelativePosition_V3.X = WrapperPos.X + (WrapperSize.X + _Split) / 2. + 1.75;
		Frame_BG2_Header.RelativePosition_V3.Y = WrapperPos.Y - WrapperSize.Y / 2.;

		Frame_BG2_Body.RelativePosition_V3.X = WrapperPos.X + (WrapperSize.X + _Split) / 2. + 1.75;
		Frame_BG2_Body.RelativePosition_V3.Y = WrapperPos.Y - WrapperSize.Y / 2.;

		Frame_BG2_Header.Show();
		Frame_BG2_Body.Show();
	}
}


// Opens a dialog

K_Result Prompt(Text _ID, Text _Procedure_ID, Real _Split, Boolean _NoClose) {
	declare Result = K_Result { Over = False };

	if (G_Dialogs[_ID].Pending) {
		if (G_Queue.count > 0 && G_Queue[0] == _Procedure_ID) {
			G_Dialogs[_ID].Pending = False;

			// Set current dialog
			declare K_Dialog DialogLib_CurrentDialog for LocalUser;
			DialogLib_CurrentDialog = G_Dialogs[_ID];
			DialogLib_CurrentDialog.Aborted = False;
			G_Current = _Procedure_ID;
			
			// Enforce the Dialog controls z-index
			declare MLPage <=> Layers::Get("DialogLib__" ^ _ID).LocalPage;
			foreach (Control in MLPage.MainFrame.Controls) {
				Control.ZIndex = 1000.;
			}

			// Show dialog
			Layers::Attach("DialogLib__" ^ _ID);
			Layers::Attach("DialogLib_Backdrop");
			Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowDialog, 0, 0.0);

			Private_ResizeWrapper(MLPage, Layers::Get("DialogLib_Backdrop").LocalPage, _Split, _NoClose);
		} else {
			G_Queue.add(_Procedure_ID);
		}
	} else {
		declare K_Dialog DialogLib_CurrentDialog for LocalUser;
		declare Boolean Dialog_Closed = False;
		declare Text[] Dialog_CustomData;

		foreach (Event in PendingEvents) {
			if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent && Event.CustomEventType == DialogLib_CurrentDialog.Close_Event) {
				Dialog_Closed = True;
				foreach (Data in Event.CustomEventData) {
					Dialog_CustomData.add(Data);
				}
			}
		}

		if (Dialog_Closed || DialogLib_CurrentDialog.Aborted) {
			Layers::Detach("DialogLib__" ^ _ID);
			Layers::Detach("DialogLib_Backdrop");
			Audio.PlaySoundEvent(CAudioManager::ELibSound::HideDialog, 0, 0.0);

			Private_NextDialog();

			Result.Over = True;
			Result.Success = !DialogLib_CurrentDialog.Aborted;
			foreach (T in Dialog_CustomData) {
				Result.CustomData.add(T);
			}

			G_Dialogs[_ID].Pending = True;
		}
	}

	return Result;
}


K_Result Prompt(Text _ID, Text _Procedure_ID, Real _Split) {
	return Prompt(_ID, _Procedure_ID, _Split, False);
}

K_Result Prompt(Text _ID, Text _Procedure_ID, Boolean _NoClose) {
	return Prompt(_ID, _Procedure_ID, 0., _NoClose);
}

K_Result Prompt(Text _ID, Text _Procedure_ID) {
	return Prompt(_ID, _Procedure_ID, 0., False);
}