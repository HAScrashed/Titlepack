// -------------------------------------- //
//  LIBRARY MODELS by domino54            //
//  script version: 2018-05-31            //
// -------------------------------------- //

/**
 *	Simple library, which allows to easily load
 *	skins for existing gameplay archetypes and
 *	load them for a player.
 */

#Const Version		"2018-05-31"
#Const ScriptName	"Libs/domino54/Models.Script.txt"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_LibModels_ArchetypeCanyonCar	"CanyonCar"
#Const C_LibModels_ArchetypeStadiumCar	"StadiumCar"
#Const C_LibModels_ArchetypeValleyCar	"ValleyCar"
#Const C_LibModels_ArchetypeLagoonCar	"LagoonCar"
#Const C_LibModels_ArchetypeArenaPlayer	"ArenaPlayer"
#Const C_LibModels_ArchetypeMinion		"Minion"

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Ident[Text] G_LibModels_CanyonCar;
declare Ident[Text] G_LibModels_StadiumCar;
declare Ident[Text] G_LibModels_ValleyCar;
declare Ident[Text] G_LibModels_LagoonCar;
declare Ident[Text] G_LibModels_ArenaPlayer;
declare Ident[Text] G_LibModels_Minion;
declare Ident[Text] G_LibModels_Custom;

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Set model for player in both games.
 *
 *	@param	_Player		The player to set model.
 *	@param	_ModelId	ID of the model to set.
 */
Void Private_SetPlayerModel(CPlayer _Player, Ident _ModelId) {
	if (_Player == Null) return;

	switchtype (_Player) {
		// ---------------------------------- //
		// TrackMania player
		case CTmPlayer : {
			declare Player <=> (_Player as CTmPlayer);
			Player.ForceModelId = _ModelId;
		}
		// ---------------------------------- //
		// ShootMania player
		case CSmPlayer : {
			declare Player <=> (_Player as CSmPlayer);
			Player.ForceModelId = _ModelId;
		}
	}
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script.
 *
 *	@return		The version number of the script.
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script.
 *
 *	@return		The name of the script.
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/// Unload the library.
Void Unload() {
	G_LibModels_CanyonCar	.clear();
	G_LibModels_StadiumCar	.clear();
	G_LibModels_ValleyCar	.clear();
	G_LibModels_LagoonCar	.clear();
	G_LibModels_ArenaPlayer	.clear();
	G_LibModels_Minion		.clear();
}

// ---------------------------------- //
// Load the library.
Void Load() {
	Unload();

	// TrackMania vehicles
	G_LibModels_CanyonCar[""]	= ItemList_Add(C_LibModels_ArchetypeCanyonCar);
	G_LibModels_StadiumCar[""]	= ItemList_Add(C_LibModels_ArchetypeStadiumCar);
	G_LibModels_ValleyCar[""]	= ItemList_Add(C_LibModels_ArchetypeValleyCar);
	G_LibModels_LagoonCar[""]	= ItemList_Add(C_LibModels_ArchetypeLagoonCar);

	// ShootMania characters
	if (This is CSmMode) {
		G_LibModels_ArenaPlayer[""]	= ItemList_Add(C_LibModels_ArchetypeArenaPlayer);
		G_LibModels_Minion[""]		= ItemList_Add(C_LibModels_ArchetypeMinion);
	}
}

// ---------------------------------- //
/** Load a skin for CanyonCar vehicle.
 *
 *	@param	_SkinName	Name of the skin file to load.
 */
Void LoadCanyonCar(Text _SkinName) {
	if (_SkinName == "") return;
	G_LibModels_CanyonCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeCanyonCar, "Skins\\Models\\CanyonCar\\"^_SkinName);
}

// ---------------------------------- //
/** Load a skin for StadiumCar vehicle.
 *
 *	@param	_SkinName	Name of the skin file to load.
 */
Void LoadStadiumCar(Text _SkinName) {
	if (_SkinName == "") return;
	G_LibModels_StadiumCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeStadiumCar, "Skins\\Models\\StadiumCar\\"^_SkinName);
}

// ---------------------------------- //
/** Load a skin for ValleyCar vehicle.
 *
 *	@param	_SkinName	Name of the skin file to load.
 */
Void LoadValleyCar(Text _SkinName) {
	if (_SkinName == "") return;
	G_LibModels_ValleyCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeValleyCar, "Skins\\Models\\ValleyCar\\"^_SkinName);
}

// ---------------------------------- //
/** Load a skin for LagoonCar vehicle.
 *
 *	@param	_SkinName	Name of the skin file to load.
 */
Void LoadLagoonCar(Text _SkinName) {
	if (_SkinName == "") return;
	G_LibModels_LagoonCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeLagoonCar, "Skins\\Models\\LagoonCar\\"^_SkinName);
}

// ---------------------------------- //
/** Load a skin for ArenaPlayer character.
 *
 *	@param	_SkinName	Name of the skin file to load.
 */
Void LoadArenaPlayer(Text _SkinName) {
	if (_SkinName == "") return;
	G_LibModels_ArenaPlayer[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeArenaPlayer, "Skins\\Models\\ArenaPlayer\\"^_SkinName);
}

// ---------------------------------- //
/** Load a skin for Minion character.
 *
 *	@param	_SkinName	Name of the skin file to load.
 */
Void LoadMinion(Text _SkinName) {
	if (_SkinName == "") return;
	G_LibModels_Minion[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeMinion, "Skins\\Models\\Minion\\"^_SkinName);
}

// ---------------------------------- //
/** Load a skin for CanyonCar vehicle.
 *
 *	@param	_SkinName	Name of the skin to load.
 *  @param	_SkinFile	Name of the file to load.
 */
Void LoadCanyonCar(Text _SkinName, Text _SkinFile) {
	if (_SkinName == "") return;
	G_LibModels_CanyonCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeCanyonCar, "Skins\\Models\\CanyonCar\\"^_SkinFile);
}

// ---------------------------------- //
/** Load a skin for StadiumCar vehicle.
 *
 *	@param	_SkinName	Name of the skin to load.
 *  @param	_SkinFile	Name of the file to load.
 */
Void LoadStadiumCar(Text _SkinName, Text _SkinFile) {
	if (_SkinName == "") return;
	G_LibModels_StadiumCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeStadiumCar, "Skins\\Models\\StadiumCar\\"^_SkinFile);
}

// ---------------------------------- //
/** Load a skin for ValleyCar vehicle.
 *
 *	@param	_SkinName	Name of the skin to load.
 *  @param	_SkinFile	Name of the file to load.
 */
Void LoadValleyCar(Text _SkinName, Text _SkinFile) {
	if (_SkinName == "") return;
	G_LibModels_ValleyCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeValleyCar, "Skins\\Models\\ValleyCar\\"^_SkinFile);
}

// ---------------------------------- //
/** Load a skin for LagoonCar vehicle.
 *
 *	@param	_SkinName	Name of the skin to load.
 *  @param	_SkinFile	Name of the file to load.
 */
Void LoadLagoonCar(Text _SkinName, Text _SkinFile) {
	if (_SkinName == "") return;
	G_LibModels_LagoonCar[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeLagoonCar, "Skins\\Models\\LagoonCar\\"^_SkinFile);
}

// ---------------------------------- //
/** Load a skin for ArenaPlayer character.
 *
 *	@param	_SkinName	Name of the skin to load.
 *  @param	_SkinFile	Name of the file to load.
 */
Void LoadArenaPlayer(Text _SkinName, Text _SkinFile) {
	if (_SkinName == "") return;
	G_LibModels_ArenaPlayer[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeArenaPlayer, "Skins\\Models\\ArenaPlayer\\"^_SkinFile);
}

// ---------------------------------- //
/** Load a skin for Minion character.
 *
 *	@param	_SkinName	Name of the skin to load.
 *  @param	_SkinFile	Name of the file to load.
 */
Void LoadMinion(Text _SkinName, Text _SkinFile) {
	if (_SkinName == "") return;
	G_LibModels_Minion[_SkinName] = ItemList_AddWithSkin(C_LibModels_ArchetypeMinion, "Skins\\Models\\Minion\\"^_SkinFile);
}

// ---------------------------------- //
/** Load a skin for custom model.
 *
 *	@param	_SkinName	Name of the skin to load.
 *	@param	_ItemName	Name of the item file to load.
 *	@param	_SkinPath	Path to the skin file to load.
 */
Void LoadCustom(Text _SkinName, Text _ItemName, Text _SkinPath) {
	if (_SkinName == "") return;

	if (_SkinPath != "")
		G_LibModels_Custom[_SkinName] = ItemList_AddWithSkin(_ItemName, _SkinPath);
	else
		G_LibModels_Custom[_SkinName] = ItemList_Add(_ItemName);
}

Void LoadCustom(Text _SkinName, Text _ItemName) {
	LoadCustom(_SkinName, _ItemName, "");
}

// ---------------------------------- //
/** Get ID of the CanyonCar vehicle with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the CanyonCar vehicle with a skin.
 */
Ident CanyonCar(Text _SkinName) {
	if (G_LibModels_CanyonCar.existskey(_SkinName)) return G_LibModels_CanyonCar[_SkinName];
	if (G_LibModels_CanyonCar.existskey("")) return G_LibModels_CanyonCar[""];
	return NullId;
}

// ---------------------------------- //
/** Get ID of the default CanyonCar vehicle.
 *
 *	@return		ID of the default CanyonCar vehicle.
 */
Ident CanyonCar() {	return CanyonCar(""); }

// ---------------------------------- //
/** Set CanyonCar vehicle with a skin for a player.
 *
 *	@param	_Player		The player to set CanyonCar vehicle.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetCanyonCar(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, CanyonCar(_SkinName));
}

// ---------------------------------- //
/** Set default CanyonCar vehicle for a player.
 *
 *	@param	_Player		The player to set CanyonCar vehicle.
 */
Void SetCanyonCar(CPlayer _Player) { SetCanyonCar(_Player, ""); }

// ---------------------------------- //
/** Get ID of the StadiumCar vehicle with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the StadiumCar vehicle with a skin.
 */
Ident StadiumCar(Text _SkinName) {
	if (G_LibModels_StadiumCar.existskey(_SkinName)) return G_LibModels_StadiumCar[_SkinName];
	if (G_LibModels_StadiumCar.existskey("")) return G_LibModels_StadiumCar[""];
	return NullId;
}

// ---------------------------------- //
/** Get ID of the default StadiumCar vehicle.
 *
 *	@return		ID of the default StadiumCar vehicle.
 */
Ident StadiumCar() { return StadiumCar(""); }

// ---------------------------------- //
/** Set StadiumCar vehicle with a skin for a player.
 *
 *	@param	_Player		The player to set StadiumCar vehicle.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetStadiumCar(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, StadiumCar(_SkinName));
}

// ---------------------------------- //
/** Set default StadiumCar vehicle for a player.
 *
 *	@param	_Player		The player to set StadiumCar vehicle.
 */
Void SetStadiumCar(CPlayer _Player) { SetStadiumCar(_Player, ""); }

// ---------------------------------- //
/** Get ID of the ValleyCar vehicle with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the ValleyCar vehicle with a skin.
 */
Ident ValleyCar(Text _SkinName) {
	if (G_LibModels_ValleyCar.existskey(_SkinName)) return G_LibModels_ValleyCar[_SkinName];
	if (G_LibModels_ValleyCar.existskey("")) return G_LibModels_ValleyCar[""];
	return NullId;
}

// ---------------------------------- //
/** Get ID of the default ValleyCar vehicle.
 *
 *	@return		ID of the default ValleyCar vehicle.
 */
Ident ValleyCar() { return ValleyCar(""); }

// ---------------------------------- //
/** Set ValleyCar vehicle with a skin for a player.
 *
 *	@param	_Player		The player to set ValleyCar vehicle.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetValleyCar(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, ValleyCar(_SkinName));
}

// ---------------------------------- //
/** Set default ValleyCar vehicle for a player.
 *
 *	@param	_Player		The player to set ValleyCar vehicle.
 */
Void SetValleyCar(CPlayer _Player) { SetValleyCar(_Player, ""); }

// ---------------------------------- //
/** Get ID of the LagoonCar vehicle with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the LagoonCar vehicle with a skin.
 */
Ident LagoonCar(Text _SkinName) {
	if (G_LibModels_LagoonCar.existskey(_SkinName)) return G_LibModels_LagoonCar[_SkinName];
	if (G_LibModels_LagoonCar.existskey("")) return G_LibModels_LagoonCar[""];
	return NullId;
}

// ---------------------------------- //
/** Get ID of the default LagoonCar vehicle.
 *
 *	@return		ID of the default LagoonCar vehicle.
 */
Ident LagoonCar() { return LagoonCar(""); }

// ---------------------------------- //
/** Set LagoonCar vehicle with a skin for a player.
 *
 *	@param	_Player		The player to set LagoonCar vehicle.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetLagoonCar(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, LagoonCar(_SkinName));
}

// ---------------------------------- //
/** Set default LagoonCar vehicle for a player.
 *
 *	@param	_Player		The player to set LagoonCar vehicle.
 */
Void SetLagoonCar(CPlayer _Player) { SetLagoonCar(_Player, ""); }

// ---------------------------------- //
/** Get ID of the ArenaPlayer character with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the ArenaPlayer character with a skin.
 */
Ident ArenaPlayer(Text _SkinName) {
	if (G_LibModels_ArenaPlayer.existskey(_SkinName)) return G_LibModels_ArenaPlayer[_SkinName];
	if (G_LibModels_ArenaPlayer.existskey("")) return G_LibModels_ArenaPlayer[""];
	return NullId;
}

// ---------------------------------- //
/** Get ID of the default ArenaPlayer character.
 *
 *	@return		ID of the default ArenaPlayer character.
 */
Ident ArenaPlayer() { return ArenaPlayer(""); }

// ---------------------------------- //
/** Set ArenaPlayer character with a skin for a player.
 *
 *	@param	_Player		The player to set ArenaPlayer character.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetArenaPlayer(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, ArenaPlayer(_SkinName));
}

// ---------------------------------- //
/** Set default ArenaPlayer character for a player.
 *
 *	@param	_Player		The player to set ArenaPlayer character.
 */
Void SetArenaPlayer(CPlayer _Player) { SetArenaPlayer(_Player, ""); }

// ---------------------------------- //
/** Get ID of the Minion character with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the Minion character with a skin.
 */
Ident Minion(Text _SkinName) {
	if (G_LibModels_Minion.existskey(_SkinName)) return G_LibModels_Minion[_SkinName];
	if (G_LibModels_Minion.existskey("")) return G_LibModels_Minion[""];
	return NullId;
}

// ---------------------------------- //
/** Get ID of the default Minion character.
 *
 *	@return		ID of the default Minion character.
 */
Ident Minion() { return Minion(""); }

// ---------------------------------- //
/** Set Minion character with a skin for a player.
 *
 *	@param	_Player		The player to set Minion character.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetMinion(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, Minion(_SkinName));
}

// ---------------------------------- //
/** Set default Minion character for a player.
 *
 *	@param	_Player		The player to set Minion character.
 */
Void SetMinion(CPlayer _Player) { SetMinion(_Player, ""); }

// ---------------------------------- //
/** Get ID of the custom model with given skin.
 *
 *	@param	_SkinName	Name of the skin file to get.
 *
 *	@return		ID of the custom model with a skin.
 */
Ident Custom(Text _SkinName) {
	if (G_LibModels_Custom.existskey(_SkinName)) return G_LibModels_Custom[_SkinName];
	if (G_LibModels_Custom.existskey("")) return G_LibModels_Custom[""];
	return NullId;
}

// ---------------------------------- //
/** Set custom model with a skin for a player.
 *
 *	@param	_Player		The player to set custom model.
 *	@param	_SkinName	Name of the skin file to set.
 */
Void SetCustom(CPlayer _Player, Text _SkinName) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, Custom(_SkinName));
}

// ---------------------------------- //
/** Set default custom model for a player.
 *
 *	@param	_Player		The player to set custom model.
 */
Void SetCustom(CPlayer _Player) { SetCustom(_Player, ""); }

// ---------------------------------- //
/** Revert the default gameplay model for a player.
 *
 *	@param	_Player		The player to reset gameplay model.
 */
Void SetDefault(CPlayer _Player) {
	if (_Player == Null) return;
	Private_SetPlayerModel(_Player, NullId);
}