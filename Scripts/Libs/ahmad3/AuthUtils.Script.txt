/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Short authentication utility functions      *
 ************************************************/

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-22"
#Const ScriptName "AuthUtils.Script.txt"

/*********************************************
  FUNCTIONS
 *********************************************/

/**
 * Returns the Obstacle token associated with the provided user.
 *
 * @param _User The user. This must always be `LocalUser` to allow access to the persistent storage.
 * @return The token of the local user.
 */
Text GetUserToken(CUser _User) {
    declare persistent Text ObsStore_UserToken for _User = "";
    declare persistent Text[Text] ObsStore_UserTokens for _User = [];
    if (!ObsStore_UserTokens.existskey(_User.Login)) {
        ObsStore_UserTokens[_User.Login] = ObsStore_UserToken;
    }
    return ObsStore_UserTokens[_User.Login];
}

/**
 * Sets the Obstacle token of the provided user to the new one.
 *
 * @param _Token The new token.
 * @param _User The user. This must always be `LocalUser` to allow access to the persistent storage.
 */
Void SetUserToken(Text _Token, CUser _User) {
    declare persistent Text[Text] ObsStore_UserTokens for _User = [];
    ObsStore_UserTokens[_User.Login] = _Token;
}

/**
 * Returns the content to be placed in a Manialink script in order to use this module.
 *
 * Let's consider `_ModName` = "AuthUtils", the exported functions are:
 * - `Text AuthUtils_GetUserToken();`
 * - `Void AuthUtils_SetUserToken(Text _Token);`
 *
 * @return The generated manialink fragment.
 */
Text ML_Content(Text _ModName) {
    return """//!
Text {{{_ModName}}}_GetUserToken() {
    declare persistent Text ObsStore_UserToken for LocalUser = "";
    declare persistent Text[Text] ObsStore_UserTokens for LocalUser = [];
    if (!ObsStore_UserTokens.existskey(LocalUser.Login)) {
        ObsStore_UserTokens[LocalUser.Login] = ObsStore_UserToken;
    }
    return ObsStore_UserTokens[LocalUser.Login];
}

Void {{{_ModName}}}_SetUserToken(Text _Token) {
    declare persistent Text[Text] ObsStore_UserTokens for LocalUser = [];
    ObsStore_UserTokens[LocalUser.Login] = _Token;
}
    """;
}