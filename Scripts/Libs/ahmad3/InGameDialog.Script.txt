/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Utility functions used to show and hide     *
 *   dialogs in a CMlScriptIngame context.       *
 ************************************************/

#Include "TextLib" as TL

#Include "Libs/miltant/Nadeo_Fork/Layers2.Script.txt" as Layers

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-23"
#Const ScriptName "InGameDialog.Script.txt"

///////////////// Custom events

/**
 * Triggered by an external manialink page to create a new dialog and put it
 * in the pending dialogs of the player.
 * 
 * Data:
 * 1. the ID of the page of the external manialink
 * 2. an instance of K_Dialog (<mod_name>_K_Dialog in the ML) in JSON.
 */
#Const C_Ev_NewDialog "dialog:new"

/**
 * Triggered by an external manialink page to close an opened dialog.
 * If the dialog is already closed, it is noop.
 *
 * Data:
 * 1. The dialog ID (Integer).
 */
#Const C_Ev_CloseDialog "dialog:close"

/**
 * Triggered by the dialog manialink page when a button was clicked.
 *
 * Data:
 * 1. The clicked button ID.
 * 2. The data-success attribute value. This should be "True" or "False".
 */
#Const C_Ev_ButtonClicked "dialog:button:clicked"

/**
 * Triggered by the dialog manialink page when the script ends.
 * It allows the mode to safely detach the dialog layer of the player without keeping
 * the `CUIConfig::EUISequence::UIInteraction` sequence, which could block them.
 *
 * Data: nothing
 */
#Const C_Ev_DialogScriptFinish "dialog:scriptended"

/*********************************************
  TYPES
 *********************************************/

/**
 * Represents a submit button in a dialog.
 */
#Struct K_Button {
    /**
     * The associated control ID.
     */
    Text MlId;
    /**
     * The label of the button.
     */
    Text Label;
    /**
     * If the button triggers the "success" flag.
     */
    Boolean Success;
}

/**
 * Represents a dialog.
 */
#Struct K_Dialog {
    /**
     * The title of the dialog shown in the top.
     */
    Text Title;
    /**
     * The message of the dialog.
     */
    Text Msg;
    /**
     * Do we close when the clicked button is success?
     */
    Boolean CloseOnSuccess;
    /**
     * The submit buttons of the dialog.
     */
    K_Button[] Buttons;
}

/**
 * Represents the result of a dialog prompt.
 */
#Struct K_DialogPromptResult {
    /**
     * Was a button submitted?
     */
    Boolean Over;
    /**
     * Was the success flag triggered?
     */
    Boolean Success;
    /**
     * The optional control ID that triggered this result.
     *
     * The array is either filled with one element or empty.
     */
    Text[] MlId;
}

#Struct Private_K_PendingDialog {
    Integer PreviousDialogId;
    Text PageId;
    K_Dialog Dialog;
    Integer NextDialogId;
}

/*********************************************
  GLOBALES
 *********************************************/

/**
 * Represents the last dialog ID. It is incremented for each new dialog.
 */
declare Integer G_LastDialogId;

declare Integer[Integer] G_PromptDialogUpdates;

/**
 * Associates each player UI config ID to an array associating dialog IDs to their content.
 */
declare Private_K_PendingDialog[Integer][Ident] G_PendingDialogs;

/**
 * Associates each player UI config ID to the ID of the shown dialog.
 */
declare Integer[Ident] G_ShownDialogIds;

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Private
////////////////////

Integer Private_GetLastDialogIdOf(CUIConfig _UI, Text _PageId) {
    assert(G_PendingDialogs.existskey(_UI.Id), "the UI must have initialized its pending dialogs array");
    declare Integer VeryLastDialogId = -1;
    declare Integer MaxDialogId = -1;
    foreach (DialogId => Dialog in G_PendingDialogs[_UI.Id]) {
        if (Dialog.NextDialogId == -1) VeryLastDialogId = DialogId;
        if (Dialog.PageId == _PageId && DialogId > MaxDialogId) MaxDialogId = DialogId;
    }
    if (MaxDialogId == -1) return VeryLastDialogId;
    return MaxDialogId;
}

Text Private_GetLayerId(CUIConfig _UI) {
    return "InGameDialog__" ^ _UI.Id;
}

/**
 * Returns the manialink version of the previous types.
 */
Text Private_ML_K_Dialog(Text _ModName) {
    return """//!
#Struct {{{_ModName}}}_K_Button {
    Text MlId;
    Text Label;
    Boolean Success;
}

#Struct {{{_ModName}}}_K_Dialog {
    Text Title;
    Text Msg;
    Boolean CloseOnSuccess;
    {{{_ModName}}}_K_Button[] Buttons;
}

#Struct {{{_ModName}}}_K_DialogPromptResult {
    Boolean Over;
    Boolean Success;
    Text[] MlId;
}
    """;
}

/**
 * Builds and returns the manialink fragment containing the list
 * of the buttons correctly positioned.
 *
 * @param _Buttons The buttons of the dialog.
 * @return The manialink fragment as a text.
 */
Text Private_GetButtons(K_Button[] _Buttons) {
    declare Text MlText;

    foreach (Idx => Button in _Buttons) {
        declare Text ButtonBg = "file://Media/Images/Obstacle/Dialogs/BDefault21.png";
        if (Button.Success) {
            ButtonBg = "file://Media/Images/Obstacle/Dialogs/BActive21.png";
        }

        MlText ^= """
<frame id="{{{Button.MlId}}}" data-success="{{{Button.Success}}}" pos="{{{-Idx*17.5 + 40}}} 0">
    <label
        id="Label_Button" text="{{{Button.Label}}}" pos="0 1"
        size="15 6" valign="bottom" halign="center"
        textfont="regular" textsize="2.1" textcolor="fff"
    />
    <quad
        pos="0 3" id="Quad_Button" scriptevents="1"
        valign="center" halign="center" size="15 6"
        image="{{{ButtonBg}}}"
    />
</frame>
        """;
    }

    return MlText;
}

/**
 * Builds and returns the manialink of the dialog to show.
 *
 * @param _DialogId The dialog ID.
 * @param _Dialog The content of the dialog.
 * @return The manialink page as a text.
 */
Text Private_GetLayer(Integer _DialogId, K_Dialog _Dialog) {
    return """
<manialink version="3" name="Obstacle:InGameDialog">
    <frame id="Frame_Modal" z-index="99999">
        <frame z-index="1000" pos="0 0">
            <quad
                z-index="-1" size="100 75" style="Bgs1"
                substyle="BgButtonOff" halign="center" valign="center"
            />

            <label
                id="Label_ModalTitle" text="{{{_Dialog.Title}}}"
                pos="0 35" size="40 5" style="TextTitle3"
                textsize="4" halign="center" textfont="OswaldMono"
                maxline="1" valign="top" textemboss="1"
            />

            <frame pos="-48 25">
                <label
                    id="Label_ModalMsg" size="96 4" text="{{{_Dialog.Msg}}}"
                    halign="left" valign="center" textsize="1.4"
                />
            </frame>

            <frame id="Frame_ModalButtons" pos="0 -35">
                {{{Private_GetButtons(_Dialog.Buttons)}}}
            </frame>
        </frame>
    </frame>
    <script><![CDATA[

main() {
    wait(Page != Null);

    declare netread Boolean Net_InGameDialog_ActiveDialog for UI = True;

    ClientUI.UISequence = CUIConfig::EUISequence::UIInteraction;

    while (Net_InGameDialog_ActiveDialog) {
        yield;

        // Force the UIInteraction sequence if another manialink page removed it
        if (ClientUI.UISequence != CUIConfig::EUISequence::UIInteraction) {
            ClientUI.UISequence = CUIConfig::EUISequence::UIInteraction;
        }

        foreach (Event in PendingEvents) {
            switch (Event.Type) {
                case CMlScriptEvent::Type::MouseClick: {
                    if (Event.ControlId == "Quad_Button") {
                        declare CMlQuad QuadButton <=> (Event.Control as CMlQuad);
                        declare CMlFrame Button <=> QuadButton.Parent;
                        SendCustomEvent(
                            {{{dump(C_Ev_ButtonClicked)}}},
                            ["{{{_DialogId}}}", Button.ControlId, Button.DataAttributeGet("success")]
                        );
                    }
                }
                case CMlScriptEvent::Type::MouseOver: {
                    if (Event.ControlId == "Quad_Button") {
                        Event.Control.Size *= 1.1;
                    }
                }
                case CMlScriptEvent::Type::MouseOut: {
                    if (Event.ControlId == "Quad_Button") {
                        Event.Control.Size *= (1/1.1);
                    }
                }
            }
        }
    }

    ClientUI.UISequence = CUIConfig::EUISequence::None;
    SendCustomEvent({{{dump(C_Ev_DialogScriptFinish)}}}, []);
}

    ]]></script>
</manialink>
    """;
}

/**
 * Attaches the given dialog to the provided UI config.
 *
 * @param _UI The targeted UI config.
 * @param _DialogId The dialog ID.
 * @param _Dialog The content of the dialog.
 */
Void Private_AttachDialogFor(CUIConfig _UI, Integer _DialogId, K_Dialog _Dialog) {
    if (G_ShownDialogIds.existskey(_UI.Id) && G_ShownDialogIds[_UI.Id] == _DialogId) return;
    declare Text LayerId = Private_GetLayerId(_UI);

    if (Layers::Exists(LayerId)) {
        Layers::Get(LayerId).ManialinkPage = Private_GetLayer(_DialogId, _Dialog);
    } else {
        Layers::Create(LayerId, Private_GetLayer(_DialogId, _Dialog));
    }
    declare CSmPlayer Player <=> GetPlayer(_UI);
    Layers::Attach(LayerId, Player);
    G_ShownDialogIds[_UI.Id] = _DialogId;
}

Void Private_HandleNewDialogWithId(CUIConfig _UI, Text _PageId, K_Dialog _Dialog, Integer _DialogId) {
    // Set the dialog to active if not already done.
    declare netwrite Boolean Net_InGameDialog_ActiveDialog for _UI = False;
    Net_InGameDialog_ActiveDialog = True;

    declare Private_K_PendingDialog Dialog = Private_K_PendingDialog {
        PreviousDialogId = -1,
        PageId = _PageId,
        Dialog = _Dialog,
        NextDialogId = -1
    };

    if (!G_PendingDialogs.existskey(_UI.Id)) {
        G_PendingDialogs[_UI.Id] = [];
    }

    // Insert the dialog in the pending dialogs of the UI.
    declare Integer PreviousDialogId = Private_GetLastDialogIdOf(_UI, _PageId);
    // We update the previous dialog's next dialog ID to the new dialog ID...
    if (G_PendingDialogs[_UI.Id].existskey(PreviousDialogId)) {
        declare Integer NextDialogId = G_PendingDialogs[_UI.Id][PreviousDialogId].NextDialogId;
        G_PendingDialogs[_UI.Id][PreviousDialogId].NextDialogId = _DialogId;
        Dialog.PreviousDialogId = PreviousDialogId;
        // and the next dialog's previous dialog ID to the new dialog ID.
        if (G_PendingDialogs[_UI.Id].existskey(NextDialogId)) {
            G_PendingDialogs[_UI.Id][NextDialogId].PreviousDialogId = _DialogId;
            Dialog.NextDialogId = NextDialogId;
        }
    }

    G_PendingDialogs[_UI.Id][_DialogId] = Dialog;

    // Attach the UI layer if it's the first dialog
    if (Dialog.PreviousDialogId == -1) {
        Private_AttachDialogFor(_UI, _DialogId, _Dialog);
    }
}

/**
 * Handles the creation of a new dialog to the provided UI config.
 *
 * @param _UI The targeted UI config.
 * @param _PageId The page ID that requested a new dialog.
 * @param _Dialog The content of the dialog.
 */
Void Private_HandleNewDialog(CUIConfig _UI, Text _PageId, K_Dialog _Dialog) {
    declare Integer DialogId = G_LastDialogId + 1;
    Private_HandleNewDialogWithId(_UI, _PageId, _Dialog, DialogId);
    G_LastDialogId = DialogId;

    // Return the dialog ID to the requesting manialink page.
    declare netwrite Integer[Text] Net_Dlg_LastDialogIds for _UI = [];
    Net_Dlg_LastDialogIds[_PageId] = DialogId;
}

/**
 * Handles the close of a dialog of the provided UI config.
 *
 * If the dialog associated to the dialog ID is not shown, this is noop.
 *
 * @param _UI The targeted UI config.
 * @param _DialogId The ID of the dialog to close.
 */
Void Private_HandleCloseDialog(CUIConfig _UI, Integer _DialogId) {
    // Skip if the dialog isn't in the pending list
    if (!G_PendingDialogs.existskey(_UI.Id) || !G_PendingDialogs[_UI.Id].existskey(_DialogId)) return;

    declare Private_K_PendingDialog LastDialog = G_PendingDialogs[_UI.Id][_DialogId];
    G_PendingDialogs[_UI.Id].removekey(_DialogId);

    declare Integer CurrentPreviousDialogId = LastDialog.PreviousDialogId;
    declare Integer CurrentNextDialogId = LastDialog.NextDialogId;

    if (CurrentPreviousDialogId == -1 && CurrentNextDialogId == -1) {
        // This was the last dialog to show to the client,
        // so we remove everything related to it.

        G_PendingDialogs.removekey(_UI.Id);
        G_ShownDialogIds.removekey(_UI.Id);

        // This will make the dialog script to terminate.
        declare netwrite Boolean Net_InGameDialog_ActiveDialog for _UI = True;
        Net_InGameDialog_ActiveDialog = False;
    } else {
        // There are other pending dialogs for the client.

        declare Integer NextDialogId;
        if (CurrentPreviousDialogId == -1) {
            NextDialogId = CurrentNextDialogId;
        } else {
            NextDialogId = CurrentPreviousDialogId;
        }

        if (G_PendingDialogs[_UI.Id].existskey(CurrentPreviousDialogId)) {
            G_PendingDialogs[_UI.Id][CurrentPreviousDialogId].NextDialogId = CurrentNextDialogId;
        }
        if (G_PendingDialogs[_UI.Id].existskey(CurrentNextDialogId)) {
            G_PendingDialogs[_UI.Id][CurrentNextDialogId].PreviousDialogId = CurrentPreviousDialogId;
        }

        declare K_Dialog NextDialog = G_PendingDialogs[_UI.Id][NextDialogId].Dialog;
        Private_AttachDialogFor(_UI, NextDialogId, NextDialog);
    }
}

/**
 * Handles a button click event for the provided UI config.
 *
 * @param _UI The targeted UI config.
 * @param _DialogId The ID of the submitted dialog.
 * @param _ButtonId The control ID of the clicked button.
 * @param _Success Whether the button triggers the success flag or not.
 */
Void Private_HandleButtonClicked(
    CUIConfig _UI, Integer _DialogId, Text _ButtonId, Boolean _Success
) {
    declare K_Dialog CurrentDialog = G_PendingDialogs[_UI.Id][_DialogId].Dialog;
    if (_Success && CurrentDialog.CloseOnSuccess) {
        Private_HandleCloseDialog(_UI, _DialogId);
    }

    declare netwrite Text[Integer] Net_Dlg_PromptDialogResults
        for _UI = [];
    declare netwrite Integer[Integer] Net_Dlg_PromptDialogUpdates
        for _UI = [];

    declare K_DialogPromptResult Res = K_DialogPromptResult {
        Over = True,
        Success = _Success,
        MlId = [_ButtonId]
    };
    Net_Dlg_PromptDialogResults[_DialogId] = Res.tojson();
    Net_Dlg_PromptDialogUpdates[_DialogId] = Now;
}

////////////////////
//// Public
////////////////////

/**
 * Initializes the library.
 */
Void Init() {
    G_PendingDialogs = [];
    G_LastDialogId = 0;
    G_ShownDialogIds = [];
    foreach (Idx => UI in UIManager.UI) {
        if (Idx == 0) continue;
        declare netwrite Integer[Text] Net_Dlg_LastDialogIds for UI = [];
        Net_Dlg_LastDialogIds = [];
        declare netwrite Boolean Net_InGameDialog_ActiveDialog for UI = False;
        Net_InGameDialog_ActiveDialog = False;
        declare netwrite Text[Integer] Net_Dlg_PromptDialogResults for UI = [];
        Net_Dlg_PromptDialogResults = [];
        declare netwrite Integer[Integer] Net_Dlg_PromptDialogUpdates for UI = [];
        Net_Dlg_PromptDialogUpdates = [];
    }
}

Integer NewDialog(K_Dialog _Dialog) {
    declare Integer DialogId = G_LastDialogId + 1;

    foreach (Player in AllPlayers) {
        declare CUIConfig UI <=> UIManager.GetUI(Player);
        Private_HandleNewDialogWithId(UI, "", _Dialog, DialogId);
    }

    G_LastDialogId = DialogId;
    return DialogId;
}

Void CloseDialog(Integer _DialogId) {
    foreach (Player in AllPlayers) {
        declare CUIConfig UI <=> UIManager.GetUI(Player);
        Private_HandleCloseDialog(UI, _DialogId);
    }
}

K_DialogPromptResult[Ident] PromptDialog(Integer _DialogId) {
    declare K_DialogPromptResult[Ident] Out = [];

    foreach (Player in AllPlayers) {
        declare CUIConfig UI <=> UIManager.GetUI(Player);

        // Default prompt result
        declare K_DialogPromptResult Res = K_DialogPromptResult {};

        // Check for an update for the `_DialogId` dialog
        declare netwrite Integer[Integer] Net_Dlg_PromptDialogUpdates for UI = [];
        if (!Net_Dlg_PromptDialogUpdates.existskey(_DialogId)
            || G_PromptDialogUpdates.existskey(_DialogId)
                && G_PromptDialogUpdates[_DialogId] == Net_Dlg_PromptDialogUpdates[_DialogId])
        {
            Out[UI.Id] = Res;
            continue;
        }

        // Fill the result with the updated prompt result
        declare netwrite Text[Integer] Net_Dlg_PromptDialogResults for UI = [];
        Res.fromjson(Net_Dlg_PromptDialogResults[_DialogId]);

        G_PromptDialogUpdates[_DialogId] = Net_Dlg_PromptDialogUpdates[_DialogId];

        Out[UI.Id] = Res;
    }

    return Out;
}

/**
 * Updates the state of the library by handling the provided custom UI event.
 *
 * @param _Event The event.
 */
Void Yield() {
    foreach (Event in UIManager.PendingEvents) {
        if (Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent) continue;

        switch (Event.CustomEventType) {
            ////////////
            //// New dialog request
            ////////////
            case C_Ev_NewDialog: {
                declare Text PageId = Event.CustomEventData[0];
                declare K_Dialog Dialog;
                Dialog.fromjson(Event.CustomEventData[1]);
                Private_HandleNewDialog(Event.UI, PageId, Dialog);
            }

            ////////////
            //// Close dialog request
            ////////////
            case C_Ev_CloseDialog: {
                declare Integer DialogId = TL::ToInteger(Event.CustomEventData[0]);
                Private_HandleCloseDialog(Event.UI, DialogId);
            }

            ////////////
            //// Button clicked in a dialog
            ////////////
            case C_Ev_ButtonClicked: {
                declare Integer DialogId = TL::ToInteger(Event.CustomEventData[0]);
                declare Text ButtonId = Event.CustomEventData[1];
                declare Boolean Success = False;
                if (Event.CustomEventData[2] == "True") {
                    Success = True;
                }

                Private_HandleButtonClicked(Event.UI, DialogId, ButtonId, Success);
            }

            ////////////
            //// A dialog has finished
            ////////////
            case C_Ev_DialogScriptFinish: {
                declare CSmPlayer Player <=> GetPlayer(Event.UI);
                Layers::Detach(Private_GetLayerId(Event.UI), Player);
                declare netwrite Boolean Net_PendingFinish for Event.UI = True;
                Net_PendingFinish = False;
            }
        }
    }
}

/**
 * Returns the manialink version of the type definitions of this library,
 * prefixed by *_ModName*.
 *
 * See the documentation of [`K_Dialog`].
 *
 * @param _ModName The name of the module, like "Dlg" or "Dialog".
 * @return The manialink fragment containing the struct definitions.
 */
Text ML_Preproc(Text _ModName) {
    return """//!
{{{Private_ML_K_Dialog(_ModName)}}}
    """;
}

/**
 * Returns the manialink fragment containing utility functions used to manipulate dialogs
 * in any manialink page.
 *
 * Let's consider `_ModName` = "Dlg", the fragment provides 3 functions:
 *
 * 1. `Integer Dlg_NewDialog(Dlg_K_Dialog _Dialog);`
 *
 * This function pushes the provided dialog to the pending dialogs shown to the user.
 * It returns the associated dialog ID used to prompt it or close.
 *
 * 2. `Dlg_K_DialogPromptResult Dlg_PromptDialog(Integer _DialogId);`
 *
 * This function fetches for a prompt result of the dialog associated to the provided dialog ID.
 * If the associated dialog isn't shown, the result is always like nothing happened.
 *
 * 3. `Void Dlg_CloseDialog(Integer _DialogId);`
 *
 * This function closes the dialog associated to the provided dialog ID.
 * If the associated dialog isn't shown, this is noop.
 *
 * @param _ModName The name of the module, like "Dlg" or "Dialog". This must be the same as the one
 * used in the call of [`ML_Preproc`].
 * @param _MlPage The name of the manialink page using the library.
 * @return The definitions of the previous functions as a manialink script fragment.
 */
Text ML_Content(Text _ModName, Text _MlPage) {
    return """//!
declare Integer {{{_ModName}}}_G_LastDialogId;
declare Integer[Integer] {{{_ModName}}}_G_PromptDialogUpdates;

Void {{{_ModName}}}_CloseDialog(Integer _DialogId) {
    SendCustomEvent({{{dump(C_Ev_CloseDialog)}}}, [_DialogId ^ ""]);
}

{{{_ModName}}}_K_DialogPromptResult {{{_ModName}}}_PromptDialog(Integer _DialogId) {
    // Default prompt result
    declare {{{_ModName}}}_K_DialogPromptResult Res = {{{_ModName}}}_K_DialogPromptResult {};

    // Check for an update for the `_DialogId` dialog
    declare netread Integer[Integer] Net_Dlg_PromptDialogUpdates for UI = [];
    if (!Net_Dlg_PromptDialogUpdates.existskey(_DialogId)
        || {{{_ModName}}}_G_PromptDialogUpdates.existskey(_DialogId)
            && {{{_ModName}}}_G_PromptDialogUpdates[_DialogId] == Net_Dlg_PromptDialogUpdates[_DialogId])
    {
        return Res;
    }

    // Fill the result with the updated prompt result
    declare netread Text[Integer] Net_Dlg_PromptDialogResults for UI = [];
    Res.fromjson(Net_Dlg_PromptDialogResults[_DialogId]);

    {{{_ModName}}}_G_PromptDialogUpdates[_DialogId] = Net_Dlg_PromptDialogUpdates[_DialogId];
    return Res;
}

Integer {{{_ModName}}}_NewDialog({{{_ModName}}}_K_Dialog _Dialog) {
    SendCustomEvent({{{dump(C_Ev_NewDialog)}}}, ["{{{_MlPage}}}", _Dialog.tojson()]);

    declare Boolean InGameDialogActive for LocalUser = False;
    InGameDialogActive = True;
    declare netread Integer[Text] Net_Dlg_LastDialogIds for UI = [];
    wait(Net_Dlg_LastDialogIds.existskey("{{{_MlPage}}}")
        && Net_Dlg_LastDialogIds["{{{_MlPage}}}"] != {{{_ModName}}}_G_LastDialogId);
    {{{_ModName}}}_G_LastDialogId = Net_Dlg_LastDialogIds["{{{_MlPage}}}"];
    return {{{_ModName}}}_G_LastDialogId;
}
    """;
}
