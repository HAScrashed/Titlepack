/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Util functions for auth system              *
 ************************************************/

#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib
#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/miltant/RunFlags.Script.txt" as RunFlags

#Include "Libs/ahmad3/Error.Script.txt" as Error
#Include "Libs/ahmad3/Ban.Script.txt" as Ban

/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2023-07-21"
#Const  ScriptName  "MlAuth.Script.txt"

#Const C_AuthMessage """We are about to refresh your personal tokens.

This procedure will open your browser to the ManiaPlanet's login page.
You will only have to authenticate with the same account as the one
you use in game."""

#Const C_AuthMessage_UpdatePlayer """Hey there! To continue to enjoy Obstacle,
we need you to authenticate with your ManiaPlanet account.
"""

#Const C_AuthMessage_PlayerFinished """Hey! Before you finish and save your record,
we need you to authenticate with your ManiaPlanet account.
Do not skip this step, or your run will be lost! Don't worry, it's fast!
"""

#Const C_Security_OpenplanetDevMsg """It looks like you have Openplanet with developer mode enabled.
This may offer you a number of features that could be contrary to fair play.
It is why we do not authorize it in our mode.

Please disable the developer mode for the plugins signature.

If you think this is an error, please mention the developers
(i.e. @miltant or @ahmadbky) on Discord.

Thank you.
"""

Text GetLayer() {
	return """
<manialink version="3" name="Obstacle:Auth">
<frame id="Frame_AuthDialog" hidden="1">
	<frame z-index="1000" pos="0 0">
		<quad z-index="-1" size="100 75" style="Bgs1" substyle="BgButtonOff" halign="center" valign="center" />
		<label pos="0 35" size="40 5" text="Authentication" style="TextTitle3" textsize="4" halign="center" textfont="OswaldMono" maxline="1" valign="top" textemboss="1"/>

		<frame pos="-48 14">
			<label id="AuthDialog_HeadMsg" size="96 4" halign="left" valign="center" textsize="1.4" />
		</frame>

		<frame pos="-48 0">
			<label id="AuthDialog_Msg" size="96 4" halign="left" valign="center" textsize="1.4" text={{{dump(C_AuthMessage)}}} />
		</frame>

		<frame id="Frame_AuthDialog_Button" pos="0 -35">
			<label pos="0 1" size="15 6" text="Fine!" valign="bottom" halign="center" textfont="regular" textsize="2.1" textcolor="fff" />
			<quad
			 	id="Frame_AuthDialog_Button_OK"
				scriptevents="1"
				valign="bottom"
				halign="center"
				size="15 6"
				image="file://Media/Images/Obstacle/Dialogs/BDefault21.png"
			/>
		</frame>
	</frame>
</frame>
<frame id="Frame_Security_OpenplanetDev" hidden="1">
	<frame z-index="1000" pos="0 0">
		<quad z-index="-1" size="100 75" style="Bgs1" substyle="BgButtonOff" halign="center" valign="center" />
		<label pos="0 35" size="40 5" text="Warning" style="TextTitle3" textsize="4" halign="center" textfont="OswaldMono" maxline="1" valign="top" textemboss="1"/>

		<frame pos="-48 14">
			<label id="Security_Msg" size="96 4" halign="left" valign="center" textsize="1.4" text={{{dump(C_Security_OpenplanetDevMsg)}}} />
		</frame>
	</frame>
</frame>
<script><!--

#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib
#Include "TextLib" as TL

#Const C_AuthMessage_UpdatePlayer {{{dump(dump(dump(C_AuthMessage_UpdatePlayer)))}}}
#Const C_AuthMessage_PlayerFinished {{{dump(dump(dump(C_AuthMessage_PlayerFinished)))}}}

#Struct K_GetTokenBody {
	Text login;
	Text state;
	Text redirect_uri;
}

#Struct K_GetTokenResponse {
	Text token;
}

#Struct SRequestData {
    Text Headers;
    Text Url;
    Text Data;
}

#Struct K_UpdatePlayerBody {
    Text login;
    Text name;
    Text zone_path;
}

#Struct K_HasFinishedBody {
    Integer time;
    Integer respawn_count;
    Text login;
    Text map_uid;
    Integer flags;
    Integer[] cps;
}

{{{Ban::ML_Preproc()}}}
{{{Error::ML_Preproc()}}}
{{{RunFlags::ML_Preproc()}}}

{{{Ban::ML_Content()}}}
{{{Error::ML_Content()}}}
{{{RunFlags::ML_FlagSum()}}}

declare Boolean G_Errored;

declare CMlFrame	G_AuthDialog;
declare CMlQuad		G_AuthDialog_Submit;
declare CMlLabel	G_AuthDialog_HeadMsg;

declare CMlFrame	G_SecurityFrame;

// Used to create a POST request
Ident MakePost(Text _Url, Text _Data) {
    if (Http.SlotsAvailable > 0) {
        log(" Sending request to "^_Url);
        log(" Payload: "^_Data);
		declare persistent ObsStore_UserToken for LocalUser = "";
        declare request <=> Http.CreatePost({{{dump(Constants::C_HostUrl)}}}^_Url, _Data, "Content-Type: application/json\nAccept: application_json\nPlayerLogin: " ^ InputPlayer.User.Login ^ "\nAuthorization: " ^ ObsStore_UserToken);
        return request.Id;
    }
    return NullId;
}

Void Private_UpdateToken(Text _HeadMsg) {
	log("Updating token...");

	ClientUI.UISequence = CUIConfig::EUISequence::UIInteraction;
	G_AuthDialog_HeadMsg.SetText(_HeadMsg);
	G_AuthDialog.Show();

	declare hovering = False;

	declare prompting = True;
	while (prompting) {
		yield;
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseClick: {
					if (Event.Control == G_AuthDialog_Submit) {
						prompting = False;
						break;
					}
				}
				case CMlScriptEvent::Type::MouseOver: {
					if (hovering) continue;
					hovering = True;
					G_AuthDialog_Submit.ChangeImageUrl("file://Media/Images/Obstacle/Dialogs/BActive21.png");
				}
				case CMlScriptEvent::Type::MouseOut: {
					if (!hovering) continue;
					hovering = False;
					G_AuthDialog_Submit.ChangeImageUrl("file://Media/Images/Obstacle/Dialogs/BDefault21.png");
				}
			}
		}
	}

	G_AuthDialog.Hide();
	ClientUI.UISequence = CUIConfig::EUISequence::None;

	declare persistent Text ObsStore_UserToken for LocalUser;
	
	declare login = LocalUser.Login;
	declare Text state = login ^ Now;
	declare body = K_GetTokenBody {
		login = login,
		state = state,
		redirect_uri = {{{dump(Constants::C_MP_Redirect)}}}
	};
	
	declare Req = MakePost("player/get_token", body.tojson());
	if (Req == NullId) {
		log("Could not send request to server");
		G_Errored = True;
		return;
	}

	declare req <=> Http.Requests[Req];

	OpenLink({{{dump(Constants::C_MP_Link)}}}
		^ "client_id=" ^ {{{dump(Constants::C_MP_App_Id)}}}
		^ "&redirect_uri=" ^ {{{dump(Constants::C_MP_Redirect)}}}
		^ "&state=" ^ state
		^ "&scope=basic",
		CMlScript::LinkType::ExternalBrowser);
	
	wait(req.IsCompleted);
	if (req.StatusCode != 200) {
		declare err = Error_Handle(req.StatusCode, req.Result);
		UI.SendChat(err.message);
		G_Errored = True;
		return;
	}
	
	declare K_GetTokenResponse response;
	response.fromjson(req.Result);
	ObsStore_UserToken = response.token;
	
	log("Token updated!");
}

Boolean usedRSBug(CSmPlayer _Player) {
    declare netread Boolean Net_UsedRSBug for _Player = False;
    return Net_UsedRSBug;
}

Boolean usedAltGlitch(CSmPlayer _Player) {
    declare netread Boolean Net_UsedAltGlitch for _Player = False;
    return Net_UsedAltGlitch;
}

Boolean usedPvPWeapons(CSmPlayer _Player) {
    declare netread Boolean Net_UsedPvPWeapons for _Player = False;
    return Net_UsedPvPWeapons;
}

Boolean usedPvPCollisions(CSmPlayer _Player) {
    declare netread Boolean Net_UsedPvPCollisions for _Player = False;
    return Net_UsedPvPCollisions;
}

Boolean usedSpeedHack(CSmPlayer _Player) {
    declare netread Boolean Net_UsedSpeedHack for _Player = False;
    return Net_UsedSpeedHack;
}

// Send records
Void Private_PlayerFinished(Integer _LastRun, Integer _RespawnCount, Integer[] _LastCpTimes) {
    declare Flags = GetFlagsSum(
        usedRSBug(InputPlayer),
        usedAltGlitch(InputPlayer),
        usedPvPWeapons(InputPlayer),
        usedPvPCollisions(InputPlayer),
        usedSpeedHack(InputPlayer)
    );

    declare state = InputPlayer.User.Login ^ Now;

    declare body = K_HasFinishedBody {
        time = _LastRun,
        respawn_count = _RespawnCount,
        login = InputPlayer.User.Login,
        map_uid = ""^Map.Id,
        flags = Flags,
        cps = _LastCpTimes
    };

    declare Req = MakePost("player/finished", body.tojson());
	if (Req == NullId) {
		log("Could not send request to server");
		return;
	}

	declare req <=> Http.Requests[Req];

	wait (req.IsCompleted);

	if (req.StatusCode == C_HttpErr_Unauthorized && !G_Errored) {
		Private_UpdateToken(C_AuthMessage_PlayerFinished);
		return Private_PlayerFinished(_LastRun, _RespawnCount, _LastCpTimes);
	} else if (req.StatusCode != 200) {
		declare err = Error_Handle(req.StatusCode, req.Result);
		SendCustomEvent("ban:update", [InputPlayer.User.Login, err.ban.tojson()]);
		UI.SendChat(err.message);
	} else {
		SendCustomEvent("player:finished", [req.Result]);
	}

	Http.Destroy(req);
}

// Update player infos
Void Private_UpdatePlayer() {
    declare body = K_UpdatePlayerBody {
        login = InputPlayer.User.Login,
        name = InputPlayer.User.Name,
        zone_path = InputPlayer.User.ZonePath
    };

    declare Req = MakePost("player/update", body.tojson());
	if (Req == NullId) {
		log("Could not send request to server");
		return;
	}

	declare req <=> Http.Requests[Req];
	
	wait (req.IsCompleted);

	if (req.StatusCode == C_HttpErr_Unauthorized && !G_Errored) {
		Private_UpdateToken(C_AuthMessage_UpdatePlayer);
		return Private_UpdatePlayer();
	} else if (req.StatusCode != 200) {
		declare err = Error_Handle(req.StatusCode, req.Result);
		SendCustomEvent("ban:update", [InputPlayer.User.Login, err.ban.tojson()]);
		UI.SendChat(err.message);
	}

	Http.Destroy(Http.Requests[Req]);
}

// Returns true if the user has Openplanet installed
Boolean HasOpenplanet() {
	return TL::RegexFind("^Openplanet ", System.ExtraTool_Info, "").count == 1;
}

// Returns the signature mode currently used in Openplanet
Text GetOpenplanetSignatureMode() {
	declare Text[] SignatureMode = TL::RegexMatch(" \\[([A-Z]*)\\]$", System.ExtraTool_Info, "");
	if (SignatureMode.count == 2) {
		return SignatureMode[1];
	}
	return "REGULAR";
}

Boolean HasDevMode() {
	return HasOpenplanet() && GetOpenplanetSignatureMode() == "DEVMODE";
}

main() {
	Error_Init();
	declare lastTokenUpdate = -1;
	wait(InputPlayer != Null && Page != Null);

	G_AuthDialog <=> (Page.GetFirstChild("Frame_AuthDialog") as CMlFrame);
	G_AuthDialog_Submit <=> (Page.GetFirstChild("Frame_AuthDialog_Button_OK") as CMlQuad);
	G_AuthDialog_HeadMsg <=> (Page.GetFirstChild("AuthDialog_HeadMsg") as CMlLabel);

	G_SecurityFrame <=> (Page.GetFirstChild("Frame_Security_OpenplanetDev") as CMlFrame);

	while (HasDevMode()) {
		yield;
		if (!G_SecurityFrame.Visible) {
			ClientUI.UISequence = CUIConfig::EUISequence::UIInteraction;
			G_SecurityFrame.Show();
		}
	}

	if (G_SecurityFrame.Visible) {
		G_SecurityFrame.Hide();
		ClientUI.UISequence = CUIConfig::EUISequence::None;
	}

	Private_UpdatePlayer();
    declare netread _LastRun for UI = -1;
    declare netread _RespawnCount for UI = 0;
    declare netread Integer[] _LastCPTimes for UI;
    declare LastRun_Cache = _LastRun;
    declare RespawnCount_Cache = _RespawnCount;
	
	while (True) {
		yield;

		if (HasDevMode()) {
			if (!G_SecurityFrame.Visible) {
				ClientUI.UISequence = CUIConfig::EUISequence::UIInteraction;
				G_SecurityFrame.Show();
			}
			continue;
		} else if (G_SecurityFrame.Visible) {
			G_SecurityFrame.Hide();
			ClientUI.UISequence = CUIConfig::EUISequence::None;
		}

		if (_LastRun != LastRun_Cache || _RespawnCount != RespawnCount_Cache) {
			if (_LastRun > 0) {
				Private_PlayerFinished(_LastRun, _RespawnCount, _LastCPTimes);
			}
			LastRun_Cache = _LastRun;
			RespawnCount_Cache = _RespawnCount;
		}
	}
}

--></script>
</manialink>
	""";
}