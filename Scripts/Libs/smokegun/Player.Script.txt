/************************************************
 *   Obstacle Library                            *
 *   Author:     smokegun                        *
 *                                               *
 *   Getters and setters for players             *
 ************************************************/

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json

#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/miltant/Randomizer.Script.txt" as RNG

#Include "Libs/ahmad3/Ban.Script.txt" as Ban

#Include "Libs/ahmad3/InGameDialog.Script.txt" as Dialogs

/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2023-04-10"
#Const  ScriptName  "Player.Script.txt"


/*********************************************
  STRUCTURE
 *********************************************/

#Struct Keys {
    Boolean Up;
    Boolean Right;
    Boolean Down;
    Boolean Left;
    Boolean LClick;
    Boolean RClick;
    Boolean Space;
    Boolean Esc;
}

/*********************************************
  FUNCTIONS
 *********************************************/

Void setTimeInLb(CSmPlayer _Player, Integer _TimeInLb) {
    declare Integer TimeInLb for _Player = -1;
    TimeInLb = _TimeInLb;
}

Integer getTimeInLb(CSmPlayer _Player) {
    declare Integer TimeInLb for _Player = -1;
    return TimeInLb;
}

Void setTabsInitialized(CSmPlayer _Player, Boolean _TabsInit) {
    declare Boolean TabsInitialized for _Player = False;
    TabsInitialized = _TabsInit;
}

Boolean hasTabsInitialized(CSmPlayer _Player) {
    declare Boolean TabsInitialized for _Player = False;
    return TabsInitialized;
}

Void setHasWrongLbLine(CSmPlayer _Player, Boolean _HasWrongLbLine, Boolean _NotifyAll) {
    declare netwrite Boolean Net_HasWrongLbLine for _Player = False;
    Net_HasWrongLbLine = _HasWrongLbLine;
    if (_NotifyAll) {
        declare netwrite Integer Net_RecordsUpdated for Teams[0] = -1;
        Net_RecordsUpdated = Now;
    }
}

Void setHasWrongLbLine(CSmPlayer _Player, Boolean _HasWrongLbLine) {
    setHasWrongLbLine(_Player, _HasWrongLbLine, False);
}

Boolean hasWrongLbLine(CSmPlayer _Player) {
    declare netwrite Boolean Net_HasWrongLbLine for _Player = False;
    return Net_HasWrongLbLine;
}

Void setHasInitPb(CSmPlayer _Player, Boolean _HasInitPb) {
    declare netwrite Boolean Net_HasInitPb for _Player = False;
    Net_HasInitPb = _HasInitPb;
}

Boolean hasInitPb(CSmPlayer _Player) {
    declare netwrite Boolean Net_HasInitPb for _Player = False;
    return Net_HasInitPb;
}

Void setBanned(CSmPlayer _Player, Ban::K_OptBanishment _Value) {
    declare Ban::K_OptBanishment Player_CurrentBanStatus for _Player;
    Player_CurrentBanStatus = _Value;
}

Ban::K_OptBanishment getBanStatus(CSmPlayer _Player) {
    declare Ban::K_OptBanishment Player_CurrentBanStatus for _Player;
    return Player_CurrentBanStatus;
}

Void setUseDevMode(CSmPlayer _Player, Boolean _UseDevMode) {
    declare Boolean UseDevMode for _Player = False;
    UseDevMode = _UseDevMode;
}

Boolean hasDevMode(CSmPlayer _Player) {
    declare Boolean UseDevMode for _Player = False;
    return UseDevMode;
}

Boolean isInitialized(CSmPlayer _Player) {
    declare Boolean isInitialized for _Player = False;
    return isInitialized;
}

Void setInitialized(CSmPlayer _Player, Boolean _Value) {
    declare Boolean isInitialized for _Player = False;
    isInitialized = _Value;
}

Integer getStartTime(CSmPlayer _Player) {
    declare netwrite Integer Net_StartTime for _Player;
    return Net_StartTime;
}

Void setStartTime(CSmPlayer _Player, Integer _Value) {
    declare netwrite Integer Net_StartTime for _Player;

    Net_StartTime = _Value;
}

Integer getCpProgress(CSmPlayer _Player) {
    declare netwrite Integer Net_CpProgress for _Player;
    return Net_CpProgress;
}

Void setCpProgress(CSmPlayer _Player, Integer _Value) {
    declare netwrite Integer Net_CpProgress for _Player;
    Net_CpProgress = _Value;
}

Boolean usedJump(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedJump for _Player = False;
    return Net_UsedJump;
}

Boolean allowRSBug(CSmPlayer _Player) {
    declare UI <=> UIManager.GetUI(_Player);
    if (UI == Null)
        return False;

    declare netread Net_RespawnBehavior for UI = Constants::C_RespawnBehavior_Normal;

    return Net_RespawnBehavior == Constants::C_RespawnBehavior_AllowRSBug;
}

Boolean usedRSBug(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedRSBug for _Player = False;
    return Net_UsedRSBug;
}

Void setUsedRSBug(CSmPlayer _Player, Boolean _Value) {
    declare netwrite Boolean Net_UsedRSBug for _Player = False;
    Net_UsedRSBug = _Value;
}

Boolean usedAltGlitch(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedAltGlitch for _Player = False;
    return Net_UsedAltGlitch;
}

Void setUsedAltGlitch(CSmPlayer _Player, Boolean _Value) {
    declare netwrite Boolean Net_UsedAltGlitch for _Player = False;
    Net_UsedAltGlitch = _Value;
}

Boolean usedPvPWeapons(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedPvPWeapons for _Player = False;
    return Net_UsedPvPWeapons;
}

Void setUsedPvPWeapons(CSmPlayer _Player, Boolean _Value) {
    declare netwrite Boolean Net_UsedPvPWeapons for _Player = False;
    Net_UsedPvPWeapons = _Value;
}

Boolean usedPvPCollisions(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedPvPCollisions for _Player = False;
    return Net_UsedPvPCollisions;
}

Void setUsedPvPCollisions(CSmPlayer _Player, Boolean _Value) {
    declare netwrite Boolean Net_UsedPvPCollisions for _Player = False;
    Net_UsedPvPCollisions = _Value;
}

Boolean usedSpeedHack(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedSpeedHack for _Player = False;
    return Net_UsedSpeedHack;
}

Void setUsedSpeedHack(CSmPlayer _Player, Boolean _Value) {
    declare netwrite Boolean Net_UsedSpeedHack for _Player = False;
    Net_UsedSpeedHack = _Value;
}

Ident getV2PortalCache(CSmPlayer _Player) {
    declare Ident Net_V2PortalCache for _Player = NullId;
    return Net_V2PortalCache;
}

Void setV2PortalCache(CSmPlayer _Player, Ident _Value) {
    declare Ident Net_V2PortalCache for _Player = NullId;
    Net_V2PortalCache = _Value;
}


Vec3 getLastSpawnPosition(CSmPlayer _Player) {
    declare Vec3 Net_LastSpawnPosition for _Player = <0., 0., 0.>;
    return Net_LastSpawnPosition;
}

Void setLastSpawnPosition(CSmPlayer _Player, Vec3 _Value) {
    declare Vec3 Net_LastSpawnPosition for _Player = <0., 0., 0.>;
    Net_LastSpawnPosition = _Value;
}

Ident getLastCheckpoint(CSmPlayer _Player) {
    declare Ident[] LastCheckpointsIds for _Player;
    declare netwrite Text[] LastCheckpointsIdsStr for _Player;

    if (getCpProgress(_Player) == 0) {
        LastCheckpointsIds.clear();
        LastCheckpointsIdsStr.clear();
        return NullId;
    }

    if (LastCheckpointsIds.count == 0) {
        return NullId;
    }

    return LastCheckpointsIds[LastCheckpointsIds.count-1];
}

Void setLastCheckpoint(CSmPlayer _Player, Ident _Value) {
    declare Ident[] LastCheckpointsIds for _Player;
    declare netwrite Text[] LastCheckpointsIdsStr for _Player;
    declare netwrite Integer[] PreviousCheckpointsOrder for _Player;

    if (_Value != NullId) {
        LastCheckpointsIds.add(_Value);
        LastCheckpointsIdsStr.add(_Value^"");

        if (MapLandmarks[_Value].Order < 0) {
            PreviousCheckpointsOrder.add(MapLandmarks[_Value].Order);
        }
    }
    else {
        LastCheckpointsIds.clear();
        LastCheckpointsIdsStr.clear();
        PreviousCheckpointsOrder.clear();
    }
}

Integer[] getPreviousCheckpointsOrder(CSmPlayer _Player) {
    declare netwrite Integer[] PreviousCheckpointsOrder for _Player;
    return PreviousCheckpointsOrder;
}

Integer[Text] getBuffTimes(CSmPlayer _Player) {
    declare netwrite Integer[Text] ItemBuffTimes for _Player = [];
    return ItemBuffTimes;
}

Void setBuffTime(CSmPlayer _Player, Text _Key, Integer _Value) {
    declare netwrite Integer[Text] ItemBuffTimes for _Player = [];
    ItemBuffTimes[_Key] = _Value;

}

Void clearBuffTimes(CSmPlayer _Player) {
    declare netwrite Integer[Text] ItemBuffTimes for _Player = [];
    ItemBuffTimes.clear();

    declare Integer[Ident] ItemsActiveCooldowns for _Player = [];
    ItemsActiveCooldowns.clear();
}

Integer getBestRun(CSmPlayer _Player) {
    declare Integer BestRun for _Player.Score;
    return BestRun;
}

Integer getBestRun(CSmScore _Score) {
    declare Integer BestRun for _Score;
    return BestRun;
}

Void setBestRun(CSmPlayer _Player, Integer _Value) {
    declare Integer BestRun for _Player.Score;
    BestRun = _Value;
}

Integer getLastRunS(CSmScore _Score) {
    declare Integer LastRun for _Score;
    return LastRun;
}

Integer getLastRun(CSmPlayer _Player) {
    declare Integer LastRun for _Player.Score;
    return LastRun;
}

Void setLastRun(CSmPlayer _Player, Integer _Value) {
    declare Integer LastRun for _Player.Score;
    LastRun = _Value;
}

Integer getRespawnCount(CSmPlayer _Player) {
    declare Integer RespawnCount for _Player.Score;
    return RespawnCount;
}

Void setRespawnCount(CSmPlayer _Player, Integer _Value) {
    declare Integer RespawnCount for _Player.Score;
    RespawnCount = _Value;
}

Void incrementRespawnCount(CSmPlayer _Player) {
    declare Integer RespawnCount for _Player.Score;
    RespawnCount += 1;
}

Integer[Ident] getBestCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeBest for _Player.Score;
    return CheckpointsTimeBest;
}

Void setBestCPTimes(CSmPlayer _Player, Integer[Ident] _Value) {
    declare Integer[Ident] CheckpointsTimeBest for _Player.Score;
    CheckpointsTimeBest = _Value;
}

Void clearBestCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeBest for _Player.Score;
    CheckpointsTimeBest.clear();
}

Integer getBestTime(CSmPlayer _Player, Ident _Ident) {
    declare BestTimes = getBestCPTimes(_Player);
    if (BestTimes.existskey(_Ident))
        return BestTimes[_Ident];
    return -1;
}

Integer[Ident] getLastCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;
    return CheckpointsTimeLast;
}

Integer[Ident] getLastCPTimes(CSmScore _Score) {
    declare Integer[Ident] CheckpointsTimeLast for _Score;
    return CheckpointsTimeLast;
}

Void setLastCPTimes(CSmPlayer _Player, Ident _Key, Integer _Value) {
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;
    CheckpointsTimeLast[_Key] = _Value;
}

Void clearLastCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;
    CheckpointsTimeLast.clear();
}

Void saveLastLegitPosition(CSmPlayer _Player) {
    if (!usedJump(_Player)) {
        declare Ident Save_LastCheckpoint for _Player;
        declare Boolean Save_UsedRSBug for _Player;
        declare Boolean Save_UsedAltGlitch for _Player;
        declare Boolean Save_UsedPvPWeapons for _Player;
        declare Boolean Save_UsedPvPCollisions for _Player;
        declare Boolean Save_UsedSpeedHack for _Player;
        declare Integer Save_CpProgress for _Player;
        declare Ident Save_V2PortalCache for _Player;

        Save_LastCheckpoint = getLastCheckpoint(_Player);
        Save_UsedRSBug = usedRSBug(_Player);
        Save_UsedAltGlitch = usedAltGlitch(_Player);
        Save_UsedPvPWeapons = usedPvPWeapons(_Player);
        Save_UsedPvPCollisions = usedPvPCollisions(_Player);
        Save_UsedSpeedHack = usedSpeedHack(_Player);
        Save_CpProgress = getCpProgress(_Player);
        Save_V2PortalCache = getV2PortalCache(_Player);
        
        declare Ident[] LastCheckpointsIds for _Player;
        declare netwrite Text[] LastCheckpointsIdsStr for _Player;
        declare netwrite Integer[] PreviousCheckpointsOrder for _Player;
        declare Integer[Ident] CheckpointsTimeLast for _Player.Score;

        declare Ident[] Save_LastCheckpointsIds for _Player;
        declare Text[] Save_LastCheckpointsIdsStr for _Player;
        declare Integer[] Save_PreviousCheckpointsOrder for _Player;
        declare Integer[Ident] Save_CheckpointsTimeLast for _Player;

        Save_LastCheckpointsIds = LastCheckpointsIds;
        Save_LastCheckpointsIdsStr = LastCheckpointsIdsStr;
        Save_PreviousCheckpointsOrder = PreviousCheckpointsOrder;
        Save_CheckpointsTimeLast = CheckpointsTimeLast;
    }
}

Void setUsedJump(CSmPlayer _Player, Boolean _Value) {
    saveLastLegitPosition(_Player);

    declare netwrite Boolean Net_UsedJump for _Player = False;
    Net_UsedJump = _Value;
}

Ident loadLastLegitPosition(CSmPlayer _Player) {
    declare Ident Save_LastCheckpoint for _Player = NullId;
    declare Boolean Save_UsedRSBug for _Player = False;
    declare Boolean Save_UsedAltGlitch for _Player = False;
    declare Boolean Save_UsedPvPWeapons for _Player = False;
    declare Boolean Save_UsedPvPCollisions for _Player = False;
    declare Boolean Save_UsedSpeedHack for _Player = False;
    declare Integer Save_CpProgress for _Player = -1;
    declare Ident Save_V2PortalCache for _Player = NullId;

    setLastCheckpoint(_Player, Save_LastCheckpoint);
    setUsedRSBug(_Player, Save_UsedRSBug);
    setUsedAltGlitch(_Player, Save_UsedAltGlitch);
    setUsedPvPWeapons(_Player, Save_UsedPvPWeapons);
    setUsedPvPCollisions(_Player, Save_UsedPvPCollisions);
    setUsedSpeedHack(_Player, Save_UsedSpeedHack);
    setCpProgress(_Player, Save_CpProgress);
    setUsedJump(_Player, False);
    setV2PortalCache(_Player, Save_V2PortalCache);
    
    declare Ident[] LastCheckpointsIds for _Player;
    declare netwrite Text[] LastCheckpointsIdsStr for _Player;
    declare netwrite Integer[] PreviousCheckpointsOrder for _Player;
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;

    declare Ident[] Save_LastCheckpointsIds for _Player;
    declare Text[] Save_LastCheckpointsIdsStr for _Player;
    declare Integer[] Save_PreviousCheckpointsOrder for _Player;
    declare Integer[Ident] Save_CheckpointsTimeLast for _Player;

    LastCheckpointsIds = Save_LastCheckpointsIds;
    LastCheckpointsIdsStr = Save_LastCheckpointsIdsStr;
    PreviousCheckpointsOrder = Save_PreviousCheckpointsOrder;
    CheckpointsTimeLast = Save_CheckpointsTimeLast;

    if (Save_V2PortalCache != NullId)
        return Save_V2PortalCache;

    return Save_LastCheckpoint;
}

// Declare player's variable
Void InitPlayer(CSmPlayer _Player) {
    if (_Player == Null || isInitialized(_Player)) return;

    Dialogs::ShowActiveDialogsTo(_Player);

    setTimeInLb(_Player, -1);
    setHasWrongLbLine(_Player, False);
    setHasInitPb(_Player, False);
    setInitialized(_Player, True);
    setStartTime(_Player, 0);
    setCpProgress(_Player, 0);
    setLastCheckpoint(_Player, NullId);
    clearBuffTimes(_Player);

    setUsedJump(_Player, False);
    setUsedRSBug(_Player, False);
    setUsedAltGlitch(_Player, False);
    setUsedPvPWeapons(_Player, UsePvPWeapons);
    setUsedPvPCollisions(_Player, UsePvPCollisions);
    setUsedSpeedHack(_Player, False);
    setV2PortalCache(_Player, NullId);

    setBestRun(_Player, -1);
    setLastRun(_Player, -1);
    setRespawnCount(_Player, 0);
    clearBestCPTimes(_Player);
    clearLastCPTimes(_Player);

    _Player.Score.RoundPoints = 0;
    _Player.Score.Points = 0;
}

Boolean wantsRestart(CSmPlayer _Player, Boolean _GiveUp) {
    declare UI <=> UIManager.GetUI(_Player);
    if (UI == Null)
        return False;

    declare netread Net_RespawnBehavior for UI = Constants::C_RespawnBehavior_Normal;

    if (Net_RespawnBehavior == Constants::C_RespawnBehavior_FullLocked)
        return False;

    return (Net_RespawnBehavior == Constants::C_RespawnBehavior_FullRestart || _GiveUp);
}

Integer getTime(CSmPlayer _Player) {
    return Now - getStartTime(_Player);
}




Text Private_CPTimesToJSON(Integer[Ident] _Times) {
    declare res = "{";
    declare i = 0;
    foreach (CPId => CPTime in _Times) {
        res ^= """ "{{{Json::GetInteger(RNG::GetOrder(MapLandmarks[CPId]))}}}" : {{{Json::GetInteger(CPTime)}}}""";

        if (i < _Times.count-1)
            res ^= ",";
        i += 1;
    }
    return res^"}";
}

Text ToJSON(CSmPlayer _Player) {
    return """
    {
        "Player" : {
            "Login" : {{{Json::GetText(_Player.User.Login)}}},
                "Name" : {{{Json::GetText(_Player.User.Name)}}}
        },
            "Run" : {
                "Time" : {{{Json::GetInteger(getTime(_Player))}}},
                "RespawnCount" : {{{Json::GetInteger(getRespawnCount(_Player))}}},
                "LastRun" : {{{Json::GetInteger(getLastRun(_Player))}}},
                "BestRun" : {{{Json::GetInteger(getBestRun(_Player))}}},
                "LastCheckpoinId" : {{{Json::GetIdent(getLastCheckpoint(_Player))}}},
                "CpProgess" : {{{Json::GetInteger(getCpProgress(_Player))}}},
                "LastCPTimes" : {{{Private_CPTimesToJSON(getLastCPTimes(_Player))}}},
                "BestCPTimes" : {{{Private_CPTimesToJSON(getBestCPTimes(_Player))}}},
                "UsedJump" : {{{Json::GetBoolean(usedJump(_Player))}}},
                "UsedRSBug" : {{{Json::GetBoolean(usedRSBug(_Player))}}},
                "UsedAltGlitch" : {{{Json::GetBoolean(usedAltGlitch(_Player))}}},
                "UsedPvPWeapons" : {{{Json::GetBoolean(usedPvPWeapons(_Player))}}},
                "UsedPvPCollisions" : {{{Json::GetBoolean(usedPvPCollisions(_Player))}}}
            }
    }""";
}
