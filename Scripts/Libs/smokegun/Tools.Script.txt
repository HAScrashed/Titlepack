/************************************************
*   Obstacle Library                            *
*   Author:     smokegun                        *
*                                               *
*   Utility functions.                          *
************************************************/

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/miltant/Nadeo_Fork/ShootMania/Map.Script.txt" as Map
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/miltant/Randomizer.Script.txt" as RNG

/***************************************
    CONSTANTS
***************************************/

#Const  Version     "2021-07-11"
#Const  ScriptName  "Tools.Script.txt"


/***************************************
    FUNCTIONS
***************************************/

Text GetPos(Vec3 _Pos) {
    return _Pos.X^" "^_Pos.Y^" "^_Pos.Z;
}

Text GetPos(Vec2 _Pos) {
    return _Pos.X^" "^_Pos.Y;
}

Boolean Private_IsEnabled(CSmMapLandmark _Landmark) {
    if (Map::GetMapTypeVersion() <= 2) {
        return _Landmark.Tag != "No-Function";
    }

    declare metadata Meta_Enabled for _Landmark = True;
    return Meta_Enabled;
}

Boolean IsGoal(CSmMapLandmark _Landmark) {
    if (!RNG::IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return _Landmark.Tag == "Goal";

    declare metadata Meta_CPType for _Landmark = 0;
    return _Landmark.Tag == "Goal" || Meta_CPType == 2;
}

Boolean IsACandidateGoal(CSmMapLandmark _Landmark) {
    if (!Private_IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return _Landmark.Tag == "Goal";

    declare metadata Meta_CPType for _Landmark = 0;
    return _Landmark.Tag == "Goal" || Meta_CPType == 2;
}

Boolean IsSpawn(CSmMapLandmark _Landmark) {
    if (!RNG::IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return TextLib::SubString(_Landmark.Tag, 0, 5) == "Spawn";
    declare metadata Meta_IsCpSpawn for _Landmark = False;
    return !Meta_IsCpSpawn && TextLib::SubString(_Landmark.Tag, 0, 7) != "CPSpawn";
}

Boolean IsACandidateSpawn(CSmMapLandmark _Landmark) {
    if (!Private_IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return TextLib::SubString(_Landmark.Tag, 0, 5) == "Spawn";
    declare metadata Meta_IsCpSpawn for _Landmark = False;
    return !Meta_IsCpSpawn && TextLib::SubString(_Landmark.Tag, 0, 7) != "CPSpawn";
}

Boolean IsCheckpoint(CSmMapLandmark _Landmark) {
    if (!RNG::IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return "Checkpoint" == TextLib::SubText(_Landmark.Tag, 0, 10);

    declare metadata Meta_CPType for _Landmark = 0;
    return _Landmark.Tag == "Checkpoint"
           && (Meta_CPType == 0 || Meta_CPType == 1);
}

Boolean IsPortal(CSmMapLandmark _Landmark) {
    if (!RNG::IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return _Landmark.Tag == "Portal" || _Landmark.Tag == "CheckpointType3";
    declare metadata Meta_IsPortal for _Landmark = False;
    return Meta_IsPortal;
}

Boolean IsCpSpawn(CSmMapLandmark _Landmark) {
    if (!RNG::IsEnabled(_Landmark))
        return False;

    if (Map::GetMapTypeVersion() <= 2)
        return _Landmark.Tag == "CPSpawn";
    declare metadata Meta_IsCpSpawn for _Landmark = False;
    return Meta_IsCpSpawn || TextLib::SubString(_Landmark.Tag, 0, 7) == "CPSpawn";
}

Integer[] FindMissingNumbers(Integer[Integer] CPCounts) {
    declare Integer[] MissingNumbers;

    for (Order, 1, CPCounts.count) {
        if (!CPCounts.existskey(Order)) {
            MissingNumbers.add(Order);
        }
    }

    return MissingNumbers;
}

Integer GetWeaponTypeFromSpawn(CSmMapLandmark SpawnLandmark) {
    declare WeaponType = 0;
    declare SpawnName = SpawnLandmark.Tag;
    if (TextLib::Length(SpawnName) > 5) {
        WeaponType = TextLib::ToInteger(TextLib::SubString(SpawnName, 9, 1));
    }
    return WeaponType;
}

Ident Private_GetClosestSpawn(Ident _CheckPointId, Ident[] _SpawnIds) {
    declare Checkpoint <=> MapLandmarks[_CheckPointId];
    declare ClosestSpawn = NullId;
    declare ClosestDistance = -1.0;

    foreach (Id in _SpawnIds) {
        if (!MapLandmarks_PlayerSpawn.existskey(Id))
            continue;

        declare Spawn <=> MapLandmarks_PlayerSpawn[Id];
        declare Distance = MathLib::Distance(Checkpoint.Position, Spawn.Position);

        if (Distance < ClosestDistance || ClosestDistance < 0) {
            ClosestDistance = Distance;
            ClosestSpawn = Spawn.Id;
        }
    }

    return ClosestSpawn;
}

Ident GetClosestSpawn(Ident _CheckPointId, Integer _PlayerCPProgress) {
    declare Checkpoint <=> MapLandmarks[_CheckPointId];
    declare Ident[] SpawnIds = [];

    if (RNG::GetOrder(Checkpoint) > 0) {
        foreach (Spawn in MapLandmarks_PlayerSpawn) {
            if (IsCpSpawn(Spawn) && (RNG::GetOrder(Checkpoint) == RNG::GetOrder(Spawn)))
                SpawnIds.add(Spawn.Id);
        }

        if (SpawnIds.count > 0)
            return Private_GetClosestSpawn(_CheckPointId, SpawnIds);
    }

    // If there is no spawn for the current checkpoint
    // Search for previous spawns
    declare Ident[][Integer] SpawnIdsByOrder;
    declare ActualCPProgress = MathLib::Max(_PlayerCPProgress, 0);

    foreach (Spawn in MapLandmarks_PlayerSpawn) {
        declare Order = RNG::GetOrder(Spawn);
        if (IsCpSpawn(Spawn) && ActualCPProgress >= Order) {
            if (SpawnIdsByOrder.existskey(Order))
                SpawnIdsByOrder[Order].add(Spawn.Id);
            else
                SpawnIdsByOrder[Order] = [Spawn.Id];
        }
    }

    declare Max = -1;
    foreach (Order => _S in SpawnIdsByOrder) {
        if (Order > Max)
            Max = Order;
    }

    if (Max == -1)
        return NullId;
    
    return Private_GetClosestSpawn(_CheckPointId, SpawnIdsByOrder[Max]);
}

Integer GetPlayerRank(CSmPlayer _Player) {
    declare LastCheckpointId = Player::getLastCheckpoint(_Player);
    declare BestRun for _Player.Score = -1;
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score = [];
    declare Integer[Ident] Ranking = [];

    // Player is finishing a run
    if (CheckpointsTimeLast.count == 0) {

        // Fill ranking with every player who has finished the map
        foreach (Score in Scores) {
            declare BestRun for Score = -1;
            if (BestRun < 0) continue;
            Ranking[Score.User.Id] = BestRun;
        }

    // Player has taken a checkpoint
    } else {

        // Fill ranking with every player who has best time at last checkpoint
        foreach (Score in Scores) {
            declare Integer[Ident] CheckpointsTimeBest for Score = [];
            if (!CheckpointsTimeBest.existskey(LastCheckpointId)) continue;
            Ranking[Score.User.Id] = CheckpointsTimeBest[LastCheckpointId];
        }
    }

    if (Ranking.count == 0) {
        return 0;
    }

    // Rank players by time
    Ranking = Ranking.sort();


    declare Rank = 1;
    // Get final rank
    foreach (UserId => Time in Ranking) {
        if (UserId == _Player.User.Id) break;
        Rank += 1;
    }

    return Rank;
}

Text TimeLimitToText(Integer _TimeLimit)
{
    if (_TimeLimit < 0) {
        return "Unlimited";
    }
    declare H = _TimeLimit / 60;
    declare M = _TimeLimit % 60;
    declare HH = ""^H;
    if (H < 10) {
        HH = "0" ^ HH;
    }
    declare MM = ""^M;
    if (M < 10) {
        MM = "0" ^ MM;
    }
    return HH^":"^MM;
}
