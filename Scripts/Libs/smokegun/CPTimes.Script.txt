#Include "Libs/miltant/Nadeo_Fork/Log.Script.txt" as Log
#Include "Libs/smokegun/Player.Script.txt" as Player

/*************************
    CONSTANTS
*************************/

#Const  Version     "2021-07-11"
#Const  ScriptName  "CPTimes.Script.txt"

/*************************
    GLOBALES
*************************/

#Struct SCPTotalTime {
    Text Login;
    Text Nickname;
    Integer Time;
}

#Struct SCPDeltaTime {
    Text Login;
    Text Nickname;
    Integer Time;
}

Text Private_GetWidget() {
    return """
<frame id="Frame_CPTimes" hidden="1">
	<frame id="Frame_Heading">
		<frame id="Frame_Selector">
			<label id="Label_Selector_Total" pos="-83 44" size="15 7" text="Total" textcolor="FFFFFFFF" maxline="1" halign="center" textfont="Oswald" textsize="3" style="TextTitle3" textemboss="1" valign="center2" scriptevents="1"/>
			<label id="Label_Selector_Delta" pos="-67 44" size="15 7" text="Delta" textcolor="FFFFFFFF" maxline="1" halign="center" textfont="Oswald" textsize="3" style="TextTitle3" textemboss="1" valign="center2" scriptevents="1"/>
			<quad id="Quad_Selector" pos="-82.5 44.5" z-index="0" size="14 6" bgcolor="FFFFFF33" halign="center" valign="center"/>
			<quad pos="-90 48" z-index="0" size="30 7" bgcolor="000000AA"/>
		</frame>
        <frame id="Frame_CPTimes_Reset" pos="72 45">
            <label pos="0 0" size="30 7" text="Reset my times" textcolor="FFFFFFFF" maxline="1" halign="center" textfont="Oswald" textsize="3" style="TextTitle3" textemboss="1" valign="center" />
			<quad id="Label_CPTimes_Reset" halign="center" valign="center" z-index="0" size="30 7" style="BgRaceScore2" substyle="BgCardPlayer" scriptevents="1" />
        </frame>
		<label pos="0 39" size="100 10" text="Checkpoints Times" textcolor="FFFFFFFF" maxline="1" halign="center" valign="bottom" textfont="Oswald" textsize="9" style="TextTitle3" textemboss="1"/>
		<quad pos="0 40" z-index="-1" size="220 0.5" bgcolor="000000AA" halign="center"/>
	</frame>
	<frame pos="0 35" id="Frame_Checkpoints">
		<frameinstance modelid="cp" pos="-70"/>
		<frameinstance modelid="cp"/>
		<frameinstance modelid="cp" pos="70"/>
		<frameinstance modelid="cp" pos="-70 -40"/>
		<frameinstance modelid="cp" pos="0 -40"/>
		<frameinstance modelid="cp" pos="70 -40"/>
	</frame>
	<frame id="Frame_Footer">
		<quad pos="0 -50" size="5 5" style="Icons64x64_1" substyle="ArrowNext" valign="bottom" scriptevents="1" halign="left" id="next_button"/>
		<quad pos="0 -50" size="5 5" style="Icons64x64_1" substyle="ArrowPrev" valign="bottom" scriptevents="1" halign="right" id="prev_button"/>
	</frame>
	<frame id="Frame_Background">
		<quad z-index="-1" size="220 100" bgcolor="000000FF" halign="center" valign="center"  opacity="0.5" pos="0 0"/>
		<quad pos="0 40" z-index="-1" size="220 85" bgcolor="000000AA" halign="center" valign="top"/>
	</frame>
</frame>
<framemodel id="cp">
	<label pos="0 -5" z-index="0" size="60 5" text="63" halign="center" valign="bottom" textprefix="CP " id="title" style="CardButtonMediumXXL" scriptevents="1"/>
	<frame id="Frame_Records">
		<frameinstance modelid="cp_time" pos="0 -5"/>
		<frameinstance modelid="cp_time" pos="0 -10"/>
		<frameinstance modelid="cp_time" pos="0 -15"/>
		<frameinstance modelid="cp_time" pos="0 -20"/>
		<frameinstance modelid="cp_time" pos="0 -25"/>
		<frameinstance modelid="cp_time" pos="0 -30"/>
	</frame>
	<quad pos="0 -5" z-index="0" size="60 30" bgcolor="FFFFFFFF"  halign="center" opacity="0.1"/>
</framemodel>
<framemodel id="cp_time">
	<label pos="-28 -2.5" z-index="0" size="4 5" text="1." textsize="2" valign="center2" halign="center" id="rank" textfont="OswaldMono"/>
	<label pos="-8.5 -2.5" z-index="0" size="35 5" text="superpseudodelamortsuperlong" halign="center" valign="center2" textsize="2" id="name" textfont="Oswald"/>
	<label pos="19.5 -2.5" z-index="0" size="21 5" text="00:00:00:00" halign="center" valign="center2" textsize="2" id="time" textfont="OswaldMono"/>
</framemodel>    """;
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:CPTimes">
    <frame>
        {{{Private_GetWidget()}}}
    </frame>
    <script><!--
        #Include "TextLib" as TL

        #Struct SCPTotalTime {
            Text Login;
            Text Nickname;
            Integer Time;
        }

        #Struct SCPDeltaTime {
            Text Login;
            Text Nickname;
            Integer Time;
        }

        declare Integer G_CheckpointsTotal;
        declare Integer G_PageNb;
        declare Boolean G_DisplayTotal;

        declare SCPTotalTime[][] G_CPTotalTimes;
        declare SCPDeltaTime[][] G_CPDeltaTimes;

        Void UpdateFrameTab(CUIConfig UI, CMlPage Page, Text TabKey, Text FrameTabId)
        {
            declare netread Boolean _TabsLib_UseTabs for UI;
            if (! _TabsLib_UseTabs) return;

            declare Boolean _TabsLib_ScoresLayerIsVisible   for UI;
            declare Boolean _TabsLib_AltLayerIsVisible      for UI;
            declare Text    _TabsLib_CurrentTab             for UI;
            declare netread Text _TabsLib_ScoresTableTab    for UI;

            declare Boolean ShowCurrentTab = _TabsLib_AltLayerIsVisible && (_TabsLib_CurrentTab == TabKey);

            if (TabKey == _TabsLib_ScoresTableTab)
            {
                // log("_TabsLib_ScoresTableTab: "^_TabsLib_ScoresTableTab);
                ShowCurrentTab = _TabsLib_ScoresLayerIsVisible ||
                    (_TabsLib_AltLayerIsVisible && (_TabsLib_CurrentTab == _TabsLib_ScoresTableTab));
            }

            declare MainFrame <=> (Page.GetFirstChild(FrameTabId) as CMlFrame);
            if (MainFrame == Null) return;

            if (ShowCurrentTab) {
                MainFrame.Show();
            } else {
                MainFrame.Hide();
            }
        }

        Void ChangePage(Integer dir) {
            declare first_cp_number = (G_PageNb+dir)*6 + 1;
            if (first_cp_number < 0 || first_cp_number > G_CheckpointsTotal) return;

            G_PageNb += dir;

            declare frame = (Page.GetFirstChild("Frame_Checkpoints") as CMlFrame);

            foreach (CheckpointId => Control in frame.Controls) {
                declare cp_number = first_cp_number + CheckpointId;

                // Hide checkpoints that doesnt exist
                if (cp_number > G_CheckpointsTotal) {
                    Control.Hide();
                    continue;
                }

                // Update values
                declare checkpoint = (Control as CMlFrame);
                declare records = (checkpoint.GetFirstChild("Frame_Records") as CMlFrame);
                declare title = (checkpoint.GetFirstChild("title") as CMlLabel);

                // Set checkpoints number or goal
                if (cp_number == G_CheckpointsTotal)
                    title.SetText("Goal");
                else
                    title.SetText(""^cp_number);

                declare Cp_Number for title = "";
                Cp_Number = title.Value;

                // Update times
                foreach (RecordId => ControlR in records.Controls) {
                    declare record = (ControlR as CMlFrame);
                    declare rank = (record.GetFirstChild("rank") as CMlLabel);
                    declare name = (record.GetFirstChild("name") as CMlLabel);
                    declare time = (record.GetFirstChild("time") as CMlLabel);

                    if (G_DisplayTotal)
                    {
                        if (RecordId < G_CPTotalTimes[cp_number-1].count) {
                            // CP1 is at the index 0
                            rank.SetText((RecordId+1)^".");
                            declare Name = G_CPTotalTimes[cp_number-1][RecordId].Nickname;
                            declare Time = G_CPTotalTimes[cp_number-1][RecordId].Time;

                            name.SetText(Name);
                            time.SetText(TL::TimeToText(Time, True));

                            record.Show();
                        } else {
                            record.Hide();
                        }
                    }
                    else
                    {
                        if (RecordId < G_CPDeltaTimes[cp_number-1].count) {
                            // CP1 is at the index 0
                            rank.SetText((RecordId+1)^".");
                            declare Name = G_CPDeltaTimes[cp_number-1][RecordId].Nickname;
                            declare Time = G_CPDeltaTimes[cp_number-1][RecordId].Time;

                            name.SetText(Name);
                            time.SetText(TL::TimeToText(Time, True));

                            record.Show();
                        } else {
                            record.Hide();
                        }
                    }
                }

                Control.Show();
            }

            declare Quad_Selector = (Page.GetFirstChild("Quad_Selector") as CMlQuad);
            declare X = -82.5;
            if (!G_DisplayTotal) {
               X += 15;
            }

            if (Quad_Selector.RelativePosition_V3.X != X) {
               Quad_Selector.RelativePosition_V3.X = X;
           }
       }

        main() {
            declare LastUpdate = -1;
            declare LastTimesUpdate = -1;
            G_DisplayTotal = True;

            while (True) {
                yield;

                UpdateFrameTab(UI, Page, "CPTimes", "Frame_CPTimes");

                foreach (Event in PendingEvents) {
                    switch(Event.Type) {
                        case CMlScriptEvent::Type::MouseOver: {
                            if (Event.Control.ControlId == "title") {
                                declare title = (Event.Control as CMlLabel);
                                title.SetText("JUMP");
                            }
                        }
                        case CMlScriptEvent::Type::MouseOut: {
                            if (Event.Control.ControlId == "title") {
                                declare title = (Event.Control as CMlLabel);
                                declare Cp_Number for title = "";
                                title.SetText(Cp_Number);
                            }
                        }
                        case CMlScriptEvent::Type::MouseClick: {
                            switch(Event.Control.ControlId) {
                                case "Label_Selector_Total": {
                                     G_DisplayTotal = True;
                                     ChangePage(0);
                                }
                                case "Label_Selector_Delta": {
                                     G_DisplayTotal = False;
                                     ChangePage(0);
                                }
                                case "title": {
                                    declare Cp_Number for Event.Control = "";
                                    SendCustomEvent("jump_request", [LocalUser.Login, Cp_Number]);
                                }
                                case "next_button": {
                                    ChangePage(1);
                                }
                                case "prev_button": {
                                    ChangePage(-1);
                                }
                                case "Label_CPTimes_Reset": {
                                    SendCustomEvent("cpstimes:reset", [LocalUser.Login]);
                                }
                            }
                        }
                    }
                }

                if (LastUpdate + 500 < GameTime) {

                    // It may be a new map
                    declare netread Integer Net_CheckpointsTotal for Teams[0];
                    if (G_CheckpointsTotal != Net_CheckpointsTotal + 1) {
                        G_CheckpointsTotal = Net_CheckpointsTotal + 1;
                    }

                    declare netread Net_CPTimesUpdated for Teams[0] = -1;
                    if (Net_CPTimesUpdated != LastTimesUpdate) {
                        LastTimesUpdate = Net_CPTimesUpdated;

                        declare netread SCPTotalTime[][] Net_CPTotalTimes for Teams[0];
                        declare netread SCPDeltaTime[][] Net_CPDeltaTimes for Teams[0];

                        G_CPTotalTimes = Net_CPTotalTimes;
                        G_CPDeltaTimes = Net_CPDeltaTimes;

                        ChangePage(0);
                    }

                    LastUpdate = GameTime;
                }
            }
        }
    --></script>
</manialink>
    """;
}

Void ResetLayer(CSmPlayer _Player, Integer _CpsNumber) {
    declare netwrite SCPTotalTime[][] Net_CPTotalTimes for Teams[0];
    declare netwrite SCPDeltaTime[][] Net_CPDeltaTimes for Teams[0];

    for (I, 0, _CpsNumber) {
        // Remove line from total times
        declare ToRemove = -1;
        foreach (iCPTime => CPTime in Net_CPTotalTimes[I]) {
            if (CPTime.Login == _Player.User.Login) {
                ToRemove = iCPTime;
            }
        }
        if (ToRemove >= 0) {
            declare Removed = Net_CPTotalTimes[I].removekey(ToRemove);
        }

        // Remove line from delta times
        ToRemove = -1;
        foreach (iCPTime => CPTime in Net_CPDeltaTimes[I]) {
            if (CPTime.Login == _Player.User.Login) {
                ToRemove = iCPTime;
            }
        }
        if (ToRemove >= 0) {
            declare Removed = Net_CPDeltaTimes[I].removekey(ToRemove);
        }
    }

    declare netwrite Integer Net_CPTimesUpdated for Teams[0] = 0;
    Net_CPTimesUpdated = Now;
}

Void UpdateLayer(CSmPlayer _Player) {
    declare TimeToSub = 0;
    declare LastCPTimes = Player::getBestCPTimes(_Player);

    declare netwrite SCPTotalTime[][] Net_CPTotalTimes for Teams[0];
    declare netwrite SCPDeltaTime[][] Net_CPDeltaTimes for Teams[0];

    // Make sure times are sorted to get the right cp order
    // But they should be automatically sorted in theory
    LastCPTimes = LastCPTimes.sort();

    declare Login = _Player.User.Login;
    declare Nickname = _Player.User.Name;

    declare iLastCp = 0;
    foreach (LastCPTime in LastCPTimes) {
        declare Time = LastCPTime;
        declare Delta = LastCPTime - TimeToSub;

        // Remove previous time if it exists
        {
            declare ToRemove = -1;
            foreach (iCPTimes => CPTime in Net_CPTotalTimes[iLastCp]) {
                if (CPTime.Login == _Player.User.Login) {
                    ToRemove = iCPTimes;
                    break;
                }
            }
            if (ToRemove >= 0) {
                declare Removed = Net_CPTotalTimes[iLastCp].removekey(ToRemove);
            }

            ToRemove = -1;
            foreach (iCPTimes => CPTime in Net_CPDeltaTimes[iLastCp]) {
                if (CPTime.Login == _Player.User.Login) {
                    ToRemove = iCPTimes;
                    break;
                }
            }
            if (ToRemove >= 0) {
                declare Removed = Net_CPDeltaTimes[iLastCp].removekey(ToRemove);
            }
        }

        // Update total times array
        {
            declare rank = 0;
            while (rank < Net_CPTotalTimes[iLastCp].count && Net_CPTotalTimes[iLastCp][rank].Time < Time) {
                rank += 1;
            }

            if (rank > 5) return;

            declare SCPTotalTime TotalTime;
            TotalTime.Login = Login;
            TotalTime.Nickname = Nickname;
            TotalTime.Time = Time;

            // Add the cp time at the end
            if (Net_CPTotalTimes[iLastCp].count < 6) {
                Net_CPTotalTimes[iLastCp].add(TotalTime);
            } else {
                Net_CPTotalTimes[iLastCp][5] = TotalTime;
            }

            // And move it to the desired rank
            declare i = Net_CPTotalTimes[iLastCp].count - 1;
            while (i > 0 && i > rank) {
                declare tmp = Net_CPTotalTimes[iLastCp][i];
                Net_CPTotalTimes[iLastCp][i] = Net_CPTotalTimes[iLastCp][i-1];
                Net_CPTotalTimes[iLastCp][i-1] = tmp;
                i -= 1;
            }
        }

        // Update delta times array
        {
            declare rank = 0;
            while (rank < Net_CPDeltaTimes[iLastCp].count && Net_CPDeltaTimes[iLastCp][rank].Time < Delta) {
                rank += 1;
            }

            if (rank > 5) return;

            declare SCPDeltaTime DeltaTime;
            DeltaTime.Login = Login;
            DeltaTime.Nickname = Nickname;
            DeltaTime.Time = Delta;

            // Add the cp time at the end
            if (Net_CPDeltaTimes[iLastCp].count < 6) {
                Net_CPDeltaTimes[iLastCp].add(DeltaTime);
            } else {
                Net_CPDeltaTimes[iLastCp][5] = DeltaTime;
            }

            // And move it to the desired rank
            declare i = Net_CPDeltaTimes[iLastCp].count - 1;
            while (i > 0 && i > rank) {
                declare tmp = Net_CPDeltaTimes[iLastCp][i];
                Net_CPDeltaTimes[iLastCp][i] = Net_CPDeltaTimes[iLastCp][i-1];
                Net_CPDeltaTimes[iLastCp][i-1] = tmp;
                i -= 1;
            }
        }

        TimeToSub = Time;
        iLastCp += 1;

    }

    Log::Log("Total times");
    Log::Log(""^Net_CPTotalTimes);
    Log::Log("Delta times");
    Log::Log(""^Net_CPDeltaTimes);

    declare netwrite Integer Net_CPTimesUpdated for Teams[0] = 0;
    Net_CPTimesUpdated = Now;
}

Void StartMap(Integer _CheckpointsNb) {
    declare netwrite SCPTotalTime[][] Net_CPTotalTimes for Teams[0];
    declare netwrite SCPDeltaTime[][] Net_CPDeltaTimes for Teams[0];

    Net_CPTotalTimes.clear();
    Net_CPDeltaTimes.clear();

    for (i, 0, _CheckpointsNb) {
        Net_CPTotalTimes.add([]);
        Net_CPDeltaTimes.add([]);
    }


    // A clean
    declare netwrite Text[][] Net_CPTimes_RecordsName for Teams[0];
    declare netwrite Integer[][] Net_CPTimes_RecordsTime for Teams[0];

    Net_CPTimes_RecordsName.clear();
    Net_CPTimes_RecordsTime.clear();

    for (i, 0, _CheckpointsNb) {
        Net_CPTimes_RecordsName.add([]);
        Net_CPTimes_RecordsTime.add([]);
    }
    // End clean

    declare netwrite Integer Net_CPTimesUpdated for Teams[0] = 0;
    Net_CPTimesUpdated = Now;
}
