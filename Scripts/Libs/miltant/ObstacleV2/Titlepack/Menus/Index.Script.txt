#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Menus.Script.txt"                                 as Menus
#Include "Libs/miltant/ObstacleV2/Titlepack/Background/Index.Script.txt"                            as Background
#Include "Libs/miltant/Nadeo_Fork/MP4/TPLagoon/TokenManager.Script.txt"                             as Auth

#Include "Libs/miltant/Nadeo_Fork/MP4/TPLagoon/Components/Multiplayer/MultiplayerAPI2.Script.txt"    as MultiplayerAPI
#Include "Libs/miltant/Nadeo_Fork/MP4/TPLagoon/Components/Multiplayer/ChannelInfoStructs.Script.txt" as ChannelInfoStructs
#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/JoinServer/Index.Script.txt"	                 as ServerDialog

#Include "MathLib"	as ML

#Struct K { // K_ServerRecord
    Integer t; //time
    Text p; // password
    Text s; // spectating password
}



Void Load() {
	ServerDialog::Load();
    Background::Load();
    Menus::Load();
    Auth::Init();

    MultiplayerAPI::Load(True);
    MultiplayerAPI::FetchServerListAsync();
}

Void Loop() {
    Menus::Loop();
    Auth::Loop();

    declare Integer ObsStore_LastUpdate_TopServers for LocalUser;
	if (MultiplayerAPI::HasFetched()) {
		declare ChannelInfoStructs::K_ServerInfo[] ObsStore_TopServers for LocalUser;

		declare Servers = MultiplayerAPI::GetServersInfos();
		if (Servers.count > 0) {
			ObsStore_TopServers = Servers;
		}
        ObsStore_LastUpdate_TopServers = Now;
	} else if (Now - ObsStore_LastUpdate_TopServers > 20000 && !MultiplayerAPI::HasStartedFetch()) {
        MultiplayerAPI::FetchServerListAsync();
    }

    foreach (Event in PendingEvents) {
        if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
            if (Event.CustomEventType == "join_server" && Event.CustomEventData.count > 0) {
                declare Login = Event.CustomEventData[0];
                declare Text Password;
                declare Text SpectatingPassword;
                declare persistent K[Text] ObsStore_Servers for LocalUser;

                if (ObsStore_Servers.existskey(Login)) {
                    Password = ObsStore_Servers[Login].p;
                    SpectatingPassword = ObsStore_Servers[Login].s;
                }

                ServerDialog::Join(Login);
            }
        }
    }
}