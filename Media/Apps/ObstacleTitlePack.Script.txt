#RequireContext CManiaAppTitle

#Include "TextLib" as TL

#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Index.Script.txt"				as ObstacleController
#Include "Libs/miltant/ObstacleV2/Titlepack/Background/Index.Script.txt"		as Background
#Include "Libs/miltant/ObstacleV2/Titlepack/Store.Script.txt"   				as ObsStore
#Include "Libs/miltant/ObstacleV2/Titlepack/Dialogs/UI.Script.txt"   			as UI

#Include "Libs/ahmad3/Error.Script.txt" as Error
#Include "Libs/ahmad3/Ban.Script.txt" as Ban

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/smokegun/Constants.Script.Txt" as Constants

#Struct K_UpdatePlayerBody {
	Text login;
	Text name;
	Text zone_path;	
}

#Struct K_GetTokenBody {
	Text login;
	Text state;
	Text redirect_uri;
}

#Struct K_GetTokenResponse {
	Text token;
}

declare Boolean G_Errored;

Void LogMessage(Text _Msg) {
	log("[Obs Auth] " ^ _Msg);
}

Void LogError(Text _Msg) {
	LogMessage("ERROR: " ^_Msg);
}

Text Private_UpdateToken() {
	LogMessage("Updating token...");

	declare persistent ObsStore_UserToken for LocalUser = "";

	declare login = LocalUser.Login;
	declare Text state = login ^ Now;
	declare body = K_GetTokenBody {
		login = login,
		state = state,
		redirect_uri = Constants::C_MP_Redirect
	};

	declare warningDialog = UI::NewDialog("Authentication",
		UI::K_Message {
			Label = """We are about to refresh your personal tokens.

This procedure will open your browser to the
ManiaPlanet official page. You will only have to
authenticate with the same account as the
one you use in game."""
		}, [
			UI::K_Button {
				ControlId = "OK_Button",
				Label = "OK",
				Default = True
			}
		]
	);
	
	declare moveOn = False;
	while (!moveOn) {
		declare state = UI::Prompt(warningDialog, True);
		moveOn = state.Over && state.Success;
		yield;
	}

	declare req = Http.CreatePost(
		Constants::C_HostUrl ^ "player/get_token",
		body.tojson(),
		"Content-Type: application/json\nAccept: application/json");
		
	declare Link = Constants::C_MP_Link
		^ "client_id=" ^ Constants::C_MP_App_Id
		^ "&redirect_uri=" ^ Constants::C_MP_Redirect
		^ "&state=" ^ state
		^ "&scope=basic";
	OpenLink(Link, CManiaApp::ELinkType::ExternalBrowser);

	declare PendingDialog = UI::NewDialog("Welcome to Obstacle!",
		UI::K_Message {
			Label = "Please follow the instructions in your browser,\n"
			^ "or scan the  QR code bellow:"
		}, []
	);
	UI::Add(UI::K_Image {
		URL = "http://api.qrserver.com/v1/create-qr-code/?size=300x300&data=" ^ TL::URLEncode(Link) ^ "&.png",
		PlaceHolder = "(Click to load...)",
		Width = 50,
		Height = 50
	}, PendingDialog);

	while (!req.IsCompleted) {
		UI::Prompt(PendingDialog, True);
		yield;
	}
	UI::CloseDialog(PendingDialog);

	if (req.StatusCode != 200) {
		declare _err = Error::Handle(req.StatusCode, req.Result);
		UI::Notice_Async("API error",
			"""An error occurred.
To help the developers to debug, you can open the
console with Ctrl+G, then take a screenshot,
and send it to the $l[https://discord.gg/PfeBn98DyY]Obstacle Discord$z.
If this problem persists, please contact the Obstacle
developers (i.e. @ahmadbky or @miltant on discord)."""
		);
		G_Errored = True;
		return ObsStore_UserToken;
	}
	
	declare K_GetTokenResponse response;
	response.fromjson(req.Result);
	ObsStore_UserToken = response.token;

	LogMessage("Token updated!");

	return ObsStore_UserToken;
}

Ban::K_OptBanishment Private_UpdatePlayer(Text _Secret) {
	declare body = K_UpdatePlayerBody {
		login = LocalUser.Login,
		name = LocalUser.Name,
		zone_path = LocalUser.ZonePath
	};

	declare req = Http.CreatePost(
		Constants::C_HostUrl ^ "player/update",
		body.tojson(),
		"Content-Type: application/json\nAccept: application/json\nPlayerLogin: " ^ LocalUser.Login
		^ "\nAuthorization: " ^ _Secret ^ "\n");
	
	wait (req.IsCompleted);

	if (req.StatusCode == Error::C_HttpErr_Unauthorized && !G_Errored) {
		// updating token
		return Private_UpdatePlayer(Private_UpdateToken());
	} else if (req.StatusCode != 200) {
		return Error::Handle(req.StatusCode, req.Result).ban;
	}

	return Ban::Empty();
}

Boolean DetectOffline() {
	if (TL::Split("|", LocalUser.ZonePath).count == 0)
		return True;
	
	declare Req = Http.CreateGet("http://clients3.google.com/generate_204", False);
	declare Timestamp = Now;

	while (!Req.IsCompleted) {
		if (Now > Timestamp + 5000)
			return True;

		yield;
	}

	declare Offline = Req.StatusCode != 204 && Req.StatusCode != 200;
	Http.Destroy(Req);

	return Offline;
}

Void Greet() {
	G_Errored = False;

	declare persistent ObsStore_UserToken for LocalUser = "";

	if (ObsStore_UserToken == "") {
		declare WelcomeDialog = UI::NewDialog("Welcome to Obstacle!",
			UI::K_Message {
				Label = """Before we race on, let's take a quick pit stop: We're
upgrading our system to include browser-based
authentication via Maniaplanet services.

This quick step ensures that only you can set
records under your name.

We appreciate your understanding and support.
Let's race on!"""
			}, [
				UI::K_Button {
					ControlId = "OK_Button",
					Label = "Gear Up!",
					Default = True
				}
			]
		);
		
		declare MoveOn = False;

		while (!MoveOn) {
			declare DialogState = UI::Prompt(WelcomeDialog, True);
			MoveOn = DialogState.Over && DialogState.Success;
			
			yield;
		}
	}

	declare ban = Private_UpdatePlayer(ObsStore_UserToken);

	if (ban.isPresent) {
		declare BanDialog = UI::NewDialog("Account Banned",
			UI::K_Message {
				Label = """We're sorry, but it appears that your account
has been banned from Obstacle.

This may be due to violation of our community
standards, like cheating or offensive behavior.

If you believe this is a mistake or if you'd like
to appeal the decision, please contact our
support team on Discord."""
			}, [
				UI::K_Button {
					ControlId = "OK_Button",
					Label = "Understood",
					Default = True
				}
			]
		);

		declare MoveOn = False;

		while (!MoveOn) {
			declare DialogState = UI::Prompt(BanDialog, True);
			MoveOn = DialogState.Over;
			yield;
		}

		Menu_Quit();
		return;
	}
}

main() {
	Error::Init();
	if (!DetectOffline())
		Greet();
	
	ObsStore::Load();
	ObstacleController::Load();
	Background::Load();


	// declare CVideo[Text] ObsStore_Previews for LocalUser;
	// ObsStore_Previews.clear();

	while(True) {
		yield;
		
		UI::Loop();
		ObsStore::Loop();
		ObstacleController::Loop();
	}
}