/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Banishment types
 ************************************************/

#Struct K_Banishment {
    Integer id;
    Text date_ban;
    Integer duration;
    Text reason;
    Integer player_id;
    Integer banished_by;
    Boolean was_reprieved;
}

#Struct K_BannedPlayerResponse {
    Text message;
    K_Banishment ban;
}

#Struct K_OptBanishment {
    K_BannedPlayerResponse Ban;
    Boolean IsPresent;
}

K_OptBanishment Empty() {
    declare K_BannedPlayerResponse Ban;
    return K_OptBanishment {
        Ban = Ban,
        IsPresent = False
    };
}

K_OptBanishment Of(K_BannedPlayerResponse _Ban) {
    return K_OptBanishment {
        Ban = _Ban,
        IsPresent = True
    };
}

Text ML_Preproc(Text _ModName) {
    return """//!
#Struct {{{_ModName}}}_K_Banishment {
    Integer id;
    Text date_ban;
    Integer duration;
    Text reason;
    Integer player_id;
    Integer banished_by;
    Boolean was_reprieved;
}

#Struct {{{_ModName}}}_K_BannedPlayerResponse {
    Text message;
    {{{_ModName}}}_K_Banishment ban;
}

#Struct {{{_ModName}}}_K_OptBanishment {
    {{{_ModName}}}_K_BannedPlayerResponse Ban;
    Boolean IsPresent;
}
    """;
}

Text ML_Content(Text _ModName) {
    return """//!
{{{_ModName}}}_K_OptBanishment {{{_ModName}}}_Ban_Empty() {
    declare {{{_ModName}}}_K_BannedPlayerResponse Ban;
    return {{{_ModName}}}_K_OptBanishment {
        Ban = Ban,
        IsPresent = False
    };
}

{{{_ModName}}}_K_OptBanishment {{{_ModName}}}_Ban_Of({{{_ModName}}}_K_BannedPlayerResponse _Ban) {
    return {{{_ModName}}}_K_OptBanishment {
        Ban = _Ban,
        IsPresent = True
    };
}
    """;
}