#Extends "Modes/ShootMania/Obstacle.Script.txt"

#Include "Libs/miltant/UI/EndScreen.Script.txt" as EndScreen

// This is used by the TP to know if we're playing the last map of the event or not.
#Setting S_LastMap False as "<hidden>"

***Match_InitServer***
***
G_EnableRecords = False;
G_ForceInvisibleSkin = False;
G_IsCampaign = True;

log("mode is Obstacle Campaign");
***

***Match_AfterLoadMap***
***
if (ServerAdmin == Null) {
    declare CSmPlayer Player = Players[0];
    declare Boolean LoadingDialogPlayingMap for Player.User = False;
    LoadingDialogPlayingMap = True;
}
***

***Campaign_Match_Yield***
***
switch (Event.CustomEventType) {
    case "campaign:improve": {
        declare Player = SM::GetPlayer(Event.CustomEventData[0]);
        Obstacle::ObsRespawnPlayer(Player, True);
        Layers::Detach("EndScreen", Player);
        UIManager.GetUI(Player).UISequence = CUIConfig::EUISequence::Playing;
    }
    case "campaign:next_map": {
        if (ServerAdmin == Null) MB_Private_StopMatch();
    }
}
***

***Campaign_EndRound***
***
// DestroyUI(False);
Layers::Attach("EndScreen", Player);

UIManager.GetUI(Player).OverlayHideNotices = True;
UIManager.GetUI(Player).UISequence = CUIConfig::EUISequence::Podium;
***

***Campaign_CreateUI***
***
Layers::Create("EndScreen", EndScreen::GetLayer(ServerAdmin == Null, S_LastMap));
***

***MB_Private_EnableLadder***
***
MB_Private_EnableLadder = False;
***

***MB_Private_EnablePodiumSequence***
***
MB_Private_EnablePodiumSequence = False;
***

***MB_Private_EnableChannelProgression***
***
MB_Private_EnableChannelProgression = True;
***