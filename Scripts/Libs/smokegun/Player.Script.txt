/************************************************
 *   Obstacle Library                            *
 *   Author:     smokegun                        *
 *                                               *
 *   Getters and setters for players             *
 ************************************************/

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/Nadeo/Json2.Script.txt" as Json

#Include "Libs/smokegun/Constants.Script.txt" as Constants

/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2017-11-25"
#Const  ScriptName  "Player.Script.txt"

/*********************************************
  FUNCTIONS
 *********************************************/

Boolean isInitialized(CSmPlayer _Player) {
    declare Boolean isInitialized for _Player = False;
    return isInitialized;
}

Boolean setInitialized(CSmPlayer _Player, Boolean _Value) {
    declare Boolean isInitialized for _Player = False;
    isInitialized = _Value;
    return isInitialized;
}

Integer getStartTime(CSmPlayer _Player) {
    declare netwrite Integer Net_StartTime for _Player;
    return Net_StartTime;
}

Integer setStartTime(CSmPlayer _Player, Integer _Value) {
    declare netwrite Integer Net_StartTime for _Player;
    Net_StartTime = _Value;
    return Net_StartTime;
}

Integer getCpProgress(CSmPlayer _Player) {
    declare netwrite Integer Net_CpProgress for _Player;
    return Net_CpProgress;
}

Integer setCpProgress(CSmPlayer _Player, Integer _Value) {
    declare netwrite Integer Net_CpProgress for _Player;
    Net_CpProgress = _Value;
    return Net_CpProgress;
}

Boolean usedJump(CSmPlayer _Player) {
    declare netwrite Boolean Net_UsedJump for _Player = False;
    return Net_UsedJump;
}

Boolean setUsedJump(CSmPlayer _Player, Boolean _Value) {
    declare netwrite Boolean Net_UsedJump for _Player = False;
    Net_UsedJump = _Value;
    return Net_UsedJump;
}

Ident getLastCheckpoint(CSmPlayer _Player) {
    declare Ident[] LastCheckpointsIds for _Player;
    declare netwrite Text[] LastCheckpointsIdsStr for _Player;

    if (getCpProgress(_Player) == 0) {
        LastCheckpointsIds.clear();
        LastCheckpointsIdsStr.clear();
        return NullId;
    }

    if (LastCheckpointsIds.count == 0) {
        return NullId;
    }

    return LastCheckpointsIds[LastCheckpointsIds.count-1];
}

Void setLastCheckpoint(CSmPlayer _Player, Ident _Value) {
    declare Ident[] LastCheckpointsIds for _Player;
    declare netwrite Text[] LastCheckpointsIdsStr for _Player;

    LastCheckpointsIds.add(_Value);
    LastCheckpointsIdsStr.add(_Value^"");
}

Integer[Text] getBuffTimes(CSmPlayer _Player) {
    declare netwrite ItemBuffTimes for _Player = Integer[Text];
    return ItemBuffTimes;
}

Integer[Text] setBuffTime(CSmPlayer _Player, Text _Key, Integer _Value) {
    declare netwrite ItemBuffTimes for _Player = Integer[Text];
    ItemBuffTimes[_Key] = _Value;
    return ItemBuffTimes;

}

Integer[Text] clearBuffTimes(CSmPlayer _Player) {
    declare netwrite ItemBuffTimes for _Player = Integer[Text];
    ItemBuffTimes.clear();
    return ItemBuffTimes;
}

Integer getBestRun(CSmPlayer _Player) {
    declare Integer BestRun for _Player.Score;
    return BestRun;
}

Integer setBestRun(CSmPlayer _Player, Integer _Value) {
    declare Integer BestRun for _Player.Score;
    BestRun = _Value;
    return BestRun;
}

Integer getLastRunS(CSmScore _Score) {
    declare Integer LastRun for _Score;
    return LastRun;
}

Integer getLastRun(CSmPlayer _Player) {
    declare Integer LastRun for _Player.Score;
    return LastRun;
}

Integer setLastRun(CSmPlayer _Player, Integer _Value) {
    declare Integer LastRun for _Player.Score;
    LastRun = _Value;
    return LastRun;
}

Integer getRespawnCount(CSmPlayer _Player) {
    declare Integer RespawnCount for _Player.Score;
    return RespawnCount;
}

Integer setRespawnCount(CSmPlayer _Player, Integer _Value) {
    declare Integer RespawnCount for _Player.Score;
    RespawnCount = _Value;
    return RespawnCount;
}

Integer incrementRespawnCount(CSmPlayer _Player) {
    declare Integer RespawnCount for _Player.Score;
    RespawnCount += 1;
    return RespawnCount;
}

Integer[Ident] getBestCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeBest for _Player.Score;
    return CheckpointsTimeBest;
}

Integer[Ident] setBestCPTimes(CSmPlayer _Player, Integer[Ident] _Value) {
    declare Integer[Ident] CheckpointsTimeBest for _Player.Score;
    CheckpointsTimeBest = _Value;
    return CheckpointsTimeBest;
}

Integer[Ident] clearBestCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeBest for _Player.Score;
    CheckpointsTimeBest.clear();
    return CheckpointsTimeBest;
}

Integer getBestTime(CSmPlayer _Player, Ident _Ident) {
    declare BestTimes = getBestCPTimes(_Player);
    if (BestTimes.existskey(_Ident))
        return BestTimes[_Ident];
    return -1;
}

Integer[Ident] getLastCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;
    return CheckpointsTimeLast;
}

Integer[Ident] setLastCPTimes(CSmPlayer _Player, Ident _Key, Integer _Value) {
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;
    CheckpointsTimeLast[_Key] = _Value;
    return CheckpointsTimeLast;
}

Integer[Ident] clearLastCPTimes(CSmPlayer _Player) {
    declare Integer[Ident] CheckpointsTimeLast for _Player.Score;
    CheckpointsTimeLast.clear();
    return CheckpointsTimeLast;
}

// Declare player's variable
Void InitPlayer(CSmPlayer _Player) {
    if (_Player == Null || isInitialized(_Player)) return;

    setInitialized(_Player, True);
    setStartTime(_Player, 0);
    setCpProgress(_Player, 0);
    setUsedJump(_Player, False);
    setLastCheckpoint(_Player, NullId);
    clearBuffTimes(_Player);

    setBestRun(_Player, -1);
    setLastRun(_Player, -1);
    setRespawnCount(_Player, 0);
    clearBestCPTimes(_Player);
    clearLastCPTimes(_Player);

    _Player.Score.RoundPoints = 0;
    _Player.Score.Points = 0;
}

Boolean wantsRestart(CSmPlayer _Player, Boolean _GiveUp) {
    declare UI <=> UIManager.GetUI(_Player);
    if (UI == Null)
        return False;

    declare netread Net_RespawnBehavior for UI = Constants::C_RespawnBehavior_Normal;

    if (Net_RespawnBehavior == Constants::C_RespawnBehavior_FullLocked)
        return False;

    return (Net_RespawnBehavior == Constants::C_RespawnBehavior_FullRestart || _GiveUp);
}

Integer getTime(CSmPlayer _Player) {
    return Now - getStartTime(_Player);
}

Text Private_CPTimesToJSON(Integer[Ident] _Times) {
    declare res = "{";
    declare i = 0;
    foreach (CPId => CPTime in _Times) {
        res ^= """ "{{{Json::GetInteger(MapLandmarks[CPId].Order)}}}" : {{{Json::GetInteger(CPTime)}}}""";

        if (i < _Times.count-1)
            res ^= ",";
        i += 1;
    }
    return res^"}";
}

Text ToJSON(CSmPlayer _Player) {
    return """
    {
        "Player" : {
            "Login" : {{{Json::GetText(_Player.User.Login)}}},
                "Name" : {{{Json::GetText(_Player.User.Name)}}}
        },
            "Run" : {
                "Time" : {{{Json::GetInteger(getTime(_Player))}}},
                "RespawnCount" : {{{Json::GetInteger(getRespawnCount(_Player))}}},
                "LastRun" : {{{Json::GetInteger(getLastRun(_Player))}}},
                "BestRun" : {{{Json::GetInteger(getBestRun(_Player))}}},
                "LastCheckpoinId" : {{{Json::GetIdent(getLastCheckpoint(_Player))}}},
                "UsedJump" : {{{Json::GetBoolean(usedJump(_Player))}}},
                "CpProgess" : {{{Json::GetInteger(getCpProgress(_Player))}}},
                "LastCPTimes" : {{{Private_CPTimesToJSON(getLastCPTimes(_Player))}}},
                "BestCPTimes" : {{{Private_CPTimesToJSON(getBestCPTimes(_Player))}}}
            }
    }""";
}
