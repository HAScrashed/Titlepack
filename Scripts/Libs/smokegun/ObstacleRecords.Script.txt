/*********************************************
* Obstacle Library                           *
* Author:  smokegun                          *
*                                            *
* Obstacle functions.                        *
*********************************************/

#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/miltant/Nadeo_Fork/Log.Script.txt" as Log
#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/miltant/Nadeo_Fork/ShootMania/SM3.Script.txt" as SM

#Include "Libs/ahmad3/Error.Script.txt" as Error
#Include "Libs/ahmad3/Ban.Script.txt" as Ban

#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/smokegun/Player.Script.txt" as Player

#Include "Libs/ahmad3/UI/MlAuth.Script.txt" as Auth

/*********************************************
 CONSTANTS
*********************************************/
#Const Version "2023-07-09"
#Const ScriptName "ObstacleRecords.Script.txt"

#Struct SRequestData {
    Text Headers;
    Text Url;
    Text Data;
    Integer Type;
}

#Struct K_UpdatePlayerBody {
    Text login;
    Text name;
    Text zone_path;
}

#Struct K_UpdateMapBody {
    Text name;
    Text map_uid;
    Integer cps_number;
    K_UpdatePlayerBody author;
    Boolean reversed;
}

#Struct K_HasFinishedResponse {
	Boolean has_improved;
	Text login;
	Integer old;
	Integer new;
	Integer current_rank;
    Boolean reversed;
}

#Struct K_PbCpTimesResponseItem {
    Integer cp_num;
    Integer time;
}

#Struct K_PbResponse {
    Integer rs_count;
    K_PbCpTimesResponseItem[] cps_times;
}

/*********************************************
  GLOBALES
*********************************************/
// General globals
declare Text G_PostHeaders;
declare Text G_GetHeaders;

// Requests
declare SRequestData[Ident] G_WaitingToComplete;
declare SRequestData[]  G_WaitingToSend;
declare Integer G_UpdateRecords;

/////////////////////////////////////////////////////////////////
/////////////////////       TOOLS       /////////////////////////
/////////////////////////////////////////////////////////////////
Boolean Contains(Text _Text, Text _Input) {
    return TL::Find(_Text, _Input, False, False);
}

Text LogPrefix() {
    return "API (W "^G_WaitingToComplete.count^" | Q "^G_WaitingToSend.count^"):";
}

// Used to create a POST request
Ident MakePost(Text _Url, Text _Data, Text _Headers) {
    if (Http.SlotsAvailable > 0) {
        Log::Log(LogPrefix()^" Sending request to "^_Url);
        Log::Log(LogPrefix()^" Payload: "^_Data);
        declare request <=> Http.CreatePost(Constants::C_HostUrl^_Url, _Data, _Headers);
        return request.Id;
    }
    return NullId;
}

Void SendPost(Text _Url, Text _Data, Integer _Type, Text _Headers) {
    declare RequestData = SRequestData {
        Headers = _Headers,
        Url = _Url,
        Data = _Data,
        Type = _Type
    };

    declare reqId = MakePost(_Url, _Data, _Headers);
    if (reqId == NullId && G_WaitingToSend.count < 64) {
        Log::Log(LogPrefix()^" Queue up "^_Url^" (count: "^G_WaitingToSend.count^")");
        G_WaitingToSend.add(RequestData);
        return;
    }
    if (reqId == NullId) {
       Log::Log(LogPrefix()^" WARNING requests queue has more than 64 waiting!");
       return;
    }
    G_WaitingToComplete[reqId] = RequestData;
}

/////////////////////////////////////////////////////////////////
/////////////////////   MAIN FUNCTIONS  /////////////////////////
/////////////////////////////////////////////////////////////////

// Init the API with a token
Void Init() {
    G_PostHeaders = "Content-Type: application/json\nAccept: application/json\n";
    G_GetHeaders  = "Accept: application/json\n";
}

/////////////////////////////////////////////////////////////////
/////////////////////  API FUNCTIONS    /////////////////////////
/////////////////////////////////////////////////////////////////

// Send map infos
Void ReplaceOrCreateMap(Integer _CpsNumber, Boolean _Reversed) {
    declare body = K_UpdateMapBody {
        name = Map.MapName,
        map_uid = ""^Map.Id,
        cps_number = _CpsNumber,
        author = K_UpdatePlayerBody {
            login = Map.AuthorLogin,
            name = Map.AuthorNickName,
            zone_path = Map.AuthorZonePath
        },
        reversed = _Reversed
    };

    SendPost("map/insert", body.tojson(), Constants::C_Request_ReplaceOrCreateMap, G_PostHeaders);
}

/////////////////////////////////////////////////////////////////
/////////////////////      LOOP         /////////////////////////
/////////////////////////////////////////////////////////////////

// Process requests
Void Loop()
{
    declare Ident[] ToDelete = [];
    declare updateRecords = False;

    foreach (reqId => ReqData in G_WaitingToComplete) {
        if (!Http.Requests.existskey(reqId)) {
            ToDelete.add(reqId);
            continue;
        }

        declare request <=> Http.Requests[reqId];
        if (!request.IsCompleted) continue;

        Log::Log(LogPrefix()^" Request done: ("^request.StatusCode^") "^request.Url);
        Log::Log(LogPrefix()^" Response body: "^request.Result);

        if (request.StatusCode == 200) {
            switch (ReqData.Type) {
                case Constants::C_Request_ReplaceOrCreateMap: {
                    updateRecords = True;
                }
            }
        } else {
            declare err = Error::Handle(request.StatusCode, request.Result);
            UIManager.UIAll.SendChat(err.message);
        }

        ToDelete.add(reqId);
    }

    foreach (reqId in ToDelete) {
        if (!Http.Requests.existskey(reqId)) {
            continue;
        }
        declare request <=> Http.Requests[reqId];
        declare Removed = G_WaitingToComplete.removekey(reqId);
        Http.Destroy(request);
    }

    if (G_WaitingToSend.count > 0) {
        declare Integer[] ToRemove = [];
        declare ToSendCount = ML::Min(Http.SlotsAvailable, G_WaitingToSend.count);

        for (I, 0, ToSendCount-1) {
            declare RequestData = G_WaitingToSend[I];
            declare reqId = MakePost(RequestData.Url, RequestData.Data, RequestData.Headers);
            G_WaitingToComplete[reqId] = RequestData;
        }

        for (I, 0, ToSendCount-1) {
            declare Removed = G_WaitingToSend.removekey(0);
        }
    }

    if (updateRecords) {
        declare netwrite Integer Net_RecordsUpdated for Teams[0];
        Net_RecordsUpdated = Now;
    }
}
