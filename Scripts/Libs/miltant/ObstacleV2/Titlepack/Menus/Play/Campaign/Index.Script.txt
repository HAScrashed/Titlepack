#Include "Libs/miltant/ObstacleV2/Titlepack/Menus/Windows.Script.txt"			as Windows
#Include "Libs/miltant/ObstacleV2/ManialinkLib.Script.txt"						as Styles
#Include "Libs/smokegun/Constants.Script.txt"									as Constants

#Include "TextLib" as TL

#Struct K_Map {
	Integer MXId;
	Text UID;
	Text Name;
	Text Author;
	Text Thumbnail;
	Text Path;
	Integer PersonalBest;
	Integer Bronze;
	Integer Silver;
	Integer Gold;
	Integer Champion;
}


#Struct K_Campaign {
	Text Name;
	Text NameLn1;
	Text NameLn2;
	Integer MXId;
	Integer Type;
	Text Banner;
	K_Map[] Maps;

	Boolean FullOnline;
	Boolean PartialOnline;
}

#Struct K_CampaignRequestBody {
	Text login;
	Text[] maps_uids;
}

#Struct K_CampaignResponse_Map {
	Text map_uid;
	Integer time;
}


Text GetName() {
	return "campaign";
}


declare Ident FileList;
declare K_Campaign[Integer] CampaignList;
declare Boolean NeedRefresh;
declare CHttpRequest G_APIRequest;
declare Integer G_CampaignAPIPending;

Text Build() {
	return """
{{{Styles::GetStyleSheet()}}}
<frame id="Frame_Campaign">
	<framemodel id="MapCard">
		<label pos="1 -4.5" valign="center2" textsize="5" textcolor="5F5F64" textfont="regular" id="Label_Num"/>
		<quad pos="20 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/champion.png" id="Quad_MedalC" hidden="1"/>
		<quad pos="21.33 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/gold.png" id="Quad_MedalG" hidden="1"/>
		<quad pos="20 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/silver.png" id="Quad_MedalS" hidden="1"/>
		<quad pos="18.67 .67" size="10 10" image="file://Media/Images/Obstacle/Medals/bronze.png" id="Quad_MedalB" hidden="1"/>
		<quad pos="14.75 -4.165" size="29.5 8.33" image="file://Media/Images/Obstacle/Campaign/BMapCampagn.png" id="Button_Map" scriptevents="1" halign="center" valign="center"
				data-target="Button_Map" data-anim-length="70"
				data-default-anim="<quad scale=&quot;1.&quot;/>"
				data-target-anim="<quad scale=&quot;1.06&quot;/>"/>
	</framemodel>

	<frame pos="-154.17" id="Frame_Infos" hidden="1">
		<frame pos="0 53.67" clip="1" clipsizen="52.67 35.83" clipposn="26.63 -17.83">
			<label text="" textcolor="fff" pos="26.5 -17.83" halign="center" valign="center2" textsize="10" id="Label_IconPlay" opacity="0.4"/>
			<quad size="53 35.83" pos="26.5 -17.915" halign="center" valign="center" id="Quad_Play"
				image="file://Media/Images/Obstacle/Campaign/FThumbnailMapClip.png" scriptevents="1"
				data-target="Label_IconPlay Quad_Thumbnail" data-anim-length="70"
				data-default-anim="<label scale=&quot;1&quot; opacity=&quot;0.4&quot;/> <quad scale=&quot;1&quot;/>"
				data-target-anim="<label scale=&quot;1.2&quot; opacity=&quot;0.8&quot;/> <quad scale=&quot;1.06&quot;/>"/>
			<quad size="53 35.83" pos="26.5 -17.915" halign="center" valign="center" id="Quad_Thumbnail" keepratio="Clip"/>
		</frame>

		<frame pos="0 15.67">
			<label pos="26.5 -5.92" size="52 11.83" text=". . ." textprefix="   " textsize="4" textfont="regular" halign="center" valign="center2" textcolor="fff" id="Label_Map"/>
			<quad size="53 11.83" bgcolor="0009"/>
		</frame>
		<frame pos="0 2">
			<label pos="26.5 -5.92" size="52 11.83" text=". . ." textprefix="   " textsize="4" textfont="regular" halign="center" valign="center2" textcolor="fff" id="Label_Mapper"/>
			<quad size="53 11.83" image="file://Media/Images/Obstacle/Campaign/FMapperCampaign.png"/>
		</frame>
		<frame pos="0 -25">
			<label pos="-.17 5" text="personal best" textprefix="$t" textsize="2.05" textcolor="fff"/>
			<label pos="26.5 -5.92" size="52 11.83" text="..:..:.." textsize="4" textfont="regular" halign="center" valign="center2" textcolor="fff" id="Label_PB"/>
			<quad size="53 11.83" bgcolor="0009" scriptevents="1"/>
		</frame>
	</frame>

	<frame pos="-96.17 53.5">
		<frame pos="8 -46.67">
			<frame>
				<quad pos="-.83" size="31.17 3.67" image="file://Media/Images/Obstacle/Campaign/Difficulties/White.png"/>
				<frameinstance modelid="MapCard" pos="0 -8.67" id="Card_1"/>
				<frameinstance modelid="MapCard" pos="0 -20.33" id="Card_2"/>
				<frameinstance modelid="MapCard" pos="0 -32" id="Card_3"/>
				<frameinstance modelid="MapCard" pos="0 -43.67" id="Card_4"/>
				<frameinstance modelid="MapCard" pos="0 -55.33" id="Card_5"/>
			</frame>
			<frame pos="34.5">
				<quad pos="-.83" size="31.17 3.67" image="file://Media/Images/Obstacle/Campaign/Difficulties/Green.png"/>
				<frameinstance modelid="MapCard" pos="0 -8.67" id="Card_6"/>
				<frameinstance modelid="MapCard" pos="0 -20.33" id="Card_7"/>
				<frameinstance modelid="MapCard" pos="0 -32" id="Card_8"/>
				<frameinstance modelid="MapCard" pos="0 -43.67" id="Card_9"/>
				<frameinstance modelid="MapCard" pos="0 -55.33" id="Card_10"/>
			</frame>
			<frame pos="69">
				<quad pos="-.83" size="31.17 3.67" image="file://Media/Images/Obstacle/Campaign/Difficulties/Blue.png"/>
				<frameinstance modelid="MapCard" pos="0 -8.67" id="Card_11"/>
				<frameinstance modelid="MapCard" pos="0 -20.33" id="Card_12"/>
				<frameinstance modelid="MapCard" pos="0 -32" id="Card_13"/>
				<frameinstance modelid="MapCard" pos="0 -43.67" id="Card_14"/>
				<frameinstance modelid="MapCard" pos="0 -55.33" id="Card_15"/>
			</frame>
			<frame pos="103.5">
				<quad pos="-.83" size="31.17 3.67" image="file://Media/Images/Obstacle/Campaign/Difficulties/Orange.png"/>
				<frameinstance modelid="MapCard" pos="0 -8.67" id="Card_16"/>
				<frameinstance modelid="MapCard" pos="0 -20.33" id="Card_17"/>
				<frameinstance modelid="MapCard" pos="0 -32" id="Card_18"/>
				<frameinstance modelid="MapCard" pos="0 -43.67" id="Card_19"/>
				<frameinstance modelid="MapCard" pos="0 -55.33" id="Card_20"/>
			</frame>
			<frame pos="138">
				<quad pos="-.83" size="31.17 3.67" image="file://Media/Images/Obstacle/Campaign/Difficulties/Red.png"/>
				<frameinstance modelid="MapCard" pos="0 -8.67" id="Card_21"/>
				<frameinstance modelid="MapCard" pos="0 -20.33" id="Card_22"/>
				<frameinstance modelid="MapCard" pos="0 -32" id="Card_23"/>
				<frameinstance modelid="MapCard" pos="0 -43.67" id="Card_24"/>
				<frameinstance modelid="MapCard" pos="0 -55.33" id="Card_25"/>
			</frame>
		</frame>

		<frame pos="188.33">
			<frame pos="31 -24">
				<label halign="center" text="summer 2023" textprefix="$t" textfont="light" textcolor="B4B4B4" textsize="4.8"/>
			</frame>
			
			<quad size="7.66 7.66"  image="file://Media/Images/Obstacle/Campaign/MX.png" pos="10.66 -2.83"/>
			<label pos="34 -7.1" textsize="5.2" text="seasons" textprefix="$t" halign="center" valign="center2" textfont="light"/>
			<quad size="62 123.83"  image="file://Media/Images/Obstacle/Campaign/Aside.png"/>
		</frame>

		<label pos="6 -6.5" textsize="8" textprefix="$t$fff" textfont="regular" id="Label_EventLn1"/>
		<label pos="6 -15.5" textsize="6" textprefix="$t$fff" textfont="light" id="Label_EventLn2"/>
		<label pos="181 -24.5" textsize="2" text="$fff$i$l[https://obstacle.titlepack.io/campaign/29/summer_23]Leaderboards..." textfont="light" halign="right"/>
		<label pos="181 -29.5" textsize="1.7" text="Any feedback? Contact $iunmecrandomofficiel$i  on Discord" textfont="light" halign="right"/>
		<quad size="183.33 35.17" bgcolor="92B7B7FF" id="Quad_Banner"/>
		<quad pos="0 -35.17" size="183.33 1.17" bgcolor="FFF"/>
		<quad pos="0 -36.33" size="183.33 87.83" image="file://Media/Images/Obstacle/Campaign/Background.png"/>
	</frame>
</frame>

<script><![CDATA[
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Include "ColorLib" as CL
	
	#Struct K_Map {
		Integer MXId;
		Text UID;
		Text Name;
		Text Author;
		Text Thumbnail;
		Text Path;
		Integer PersonalBest;
		Integer Bronze;
		Integer Silver;
		Integer Gold;
		Integer Champion;
	}
	
	
	#Struct K_Campaign {
		Text Name;
		Text NameLn1;
		Text NameLn2;
		Integer MXId;
		Integer Type;
		Text Banner;
		K_Map[] Maps;
	
		Boolean FullOnline;
		Boolean PartialOnline;
	}

	{{{Styles::GetDeclareGlobals()}}}

	Void UpdateMaps(Integer SelectedCampaign, Integer SelectedMap) {
		declare Frame_Infos = (Page.GetFirstChild("Frame_Infos") as CMlFrame);
		declare Quad_Thumbnail = (Page.GetFirstChild("Quad_Thumbnail") as CMlQuad);
		declare Label_Map = (Page.GetFirstChild("Label_Map") as CMlLabel);
		declare Label_Mapper = (Page.GetFirstChild("Label_Mapper") as CMlLabel);
		declare Label_PB = (Page.GetFirstChild("Label_PB") as CMlLabel);

		declare K_Campaign[Integer] MapsList for Page;

		Quad_Thumbnail.ChangeImageUrl(MapsList[SelectedCampaign].Maps[SelectedMap].Thumbnail);
		Label_Map.SetText(MapsList[SelectedCampaign].Maps[SelectedMap].Name);
		Label_Mapper.SetText(MapsList[SelectedCampaign].Maps[SelectedMap].Author);

		if (MapsList[SelectedCampaign].Maps[SelectedMap].PersonalBest < 1) {
			Label_PB.TextColor = <1., 1., 1.>;
			Label_PB.SetText("-- : -- : --");
		} else {
			// #E6D189
			Label_PB.TextColor = <.901, .82, .537>;
			Label_PB.SetText(TL::TimeToText(MapsList[SelectedCampaign].Maps[SelectedMap].PersonalBest, True));
		}
		Frame_Infos.Show();

		foreach (I => Map in MapsList[SelectedCampaign].Maps) {
			declare Frame_Card = (Page.GetFirstChild("Card_" ^ (I+1)) as CMlFrame);
			declare Button_Map = (Frame_Card.GetFirstChild("Button_Map") as CMlQuad);
			declare Label_Num = (Frame_Card.GetFirstChild("Label_Num") as CMlLabel);
			declare Quad_MedalB = (Frame_Card.GetFirstChild("Quad_MedalB") as CMlQuad);
			declare Quad_MedalS = (Frame_Card.GetFirstChild("Quad_MedalS") as CMlQuad);
			declare Quad_MedalG = (Frame_Card.GetFirstChild("Quad_MedalG") as CMlQuad);
			declare Quad_MedalC = (Frame_Card.GetFirstChild("Quad_MedalC") as CMlQuad);

			if (I < 9)
				Label_Num.SetText("0" ^ (I + 1));
			else
				Label_Num.SetText("" ^ (I + 1));
			
			if (SelectedMap == I)
				// #7D7E82
				Button_Map.ModulateColor = <.294, .333, .404>;
			else
				// #C2AE47
				Button_Map.ModulateColor = <1., 1., 1.>;

			Quad_MedalB.Hide();
			Quad_MedalS.Hide();
			Quad_MedalG.Hide();
			Quad_MedalC.Hide();

			if (Map.PersonalBest > 0) {
				Label_Num.TextColor = <.761, .682, .278>;

				if (Map.PersonalBest <= Map.Champion) {
					Quad_MedalC.Show();

				} else {
					if (Map.PersonalBest <= Map.Gold)
						Quad_MedalG.Show();
					if (Map.PersonalBest <= Map.Silver)
						Quad_MedalS.Show();
					if (Map.PersonalBest <= Map.Bronze)
						Quad_MedalB.Show();
				}
			} else {
				if (SelectedMap == I) {
					Label_Num.TextColor = <.18, .18, .18>;
				} else {
					Label_Num.TextColor = <.373, .373, .392>;
				}
			}

			Frame_Card.Show();
		}

		for (I, MapsList[SelectedCampaign].Maps.count, 24) {
			declare Frame_Card = (Page.GetFirstChild("Card_" ^ (I+1)) as CMlFrame);
			Frame_Card.Hide();
		}
	}
		
	main() {
		declare Frame_Infos = (Page.GetFirstChild("Frame_Infos") as CMlFrame);

		declare Quad_Banner = (Page.GetFirstChild("Quad_Banner") as CMlQuad);
		declare Label_EventLn1 = (Page.GetFirstChild("Label_EventLn1") as CMlLabel);
		declare Label_EventLn2 = (Page.GetFirstChild("Label_EventLn2") as CMlLabel);

		declare Integer[Text] CampaignRecords for LocalUser;
		declare Boolean CampaignRecordsUpdated for LocalUser = False;

		declare K_Campaign[Integer] MapsList for Page;
		declare Integer SelectedCampaign as ControllerSelectedCampaign for Page = -1;
		declare Boolean TimesReloaded for Page = False;

		declare Integer SelectedCampaign = -1;
		declare Integer SelectedMap = 1;
		declare Boolean MapsNeedRefresh = False;
		declare Integer TimestampLastSelection = -1;

		wait(MapsList.existskey(ControllerSelectedCampaign));

		while (True) {
			if (SelectedCampaign != ControllerSelectedCampaign) {
				SelectedCampaign = ControllerSelectedCampaign;

				Quad_Banner.ChangeImageUrl(MapsList[SelectedCampaign].Banner);
				Label_EventLn1.SetText(MapsList[SelectedCampaign].NameLn1);
				Label_EventLn2.SetText(MapsList[SelectedCampaign].NameLn2);

				Frame_Infos.Hide();
				SelectedMap = 0;
				foreach (I => Map in MapsList[SelectedCampaign].Maps) {
					if (Map.PersonalBest > 0)
						SelectedMap += 1;
					else break;
				}
				SelectedMap = SelectedMap % MapsList[SelectedCampaign].Maps.count;
				MapsNeedRefresh = True;
			}
			if (CampaignRecordsUpdated) {
				if (MapsList.existskey(SelectedCampaign)) {
					foreach (I => Map in MapsList[SelectedCampaign].Maps) {
						if (CampaignRecords.existskey(Map.UID)) {
							MapsList[SelectedCampaign].Maps[I].PersonalBest = CampaignRecords[Map.UID];
							SelectedMap = I;
						}
					}
					SelectedMap = (SelectedMap + 1) % MapsList[SelectedCampaign].Maps.count;
				}
				CampaignRecordsUpdated = False;
				TimesReloaded = True;
			}
			if (MapsNeedRefresh || TimesReloaded) {
				UpdateMaps(SelectedCampaign, SelectedMap);
				MapsNeedRefresh = False;
				TimesReloaded = False;
			}

			foreach (Event in PendingEvents) {
				{{{Styles::GetEventLoopActiveItem()}}}
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						switch (Event.ControlId) {
							case "Button_Map": {
								declare ClickedCard = (Event.Control.Parent as CMlFrame);

								if (TL::StartsWith("Card_", ClickedCard.ControlId)) {
									declare MapIndex = TL::ToInteger(TL::SubString(ClickedCard.ControlId, 5, TL::Length(ClickedCard.ControlId) - 4)) - 1;

									if (MapIndex != SelectedMap) {
										MapsNeedRefresh = True;
										SelectedMap = MapIndex;
										TimestampLastSelection = Now;
									} else if (TimestampLastSelection != -1 && Now - TimestampLastSelection < 500) {
										SendCustomEvent("play_campaign", [""^SelectedCampaign, ""^SelectedMap]);
										TimestampLastSelection = -1;
									} else {
										TimestampLastSelection = Now;
									}
								}
							}
							case "Quad_Play": {
								SendCustomEvent("play_campaign", [""^SelectedCampaign, ""^SelectedMap]);
							}
						}
					}
				}
			}

			yield;
		}
	}
]]></script>
""";
}

Void Load() {
	declare Windows::K_Window Window;
	Window.Name = GetName();
	Window.Manialink = Build();
	Window.Animation = CUILayer::EUILayerAnimation::LeftSlow;

	Windows::CreateWindow(Window);

	declare persistent ObsStore_UserToken for LocalUser = "";

	// fatten, sort by date asc
	FileList = DataFileMgr.Map_GetGameList("\\MEDIABROWSER_HiddenResources\\29\\", True, False, True).Id;

	// TODO get from the API and move to the loop
	CampaignList = [
		29 => K_Campaign {
			Name = "Summer 2023",
			NameLn1 = "Summer",
			NameLn2 = "2023",
			MXId = 26,
			Type = 1,
			Banner = "file://Media/Images/Obstacle/Campaign/SpringBanner01.png",
			Maps = [
				K_Map {
					UID = "qpKzvXQaaJGvSsXPTNk_iVWmRTg",
					Bronze = 57000,
					Silver = 52000,
					Gold = 41000,
					Champion = 37000
				},
				K_Map {
					UID = "Fcgbnv1RwTIdgRySDLwtyzzMj9j",
					Bronze = 29000,
					Silver = 24000,
					Gold = 19500,
					Champion = 18500
				},
				K_Map {
					UID = "TEDQRUPTU1VkGrzBKLhIOY9cYV1",
					Bronze = 48000,
					Silver = 40000,
					Gold = 35000,
					Champion = 33000
				},
				K_Map {
					UID = "GBEPgbo_hFst5xII2zoz7sP8xBe",
					Bronze = 47000,
					Silver = 40000,
					Gold = 36000,
					Champion = 35000
				},
				K_Map {
					UID = "90qdC1x5f2s4C4oFveHhimcwLzj",
					Bronze = 43000,
					Silver = 38000,
					Gold = 34000,
					Champion = 32500
				},
				K_Map {
					UID = "eKbgGOAuuwUP6ByvWlP8G728fuc",
					Bronze = 50000,
					Silver = 45000,
					Gold = 40000,
					Champion = 38000
				},
				K_Map {
					UID = "hzlKEVfxuGyriKXlTm__LoiVRAj",
					Bronze = 46000,
					Silver = 40000,
					Gold = 35000,
					Champion = 32750
				},
				K_Map {
					UID = "VSn_Cz45JUGLH_LJaRBUKaRIQsh",
					Bronze = 52000,
					Silver = 45000,
					Gold = 41000,
					Champion = 38500
				},
				K_Map {
					UID = "H5yHFPEOVcdmJv7DabEGYqhUSDc",
					Bronze = 45000,
					Silver = 40000,
					Gold = 36000,
					Champion = 35000
				},
				K_Map {
					UID = "0u6aaVnLw1cbwUIi7I1hyP1EHT0",
					Bronze = 48000,
					Silver = 44000,
					Gold = 40000,
					Champion = 37000
				},
				K_Map {
					UID = "7ki7DAx8RGHufasKBLzlHnvFMUj",
					Bronze = 70000,
					Silver = 63000,
					Gold = 58000,
					Champion = 54000
				},
				K_Map {
					UID = "JTeY36K5VrDL7noJGzl4dqwPC5j",
					Bronze = 60000,
					Silver = 54000,
					Gold = 50000,
					Champion = 47000
				},
				K_Map {
					UID = "9rs_79lkU09Edy3FCyjXNTPNj_j",
					Bronze = 75000,
					Silver = 68000,
					Gold = 63000,
					Champion = 59000
				},
				K_Map {
					UID = "uHN22ZmWSNesgZqOVcjgWYv7cPc",
					Bronze = 70000,
					Silver = 64000,
					Gold = 57000,
					Champion = 53000
				},
				K_Map {
					UID = "TcwGFWuciPoKzccgWa6wRVM7yvd",
					Bronze = 67000,
					Silver = 60000,
					Gold = 55000,
					Champion = 53000
				},
				K_Map {
					UID = "18FInhM7gAcqAgvwPwllYEDE6rk",
					Bronze = 53000,
					Silver = 48000,
					Gold = 44000,
					Champion = 41900
				},
				K_Map {
					UID = "pAv3QI4f8y6fbSU2qoMj4cFRQTi",
					Bronze = 52000,
					Silver = 46000,
					Gold = 43000,
					Champion = 41000
				},
				K_Map {
					UID = "G5Dm8fjoFSqS8nui1mP1wKZ4z_3",
					Bronze = 80000,
					Silver = 71000,
					Gold = 65000,
					Champion = 62000
				},
				K_Map {
					UID = "tSd082VQJ51_71EXvCobORPlhZl",
					Bronze = 80000,
					Silver = 71000,
					Gold = 66000,
					Champion = 64000
				},
				K_Map {
					UID = "KkqC5yQSQ18XyhEfpqMLER3vAjc",
					Bronze = 58000,
					Silver = 50000,
					Gold = 46000,
					Champion = 43500
				},
				K_Map {
					UID = "uHYccBmFsS1kSLc45zLhlOya1eb",
					Bronze = 96000,
					Silver = 88000,
					Gold = 77000,
					Champion = 72000
				},
				K_Map {
					UID = "F1bDc8HpEr3VjgXwuZh5m_2sb6e",
					Bronze = 80000,
					Silver = 70000,
					Gold = 64000,
					Champion = 61000
				},
				K_Map {
					UID = "exsvJlTM1oQq1VJ8d9u2qSgFyla",
					Bronze = 78000,
					Silver = 71000,
					Gold = 66000,
					Champion = 64000
				},
				K_Map {
					UID = "Okx2W7jKXCue7s58kpcStl9vRF3",
					Bronze = 88000,
					Silver = 81000,
					Gold = 76000,
					Champion = 74000
				},
				K_Map {
					UID = "GwjMPymVycUB9NkGvk00juY4E55",
					Bronze = 80000,
					Silver = 72000,
					Gold = 64000,
					Champion = 61000
				}
			]
		}
	];
	NeedRefresh = False;


	if (ObsStore_UserToken != "") {
		declare Body = K_CampaignRequestBody {
			login = LocalUser.Login,
			maps_uids = []
		};

		foreach (Map in CampaignList[29].Maps) {
			Body.maps_uids.add(Map.UID);
		}
		
		G_CampaignAPIPending = 29;
		G_APIRequest = Http.CreatePost(Constants::C_HostUrl ^ "player/times", Body.tojson(), "Content-Type: application/json\nAccept: application/json\nPlayerLogin: " ^ LocalUser.Login ^ "\nAuthorization: " ^ ObsStore_UserToken);	
	} else {
		G_CampaignAPIPending = -1;
	}
}

Void Loop() {
	// associate Maps to their parent folder and update the manialink
	declare CMapInfo[][Integer] CampaignFiles;

	if (DataFileMgr.TaskResults.existskey(FileList) && DataFileMgr.TaskResults[FileList].HasSucceeded) {
		declare MapsList = (DataFileMgr.TaskResults[FileList] as CTaskResult_MapList);
		
		foreach (File in MapsList.MapInfos) {
			declare Folder = TL::RegexMatch("""^MEDIABROWSER_HiddenResources\\([0-9]+)\\$""", File.Path, "i")[1];
			if (Folder != "") {
				declare MXId = TL::ToInteger(Folder);

				if (!CampaignFiles.existskey(MXId))
					CampaignFiles[MXId] = [];
				CampaignFiles[MXId].add(File);
			}
		}

		NeedRefresh = True;
	}

	if (G_CampaignAPIPending != -1 && G_APIRequest.IsCompleted) {
		declare K_CampaignResponse_Map[] ResponseMaps;
		if (ResponseMaps.fromjson(G_APIRequest.Result)) {
			declare Integer[Text] Times;
			foreach (Map in ResponseMaps) {
				Times[Map.map_uid] = Map.time;
			}
			foreach (I => Map in CampaignList[G_CampaignAPIPending].Maps) {
				if (Times.existskey(Map.UID))
					CampaignList[G_CampaignAPIPending].Maps[I].PersonalBest = Times[Map.UID];
			}
		}

		G_CampaignAPIPending = -1;
		Http.Destroy(G_APIRequest);

		declare K_Campaign[Integer] MapsList for Windows::GetPage(GetName());
		declare Boolean TimesReloaded for Windows::GetPage(GetName());
		MapsList = CampaignList;
		TimesReloaded = True;
	}

	if (NeedRefresh && CampaignList.count > 0) {
		NeedRefresh = False;

		// compute the intersection between the CampaignFiles (folders) and the API CampaignList
		foreach (MXId => Campaign in CampaignList) {
			if (CampaignFiles.existskey(MXId)) {
				declare FullOnline = True;
				declare PartialOnline = False;

				foreach (Map_I => Map in Campaign.Maps) {
					declare Boolean Online = True;
					foreach (File_I => File in CampaignFiles[MXId]) {
						if (File.MapUid == Map.UID) {
							CampaignList[MXId].Maps[Map_I].Path = File.FileName;
							CampaignList[MXId].Maps[Map_I].Thumbnail = "file://Thumbnails/MapUid/" ^ Map.UID ^ "/";
							CampaignList[MXId].Maps[Map_I].Name = File.Name;
							CampaignList[MXId].Maps[Map_I].Author = File.AuthorNickName;

							if (MXId != 29) {
								CampaignList[MXId].Maps[Map_I].Bronze = File.TMObjective_BronzeTime;
								CampaignList[MXId].Maps[Map_I].Silver = File.TMObjective_SilverTime;
								CampaignList[MXId].Maps[Map_I].Gold = File.TMObjective_GoldTime;
								CampaignList[MXId].Maps[Map_I].Champion = File.TMObjective_AuthorTime;
							}

							Online = False;
							FullOnline = False;
							break;
						}
					}
					if (Online) {
						// CampaignList[MXId].Maps[Map_I].Path = "https://sm.mania-exchange.com/maps/download/" ^ Map.UID;
						CampaignList[MXId].Maps[Map_I].Thumbnail = "https://sm.mania-exchange.com/maps/screenshot/normal/" ^ Map.UID;

						PartialOnline = True;
					}
				}

				CampaignList[MXId].FullOnline = FullOnline;
				if (FullOnline) {
					CampaignList[MXId].PartialOnline = False;
				} else {
					CampaignList[MXId].FullOnline = PartialOnline;
				}
			}
		}
		

		declare K_Campaign[Integer] MapsList for Windows::GetPage(GetName());
		declare Integer SelectedCampaign for Windows::GetPage(GetName());
		MapsList = CampaignList;
		foreach (ID => uwu in CampaignList) {
			SelectedCampaign = ID;
			break;
		}

		DataFileMgr.TaskResult_Release(FileList);
	}

	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent && Event.CustomEventType == "play_campaign") {
			if (Event.CustomEventData.count == 2) {
				declare Campaign = TL::ToInteger(Event.CustomEventData[0]);
				declare Current_Map = TL::ToInteger(Event.CustomEventData[1]);
				declare Text[] MapList;
				declare MapListCount = CampaignList[Campaign].Maps.count;

				for (I, 0, MapListCount - 1) {
					MapList.add(
						CampaignList[Campaign]
							.Maps[(Current_Map + I) % MapListCount]
							.Path
					);
				}

				wait(TitleControl.IsReady);
				TitleControl.PlayMapList(MapList, "Scripts/Modes/ShootMania/ObstacleCampaign.Script.txt", "");
			}
		}
	}
}
