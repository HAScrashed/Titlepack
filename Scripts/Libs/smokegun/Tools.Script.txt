/************************************************
*	Obstacle Library								*
*	Author:		smokegun						*
*												*
*	Obstacle functions.				*
************************************************/

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

/***************************************
	CONSTANTS
***************************************/

#Const	Version		"2017-07-10"
#Const	ScriptName	"Tools.Script.txt"

/***************************************
	FUNCTIONS
***************************************/
// Get posn string from Vec3
Text GetPosn(Vec3 _Posn) {
	return _Posn.X^" "^_Posn.Y^" "^_Posn.Z;
}

// Get posn string from Vec2
Text GetPosn(Vec2 _Posn) {
	return _Posn.X^" "^_Posn.Y;
}

Integer GetWeaponTypeFromSpawn(CSmMapLandmark SpawnLandmark) {
	declare WeaponType = 0;
	declare SpawnName = SpawnLandmark.Tag;
	if (TextLib::Length(SpawnName) > 5) {
		WeaponType = TextLib::ToInteger(TextLib::SubString(SpawnName, 9, 1));
	}
  return WeaponType;
}

Ident GetClosestSpawn(Ident _CheckPointId, Ident[] _SpawnIds) {
	if (!MapLandmarks_Gauge.existskey(_CheckPointId)) return NullId;
	declare GaugeLandmark <=> MapLandmarks_Gauge[_CheckPointId];
	declare ClosestSpawn = NullId;
	declare ClosestDistance = -1.0;
	foreach (Id in _SpawnIds) {
		if (!MapLandmarks_PlayerSpawn.existskey(Id)) continue;
		declare SpawnLandmark <=> MapLandmarks_PlayerSpawn[Id];
		declare Distance = MathLib::Distance(GaugeLandmark.Position, SpawnLandmark.Position);
		if (Distance >= ClosestDistance && ClosestDistance >= 0) continue;
		ClosestDistance = Distance;
		ClosestSpawn = SpawnLandmark.Id;
	}
	return ClosestSpawn;
}

Ident GetClosestSpawn(Ident _CheckPointId) {
	if (!MapLandmarks_Gauge.existskey(_CheckPointId)) return NullId;
	declare GaugeLandmark <=> MapLandmarks_Gauge[_CheckPointId];
	declare SpawnIds = Ident[];

	foreach (SpawnLandmark in MapLandmarks_PlayerSpawn) {
		if (SpawnLandmark.Tag == "No-Function") continue;
		if (SpawnLandmark.Tag != "CPSpawn") continue;
		if (GaugeLandmark.Order != 0 && GaugeLandmark.Order != SpawnLandmark.Order) continue;
		SpawnIds.add(SpawnLandmark.Id);
	}
	if (SpawnIds.count > 0) return GetClosestSpawn(_CheckPointId, SpawnIds);

	foreach (SpawnLandmark in MapLandmarks_PlayerSpawn) {
		if (SpawnLandmark.Tag != "CPSpawn") continue;
		if (GaugeLandmark.Order <= SpawnLandmark.Order) continue;
		SpawnIds.add(SpawnLandmark.Id);
	}
	return GetClosestSpawn(_CheckPointId, SpawnIds);
}

Boolean IsCheckpoint(CSmMapLandmark _GaugeLandmark) {
	return ("Checkpoint" == TextLib::SubText(_GaugeLandmark.Tag, 0, 10));
}

Integer GetTime(CPlayer _Player) {
	if (_Player == Null) return 0;
	declare netwrite Net_StartTime for _Player = 0;
	return Now - Net_StartTime;
}


// Get player's rank
Integer GetPlayerRank(CSmPlayer _Player) {
	declare Rank = 1;
	declare LastCheckpointId for _Player = NullId;
	declare BestRun for _Player.Score = -1;
	declare CheckpointsTimeLast for _Player.Score = Integer[Ident];
	declare Ranking = Integer[Ident];

	// Player is finishing a run
	if(CheckpointsTimeLast.count == 0) {

		// Fill ranking with every player who has finished the map
		foreach (Score in Scores) {
			declare BestRun for Score = -1;
			if (BestRun < 0) continue;
			Ranking[Score.User.Id] = BestRun;
		}

	// Player has taken a checkpoint
	} else {

		// Fill ranking with every player who has best time at last checkpoint
		foreach (Score in Scores) {
			declare CheckpointsTimeBest for Score = Integer[Ident];
			if (!CheckpointsTimeBest.existskey(LastCheckpointId)) continue;
			Ranking[Score.User.Id] = CheckpointsTimeLast[LastCheckpointId];
		}
	}

	// Rank players by time
	Ranking = Ranking.sort();

	// Get final rank
	foreach (UserId => Time in Ranking) {
		if (UserId == _Player.User.Id) break;
		Rank += 1;
	}

	return Rank;
}