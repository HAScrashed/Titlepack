#Extends "Modes/ShootMania/Base/ModeShootMania.Script.txt"

#Const CompatibleMapTypes "ObstacleArena,ObstacleTitleArena,ObstacleTitleArenaOld,TimeAttackArena,ObstacleBetaArena,Randomizer"
#Const  Version           "0.10"
#Const  ScriptName        "Modes/ShootMania/Sprint.Script.txt"

// ---------------------------------- //
// Libraries
// ---------------------------------- //
#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/Nadeo/CustomUI.Script.txt" as CustomUI
#Include "Libs/Nadeo/TabsServer.Script.txt" as Tabs
#Include "Libs/Nadeo/ShootMania/Map.Script.txt" as Map

#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/miltant/Randomizer.Script.txt" as RNG
#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/smokegun/ObstacleLib.Script.txt" as Obstacle

#Include "Libs/miltant/UI/Markers.Script.txt" as Markers
#Include "Libs/smokegun/UI/TimeDiff.Script.txt" as TimeDiff
#Include "Libs/smokegun/UI/Chrono.Script.txt" as Chrono
#Include "Libs/smokegun/UI/CpProgress.Script.txt" as CpProgress
#Include "Libs/smokegun/UI/SpectatorCount.Script.txt" as SpectatorCount
#Include "Libs/smokegun/UI/SpecKeys.Script.txt" as SpecKeys
#Include "Libs/smokegun/UI/Duo.Script.txt" as Duo

#Include "Libs/smokegun/Items.Script.txt" as Items
#Include "Libs/smokegun/ObstacleRecords.Script.txt" as API
#Include "Libs/smokegun/Weapons.Script.txt" as Weapons

#Include "Libs/smokegun/CPTimes.Script.txt" as CPTimes
#Include "Libs/smokegun/Settings.Script.txt" as Settings


// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit 20 as _("Time limit (minutes)")
#Setting S_ForceInvisibleSkin True as "Force invisible skin"
#Setting S_RoundLimit 5 as _("Round limit")
#Setting S_MinPlayer 2  as _("Number of players needed to start a map")
#Setting S_PointDistribution False as _("Enable dynamic point distribution")
#Setting S_PointLimit 10 as _("Point limit")
#Setting S_PointsMax 3 as _("Points for the 1st player")
#Setting S_PointsMin 1 as _("Points for the lasts players")
#Setting S_PointsDeduced 1 as _("Points deduced for each place")
#Setting S_RoundCooldown 10 as _("Waiting time between rounds (seconds)")
#Setting S_WarmupRounds 1 as _("Number of warmup rounds")
#Setting S_WarmupRoundsTime 120 as _("Duration of warmup rounds (seconds)")
#Setting S_MinTimeLeft 20 as _("Minimum time left (seconds)")
#Setting S_MaxTimeLeft 120 as _("Maximum time left (seconds)")
#Setting S_DuoSprint False as "Beta: DuoSprint"
#Setting S_MinWaitTime 1 as "Beta: Minimum waiting time (seconds)"
#Setting S_CheckpointMarkersCount 2 as "Count of different checkpoint markers"

#Setting S_ScriptEnvironment "production"


#Command Command_TogglePvPWeapons (Boolean) as _("Set PvP Weapons (on/off)")
#Command Command_TogglePvPCollisions (Boolean) as _("Set PvP Collisions (on/off)")

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_HudModulePath "Sprint/UI.Module.Gbx"
#Const C_State_Playing 0
#Const C_State_Waiting 1
#Const C_SettingsUpdateInterval 1000
#Const C_Colors [<0.0, 0.0, 1.0>, <0.0, 1.0, 0.0>, <0.0, 1.0, 1.0>, <1.0, 0.0, 0.0>, <1.0, 0.0, 1.0>, <1.0, 1.0, 0.0>, <1.0, 1.0, 1.0>]

declare Ident           G_FirstPlayer;
declare Integer         G_State;
declare Boolean[Ident]  G_FinishedScores;

declare Ident   G_InvisibleSkinId;
declare Boolean G_ForceInvisibleSkin;
declare Boolean G_LastUsePvPWeapons;
declare Boolean G_LastUsePvPCollisions;

***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
***

***Match_Settings***
***
MB_Settings_UseDefaultHud = False;
MB_Settings_UseDefaultObjects = False;

UseClans = False;
UseSameWallJump = True;
UsePvPWeapons = False;
UsePvPCollisions = False;
G_LastUsePvPWeapons = False;
G_LastUsePvPCollisions = False;

Settings::SetFullAmmoSpawn(True);
Settings::SetFastRespawn(True);
Settings::SetForceInvisibleSkin(True);
Settings::SetEnablePlayerHighlight(False);

// ServerModeName is "" in the editor
if (ServerModeName == "") {
    Settings::SetMinPlayers(1);
    Settings::SetRoundCooldown(1);
    Settings::SetTimeLimit(200);
    Settings::SetWarmupRounds(0);
    Settings::SetRoundLimit(1);
}

Env::Set(Env::Env_Development());
***

***Match_Rules***
***
ModeInfo::SetName("Sprint");
ModeInfo::SetType(ModeInfo::Type_FreeForAll());

declare OpenSpecial1Text = "$<$00f";
declare OpenSpecial2Text = "$<$88f";
declare OpenSpecial3Text = "$<$0f0";
declare OpenSpecial4Text = "$<$f80";
declare OpenBoldText = "$<$o";
declare OpenSettingText = "$<$08f";
declare CloseText = "$>";

declare ModeRules = """
Finish the {{{OpenSpecial2Text}}}Obstacle Course{{{CloseText}}} as fast as possible.
To validate a race you must touch the {{{OpenSpecial2Text}}}Goal{{{CloseText}}} after going through all the {{{OpenSpecial2Text}}}Checkpoints{{{CloseText}}}.
You can start over and improve your time as often as you want during {{{OpenSettingText^Settings::GetTimeLimit()^CloseText}}} minutes.
The player with the best time wins the map.
Press the {{{OpenBoldText}}}Respawn{{{CloseText}}} button (default: {{{OpenSpecial2Text}}}Backspace{{{CloseText}}}) or die to {{{OpenSpecial3Text}}}Respawn{{{CloseText}}} at the last reached checkpoint.
Press the {{{OpenBoldText}}}Give Up{{{CloseText}}} button (default: {{{OpenSpecial2Text}}}Delete{{{CloseText}}}) to {{{OpenSpecial3Text}}}Restart{{{CloseText}}} from the beginning.

Press {{{OpenSpecial4Text}}}F3{{{CloseText}}} when you're ready for the next Map (Press F3 again to change your decision).
Press {{{OpenSpecial4Text}}}F4{{{CloseText}}} to disable/enable respawning at checkpoints.
Press {{{OpenSpecial4Text}}}F5{{{CloseText}}} to disable/enable respawning from the start.
""";


ModeInfo::SetRules(ModeRules);
ModeInfo::SetStatusMessage(_("Finish the map as fast as possible."));
***

***Match_LoadHud***
***
Hud_Load(C_HudModulePath);

foreach (Module in Hud.Modules) {
    switchtype (Module) {
        case CModulePlaygroundScoresTable: Hud.ScoresTable = (Module as CModulePlaygroundScoresTable);
        default: {}
    }
}

if (Hud != Null && Hud.ScoresTable != Null) {
    Hud.ScoresTable.Scores_Sort(CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints);

    Tabs::Load();
    declare TabsLayer <=> Tabs::CreateTabPaneLayer(
        [ "ScoresTab" => "Rankings"
        , "CPTimes" => "Race"
        ], 15, 7, False);
    TabsLayer.Type = CUILayer::EUILayerType::AltMenu;
    UIManager.UIAll.UILayers.add(TabsLayer);

    Hud.ScoresTable.SetFooterText("Time limit: "^Tools::TimeLimitToText(Settings::GetTimeLimit())^" | Round limit: "^Settings::GetRoundLimit()^" | Point limit: "^Settings::GetPointLimit()^" | Warmup round: "^Settings::GetWarmupRounds()^"("^S_WarmupRoundsTime^"s)");
}
***

***Match_SpawnScreen***
***
SpawnScreen::CreateScores("Score.Points");
***

***Match_InitServer***
***
SpawnInvulnerabilityDuration = 0;
ItemList_Begin();
G_InvisibleSkinId = ItemList_AddWithSkin("DefaultPlayerModel", Constants::C_InvisibleSkin);
Items::LoadItems();
ItemList_End();
***

***Match_StartServer***
***
Obstacle::SetMode(Constants::C_Mode_Sprint);
UpdateSettings();
***

***Match_InitMap***
***
declare Integer CurrentRound;
declare LastUpdate = -1;
***

***Match_StartMap***
***
CreateUI();
UpdateSettings();

// map is invalid
if (!Obstacle::PrepareMap(ModeInfo::GetName())) {
    MB_StopMap();
    break;
}

if (Obstacle::IsPvPWeaponsMap()) {
    UsePvPWeapons = True;
}
if (Obstacle::IsPvPCollisionsMap()) {
    UsePvPCollisions = True;
}
if (Obstacle::IsSameWallJumpMap()) {
    UseSameWallJump = True;
} else {
    UseSameWallJump = False;
}

UIManager.UIAll.MarkersXML = Markers::GetXML();
Layers::Update("Markers", Markers::GetLayer(S_CheckpointMarkersCount));

Items::Place();
foreach (Player in AllPlayers) {
    Player::setInitialized(Player, False);
    Obstacle::NewPlayer(Player);
}

G_State = C_State_Waiting;

Message::SendBigMessage("Waiting for "^Settings::GetMinPlayers()^" players...", 2000, 0, CUIConfig::EUISound::Default, 1);

if (S_DuoSprint) {
    declare DuoMsg = "DuoSprint mode: Players need to make teams to start the match";
    Message::SendBigMessage(DuoMsg, 2000, 0, CUIConfig::EUISound::Default, 1);
    UIManager.UIAll.SendChat(DuoMsg);
    Duo::ShowLayer();
}

CurrentRound = 0;
***

***Match_InitRound***
***
declare Boolean LastFinished;
declare Integer NumberOfPlayerRound;
declare Integer LastPlayersCount;
***

***Match_StartRound***
***

if (S_DuoSprint) {
    Duo::ShowLayer();
}

if (G_State == C_State_Waiting) {
    if (S_DuoSprint) {
        Duo::ShowLayer();
    }

    if (CurrentRound == 0) {
        Duo::Reset();

        StartTime = Now;

        if (S_MinWaitTime > 0) {
            EndTime = (StartTime + S_MinWaitTime * 1000);
        }
        else {
            EndTime = (StartTime + 10 * 1000);
        }
    }

}
else {

    // Players can choose teams only during waiting phase
    if (S_DuoSprint) {
        Duo::DisableLayer();
    }

    StartTime = Now;

    if (Settings::GetTimeLimit() > 0) {
        EndTime = (StartTime + Settings::GetTimeLimit() * 1000 * 60);
    }
    else {
        EndTime = -1;
    }

    CurrentRound += 1;


    G_FirstPlayer = NullId;
    LastFinished = False;
    NumberOfPlayerRound = Players.count;
    G_FinishedScores.clear();

    declare Boolean[Ident] ColoredPlayer = [];
    declare CurrentColor = 1;
    foreach (Player in Players) {

        declare IsColored = ColoredPlayer.existskey(Player.Id) && ColoredPlayer[Player.Id];

        if (!IsColored) {
            declare UI <=> UIManager.GetUI(Player);

            if (UI != Null)
            {
                declare netread Text Net_DuoClickedPlayer for UI = "";
                foreach (Mate in Players) {
                    if (Mate.User.Login == Net_DuoClickedPlayer) {
                        Player.ForceColor = C_Colors[CurrentColor % C_Colors.count];
                        Mate.ForceColor = C_Colors[CurrentColor % C_Colors.count];
                        ColoredPlayer[Player.Id] = True;
                        ColoredPlayer[Mate.Id] = True;
                        CurrentColor += 1;
                        break;
                    }
                }
            }
        }

       Player_NewRound(Player);
       G_FinishedScores[Player.Score.Id] = False;
    }

    declare netwrite Net_IsWarmup for Teams[0] = False;
    Net_IsWarmup = CurrentRound <= Settings::GetWarmupRounds();

    if (Net_IsWarmup) {
        Message::SendBigMessage("Warmup round "^ CurrentRound ^"!", 2000, 0, CUIConfig::EUISound::StartRound, 1);

        if (Settings::GetWarmupRoundsTime() > 0) {
            EndTime = (StartTime + Settings::GetWarmupRoundsTime() * 1000);
        }
        else {
            EndTime = -1;
        }

        if (Obstacle::IsRandomizerMap()) {
            RNG::ClearLandmarks();
            Layers::Update("Markers", Markers::GetLayer(S_CheckpointMarkersCount));
        }
    }
    else {
        Message::SendBigMessage("Starting round "^ CurrentRound - Settings::GetWarmupRounds() ^"!", 2000, 0, CUIConfig::EUISound::StartRound, 1);

        if (Obstacle::IsRandomizerMap()) {
            declare Text Seed = RNG::RandomizeLandmarks(
                Obstacle::GetRNGLandmarks(), Obstacle::GetRNGTargetNumbers(),
                Obstacle::GetSpawnLandmarks(), Obstacle::GetGoalLandmarks()
            );
            Layers::Update("Markers", Markers::GetLayer(S_CheckpointMarkersCount));

            UIManager.UIAll.SendChat("""Map randomized with the seed $<$f80{{{Seed}}}$>""");
        }
    }
}
LastPlayersCount = Players.count;
***

***Match_Yield***
***
SpectatorCount::Yield();
***

***Match_PlayLoop***
***
if (LastUpdate + C_SettingsUpdateInterval < Now) {
    LastUpdate = Now;
    UpdateSettings();
}

if (Settings::GetForceInvisibleSkin()) {
    Obstacle::UpdatePlayersSkin(G_InvisibleSkinId);
} else {
    Obstacle::UpdatePlayersSkin(NullId);
}

if (G_State == C_State_Waiting)
{

    declare CanPlay = Players.count >= Settings::GetMinPlayers();

    // First round has a different waiting time, S_MinWaitTime.
    // It can be used to wait for every player to connect when switching maps.
    // It is also used to wait for players to create and change teams in DuoSprint.

    if (S_DuoSprint) {
        declare IsEveryoneInTeam = Duo::UpdateLayer();

        // First round we wait for all players to be in team then during match only 2 teams is enough to start (to handle players leaving)
        CanPlay = CanPlay && (IsEveryoneInTeam || CurrentRound != 0 && Duo::GetTeamCount() >= 1);
    }

    if (CanPlay)
    {
        // CurrentRound == 0 ? EndTime should be Now + S_MinWaitTime, it's the waiting time for the first round
        // CurrentRound != 0 ? EndTime should be Now + S_RoundCooldown, it's the waiting time between rounds
        if (EndTime > 0 && Now > EndTime) {
             MB_StopRound();
        }
    }
}
else {

    foreach (Event in PendingEvents) {
        switch (Event.Type) {

            case CSmModeEvent::EType::OnArmorEmpty: {
                // Discard the defaut behaviour (e.g Player is eliminated)
                Events::Invalid(Event);

                declare CSmPlayer Victim = Null;

                switchtype (Event.VictimEntity) {
                    case CSmPlayer: {
                        Victim = (Event.VictimEntity as CSmPlayer);
                    }
                    default: {
                        continue;
                    }
                }

                // Dont respawn if the player has the offzone item
                if (Victim.IsInOffZone) {
                    declare ItemBuffs = Player::getBuffTimes(Victim);
                    if (ItemBuffs.existskey(Constants::C_ItemOffzone) && ItemBuffs[Constants::C_ItemOffzone] >= Now) {
                        continue;
                    }
                }

                // put back
                Obstacle::ObsRespawnPlayer(Victim);
            }

            case CSmModeEvent::EType::OnHit: {
                // Disable the loose of armor when hit
                Events::Invalid(Event);
            }

            case CSmModeEvent::EType::OnPlayerRequestRespawn: {
                declare ScoreId = Event.Player.Score.Id;

                declare CanSpawn = G_FinishedScores.existskey(ScoreId) && !G_FinishedScores[ScoreId];

                // Don't respawn if the player is alone in DuoSprint
                if (S_DuoSprint) {
                    declare UI <=> UIManager.GetUI(Event.Player);
                    declare HasMatched = False;
                    if (UI != Null) {
                        declare netwrite Boolean Net_DuoClickedMatched for UI = False;
                        if (Net_DuoClickedMatched) {
                            HasMatched = True;
                        }
                    }
                    CanSpawn = CanSpawn && HasMatched;
                }
                // Respawn only when the player hasn't finished
                if (CanSpawn) {
                    // put back
                    Obstacle::ObsRespawnPlayer(Event.Player);
                }

                // check if matched?

                Events::Invalid(Event);
            }

            case CSmModeEvent::EType::OnPlayerTouchesObject: {
                if (Event.Object != Null && Event.Player != Null && Items::PickupItems(Event)) {
                    Events::Valid(Event);
                } else {
                    Events::Invalid(Event);
                }
            }

            case CSmModeEvent::EType::OnCommand: {
                if (Event.CommandName == "Command_TogglePvPWeapons") {
                    UsePvPWeapons = Event.CommandValueBoolean;
                }
                else if (Event.CommandName == "Command_TogglePvPCollisions") {
                    UsePvPCollisions = Event.CommandValueBoolean;
                }
            }

            case CSmModeEvent::EType::OnPlayerTriggersSector: {
                declare TookGoal = Obstacle::HandleCapture(Event.Player);
                if (TookGoal) {
                    declare LastRun = Player::getLastRun(Event.Player);

                    if (G_FirstPlayer == NullId) {
                        declare TimeLeft = LastRun / 3;
                        if (TimeLeft > S_MaxTimeLeft * 1000)
                            TimeLeft = S_MaxTimeLeft * 1000;
                        else if (TimeLeft < S_MinTimeLeft * 1000)
                            TimeLeft = S_MinTimeLeft * 1000;

                        EndTime = Now + TimeLeft;
                        G_FirstPlayer = Event.Player.Score.Id;

                        UIManager.UIAll.SendChat(MM_TL::Compose(_("$<%1$><$ff0 was first to the goal!"), (Event.Player as CPlayer).User.Name));
                    }
                    G_FinishedScores[Event.Player.Score.Id] = True;

                    declare FinishedCount = 0;
                    foreach (ScoreId => HasFinished in G_FinishedScores) {
                        if (HasFinished) FinishedCount += 1;
                    }

                    if (FinishedCount == G_FinishedScores.count) {
                        EndTime = Now + 1;
                    }

                    Obstacle::Private_UpdatePlayerBestTime(Event.Player);
                    UnspawnPlayer(Event.Player);
                }
                Events::Valid(Event);
            }

            default: {
                Events::Valid(Event);
            }
        }
    }


    foreach (Player in Players) {
        switch (Player.SpawnStatus) {

            case CSmPlayer::ESpawnStatus::NotSpawned: {

                declare CanSpawn = !Player.RequestsSpectate;

                // Don't respawn if the player is alone in DuoSprint
                if (S_DuoSprint) {
                    declare UI <=> UIManager.GetUI(Player);
                    declare HasMatched = False;
                    if (UI != Null) {
                        declare netwrite Boolean Net_DuoClickedMatched for UI = False;
                        if (Net_DuoClickedMatched) {
                            HasMatched = True;
                        }
                    }

                    CanSpawn = CanSpawn && HasMatched;
                }

                // A player can spawn if it's a new player or he hasnt finished yet
                CanSpawn = CanSpawn && (!G_FinishedScores.existskey(Player.Score.Id) || !G_FinishedScores[Player.Score.Id]);

                if (CanSpawn) {

                    // Spawn new players
                    if (!G_FinishedScores.existskey(Player.Score.Id)) {
                        Player_NewRound(Player);
                        G_FinishedScores[Player.Score.Id] = False;
                    }

                    Obstacle::ObsRespawnPlayer(Player);
                }

            }

            case CSmPlayer::ESpawnStatus::Spawned: {
                if (UsePvPWeapons != G_LastUsePvPWeapons){
                    if (UsePvPWeapons)
                        Player::setUsedPvPWeapons(Player, True);
                }
                if (UsePvPCollisions != G_LastUsePvPCollisions){
                    if (UsePvPCollisions)
                        Player::setUsedPvPCollisions(Player, True);
                }

                SpecKeys::UpdateLayer(Player);

                // Unlimited stam
                declare StaminaUnlimited for Player = False;
                if (StaminaUnlimited && Player.Stamina != ML::TruncInteger(Player.StaminaMaxValue / 1.8)) {
                    Player.Stamina = ML::TruncInteger(Player.StaminaMaxValue / 1.8);
                }

                // Effects on respawn
                declare PlayerHasRespawned for Player = False;
                if (PlayerHasRespawned) {
                    Weapons::FillUpPlayerAmmo(Player);
                    PlayerHasRespawned = False;
                }


                // Manage item effects
                declare ItemBuff = Player::getBuffTimes(Player);
                foreach (Name => Time in ItemBuff) {
                    if (Time < Now) continue;
                    switch (Name) {
                        // Progressively grant ammo
                        case Constants::C_ItemAmmo: {
                            declare AmmoItemBuffDuration for Player = 0.;
                            if (AmmoItemBuffDuration <= 0.) continue;
                            declare AmmoItemBuffAmount for Player = 1.;

                            declare AmmoItemStart = Time - AmmoItemBuffDuration * 1000;
                            declare TickDuration = 1000. * AmmoItemBuffDuration / AmmoItemBuffAmount;
                            declare AmmoItemBuffTicks for Player = 0;

                            if (Now > AmmoItemStart + AmmoItemBuffTicks * TickDuration)
                            {
                                AddPlayerAmmo(Player, SM::GetWeapon(Player.CurWeapon), 1.);
                                AmmoItemBuffTicks += 1;
                            }
                        }
                    }
                }
            }
        }
    }

    if (LastPlayersCount != Players.count) {
        LastPlayersCount = Players.count;


        if (S_DuoSprint) {
            declare IsEveryoneInTeam = Duo::UpdateLayer();

            // A player either left or crashed, so we need to update the match list and put its mate to spec
            if (!IsEveryoneInTeam) {

                foreach (Player in Players) {
                    declare UI <=> UIManager.GetUI(Player);
                    if (UI == Null) {
                        continue;
                    }

                    declare netwrite Boolean Net_DuoClickedMatched for UI = False;
                    if (Net_DuoClickedMatched) {
                        // Obstacle::ObsRespawnPlayer(Player);
                    }
                    else {
                        UnspawnPlayer(Player);
                    }
                }

            }
        }
    }

    if (EndTime > 0 && Now > EndTime) {
        Message::SendBigMessage(_("Time limit reached."), 2000, 0, CUIConfig::EUISound::Warning, 1);
        MB_StopRound();
    }
}


G_LastUsePvPCollisions = UsePvPCollisions;
G_LastUsePvPWeapons = UsePvPWeapons;
***

***Match_EndRound***
***
// state playing
if (G_State == C_State_Playing) {
    SM::UnspawnAllPlayers();

    if (CurrentRound > Settings::GetWarmupRounds()) {
        declare Integer[Ident] FinishedScores = [];
        foreach (ScoreId => HasFinished in G_FinishedScores) {
            if (HasFinished) FinishedScores[ScoreId] = Player::getLastRunS(Scores[ScoreId]);
        }

        FinishedScores = FinishedScores.sort();

        if (S_DuoSprint) {
            if (FinishedScores.count > 0)
            {
                declare Text[][Text] DuoAssociatesByLogin for Teams[0] = [];

                log("associates");
                log(DuoAssociatesByLogin);

                declare Top1Id = NullId;
                // cant do FinishedScores[0]...
                foreach (ScoreId => Run in FinishedScores) {
                    Top1Id = ScoreId;
                    break;
                }
                declare Top1Score <=> Scores[Top1Id];

                declare Top1MateId = NullId;
                if (DuoAssociatesByLogin.existskey(Top1Score.User.Login)) {
                    declare Mates = DuoAssociatesByLogin[Top1Score.User.Login];
                    if (Mates.count >= 1) {
                        declare Mate = Mates[0];
                        foreach (Score in Scores) {
                            if (Score.User.Login == Mate) {
                                Top1MateId = Score.Id;
                                break;
                            }
                        }
                    }
                }

                if (Top1MateId != NullId) {
                    declare Top2Id = NullId;
                    declare Top2MateId = NullId;
                    declare Top3Id = NullId;
                    declare Top3MateId = NullId;

                    if (FinishedScores.count >= 3)  {
                        declare I = 0;
                        foreach (ScoreId => Run in FinishedScores) {
                            if (I == 1) {
                                Top2Id = ScoreId;
                            }
                            else if (I == 2) {
                                Top3Id = ScoreId;
                                break;
                            }
                            I += 1;
                        }

                        if (Scores.existskey(Top2Id) && DuoAssociatesByLogin.existskey(Scores[Top2Id].User.Login)) {
                            declare Mates = DuoAssociatesByLogin[Scores[Top2Id].User.Login];
                            if (Mates.count >= 1) {
                                declare Mate = Mates[0];
                                foreach (Score in Scores) {
                                    if (Score.User.Login == Mate) {
                                        Top2MateId = Score.Id;
                                        break;
                                    }
                                }
                            }
                        }

                        if (Scores.existskey(Top3Id) && DuoAssociatesByLogin.existskey(Scores[Top3Id].User.Login)) {
                            declare Mates = DuoAssociatesByLogin[Scores[Top3Id].User.Login];
                            if (Mates.count >= 1) {
                                declare Mate = Mates[0];
                                foreach (Score in Scores) {
                                    if (Score.User.Login == Mate) {
                                        Top3MateId = Score.Id;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else if (FinishedScores.count >= 2)  {
                        declare I = 0;
                        foreach (ScoreId => Run in FinishedScores) {
                            if (I == 1) {
                                Top2Id = ScoreId;
                                break;
                            }
                            I += 1;
                        }

                        if (Scores.existskey(Top2Id) && DuoAssociatesByLogin.existskey(Scores[Top2Id].User.Login)) {
                            declare Mates = DuoAssociatesByLogin[Scores[Top2Id].User.Login];
                            if (Mates.count >= 1) {
                                declare Mate = Mates[0];
                                foreach (Score in Scores) {
                                    if (Score.User.Login == Mate) {
                                        Top2MateId = Score.Id;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    declare Top1Done = False;
                    declare Top2Done = False;
                    declare Top3Done = False;

                    declare Top1Points = 3;
                    declare Top2Points = 2;
                    declare Top3Points = 3;
                    declare BonusPoints = 2;

                    if (Top2Id != NullId && Scores[Top1MateId].User.Login == Scores[Top2Id].User.Login)
                    {
                        // top1's mate is top 2
                        Scores::SetPlayerRoundPoints(Top1Score, Top1Points + BonusPoints);
                        Scores::SetPlayerRoundPoints(Scores[Top1MateId], Top1Points + BonusPoints);

                        Top1Done = True;
                        Top2Done = True;
                    }
                    else if (Top3Id != NullId && Scores[Top1MateId].User.Login == Scores[Top3Id].User.Login)
                    {
                        // top1's mate is top 3
                        Scores::SetPlayerRoundPoints(Top1Score, Top1Points + BonusPoints);
                        Scores::SetPlayerRoundPoints(Scores[Top1MateId], Top1Points + BonusPoints);

                        Top1Done = True;
                        Top3Done = True;
                    }
                    else
                    {
                        // top1 is alone
                        Scores::SetPlayerRoundPoints(Top1Score, Top1Points);

                        Top1Done = True;
                    }

                    if (!Top2Done && Top2Id != NullId)
                    {
                        if (Top3Id != NullId && Scores[Top2MateId].User.Login == Scores[Top3Id].User.Login)
                        {
                             // top2's mate is top3
                            Scores::SetPlayerRoundPoints(Scores[Top2Id], Top2Points + BonusPoints);
                            Scores::SetPlayerRoundPoints(Scores[Top2MateId], Top2Points + BonusPoints);

                            Top2Done = True;
                            Top3Done = True;
                        }
                        else
                        {
                             // top2 is alone
                            Scores::SetPlayerRoundPoints(Scores[Top2Id], Top2Points);

                            Top2Done = True;
                        }
                    }

                    if (!Top3Done && Top3Id != NullId)
                    {
                        // top3 is alone
                        Scores::SetPlayerRoundPoints(Scores[Top3Id], Top3Points);
                        Top3Done = True;
                    }
                }
            }
        } else {
            if (S_PointDistribution) {
                declare PointsToAdd = NumberOfPlayerRound;
                declare PreviousRun = -1;

                foreach (ScoreId => LastRun in FinishedScores) {
                    Scores::AddPlayerRoundPoints(Scores[ScoreId], PointsToAdd);

                    if (LastRun != PreviousRun) {
                        PointsToAdd -= 1;
                    }
                    PreviousRun = LastRun;
                }
            } else {
                declare PointsToAdd = S_PointsMax;
                declare PreviousRun = -1;

                foreach (ScoreId => LastRun in FinishedScores) {
                    Scores::AddPlayerRoundPoints(Scores[ScoreId], PointsToAdd);

                    if (LastRun != PreviousRun) {
                        if (PointsToAdd - S_PointsDeduced > S_PointsMin) {
                            PointsToAdd -= S_PointsDeduced;
                        }
                        else {
                            PointsToAdd = S_PointsMin;
                        }
                    }
                    PreviousRun = LastRun;
                }

                foreach (Player in Players) {
                    declare PlayerScore <=> Player.Score;
                    if (PlayerScore != Null) {
                        Scores::AddPlayerRoundPoints(Scores[PlayerScore.Id], Player::getCpProgress(Player));
                    }
                }
            }
        }
    }

    declare Message = _("|Match|Draw");
    if (Scores.existskey(G_FirstPlayer)) {
        Message = MM_TL::Compose(_("$<%1$> wins the round!"), Scores[G_FirstPlayer].User.Name);
    }

    Message::SendBigMessage(Message, 2000, 0, CUIConfig::EUISound::EndRound, 0);
    MB_Sleep(3000);

    Scores::AffectPlayersRoundToMapPoints();

    declare BestPlayerScore <=> Scores::GetBestPlayerMapPoints(Scores::C_Order_Descending);
    declare MostPointsScore <=> Scores[0];
    foreach (Score in Scores) {
        if (Score.Points > MostPointsScore.Points) {
            MostPointsScore <=> Score;
        }
    }
    declare NbWinners = 0;
    foreach (Score in Scores) {
        if (Score.Points == MostPointsScore.Points) {
            NbWinners += 1;
        }
    }

    if (BestPlayerScore == Null && (MostPointsScore.Points >= S_PointLimit || CurrentRound - Settings::GetWarmupRounds() >= Settings::GetRoundLimit())) {
        declare MaxWinner = 1;
        if (S_DuoSprint) {
            MaxWinner = 2;
        }
        if (NbWinners > MaxWinner) {
            Message::SendBigMessage("Draw! A new round will start while there is a draw.", 5000, 0, CUIConfig::EUISound::Warning, 1);
        }
        else {
            MB_StopMap();
        }
    }

    if (BestPlayerScore != Null && (BestPlayerScore.Points >= S_PointLimit || CurrentRound - Settings::GetWarmupRounds() >= Settings::GetRoundLimit())) {
        MB_StopMap();
    }
    else {
        G_State = C_State_Waiting;

        if (Settings::GetRoundCooldown() > 0) {
            EndTime = Now + Settings::GetRoundCooldown() * 1000;
        }
    }
}

// State waiting
else {
    G_State = C_State_Playing;
}
***

***Match_EndMap***
***
Items::Destroy();
EndTime = -1;

UIManager.UIAll.MarkersXML = "";
SM::UnspawnAllPlayers();

declare BestPlayerScore <=> Scores::GetBestPlayerMapPoints(Scores::C_Order_Descending);
if (BestPlayerScore != Null) {
    Scores::SetPlayerWinner(BestPlayerScore);
} else {
    Scores::ResetPlayerWinner();
}

DestroyUI();
***

***Match_BeforeCloseLadder***
***
DoNothing();
***

***Match_AfterCloseLadder***
***
DoNothing();
***

***Match_EndServer***
***
SpawnScreen::DestroyRules();
SpawnScreen::DestroyMapInfo();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
Void DoNothing(){}

Void CreateUI() {
    Layers::Create("Chrono", Chrono::GetLayer());
    Layers::Create("TimeDiff", TimeDiff::GetLayer());
    Layers::Create("CpProgress", CpProgress::GetLayer());
    Layers::Create("CPTimes", CPTimes::GetLayer());
    Layers::Create("SpectatorCount", SpectatorCount::GetLayer());
    Layers::Create("SpecKeys", SpecKeys::GetLayer());
    Layers::Create("Duo", Duo::GetLayer());

    Layers::Create("Markers");
    Layers::SetType("Markers", CUILayer::EUILayerType::Markers);
    Layers::Create("Items", Items::CreateLayerItems());

    Layers::Attach("Chrono");
    Layers::Attach("TimeDiff");
    Layers::Attach("CpProgress");
    Layers::Attach("CPTimes");
    Layers::Attach("Markers");
    Layers::Attach("Items");
    Layers::Attach("SpectatorCount");
    Layers::Attach("SpecKeys");
    Layers::Attach("Duo");
}

Void DestroyUI() {
    Layers::Detach("Chrono");
    Layers::Detach("TimeDiff");
    Layers::Detach("CpProgress");
    Layers::Detach("CPTimes");
    Layers::Detach("Markers");
    Layers::Detach("Items");
    Layers::Detach("SpectatorCount");
    Layers::Detach("SpecKeys");
    Layers::Detach("Duo");

    UIManager.UILayerDestroyAll();
}

Void Player_NewRound(CSmPlayer _Player)
{
    Player::setStartTime(_Player, 0);
    Player::setCpProgress(_Player, 0);
    Player::setUsedJump(_Player, False);
    Player::setLastCheckpoint(_Player, NullId);
    Player::clearBuffTimes(_Player);

    Player::setRespawnCount(_Player, 0);
    Player::clearLastCPTimes(_Player);

    //Obstacle::ObsRespawnPlayer(_Player);

    Player::setCpProgress(_Player, 0);
    Player::setBestRun(_Player, -1);

    Obstacle::Private_UpdatePlayerRsCounter(_Player);
    Obstacle::Private_UpdatePlayerBestTime(_Player);
}

Void UpdateSettings() {
    if (S_TimeLimit != Settings::GetTimeLimit()) {
        Settings::SetTimeLimit(S_TimeLimit);

        if (Hud != Null && Hud.ScoresTable != Null) {
            Hud.ScoresTable.SetFooterText("Time limit: "^Tools::TimeLimitToText(Settings::GetTimeLimit())^" | Round limit: "^Settings::GetRoundLimit()^" | Point limit: "^Settings::GetPointLimit()^" | Warmup round: "^Settings::GetWarmupRounds()^"("^S_WarmupRoundsTime^"s)");
        }

        declare netwrite Net_IsWarmup for Teams[0] = False;

        if (!Net_IsWarmup && S_TimeLimit > 0) {
            EndTime = StartTime + (S_TimeLimit * 60 * 1000);
        } else if (!Net_IsWarmup) {
            EndTime = -1;
        }
    }

    declare Boolean ForceInvisibleSkin = S_ForceInvisibleSkin && G_ForceInvisibleSkin;
    if (ForceInvisibleSkin != Settings::GetForceInvisibleSkin()) {
        Settings::SetForceInvisibleSkin(ForceInvisibleSkin);

        if (Settings::GetForceInvisibleSkin()) {
            Obstacle::UpdatePlayersSkin(G_InvisibleSkinId);
        } else {
            Obstacle::UpdatePlayersSkin(NullId);
        }
    }

    if (S_RoundLimit != Settings::GetRoundLimit()) {
        Settings::SetRoundLimit(S_RoundLimit);

        if (Hud != Null && Hud.ScoresTable != Null) {
            Hud.ScoresTable.SetFooterText("Time limit: "^Tools::TimeLimitToText(Settings::GetTimeLimit())^" | Round limit: "^Settings::GetRoundLimit()^" | Point limit: "^Settings::GetPointLimit()^" | Warmup round: "^Settings::GetWarmupRounds()^"("^S_WarmupRoundsTime^"s)");
        }
    }

    if (S_MinPlayer != Settings::GetMinPlayers()) {
        Settings::SetMinPlayers(Settings::GetMinPlayers());
    }

    if (S_PointDistribution != Settings::GetPointDistribution()) {
        Settings::SetPointDistribution(S_PointDistribution);
    }

    if (S_PointLimit != Settings::GetPointLimit()) {
        Settings::SetPointLimit(S_PointLimit);

        if (Hud != Null && Hud.ScoresTable != Null) {
            Hud.ScoresTable.SetFooterText("Time limit: "^Tools::TimeLimitToText(Settings::GetTimeLimit())^" | Round limit: "^Settings::GetRoundLimit()^" | Point limit: "^Settings::GetPointLimit()^" | Warmup round: "^Settings::GetWarmupRounds()^"("^S_WarmupRoundsTime^"s)");
        }
    }

    if (S_PointsMax != Settings::GetPointsMax()) {
        Settings::SetPointsMax(S_PointsMax);
    }

    if (S_PointsMin != Settings::GetPointsMin()) {
        Settings::SetPointsMin(S_PointsMin);
    }

    if (S_PointsDeduced != Settings::GetPointsDeduced()) {
        Settings::SetPointsDeduced(S_PointsDeduced);
    }

    if (S_RoundCooldown != Settings::GetRoundCooldown()) {
        Settings::SetRoundCooldown(S_RoundCooldown);
    }

    if (S_WarmupRoundsTime != Settings::GetWarmupRoundsTime()) {
        Settings::SetWarmupRoundsTime(S_WarmupRoundsTime);

        if (Hud != Null && Hud.ScoresTable != Null) {
            Hud.ScoresTable.SetFooterText("Time limit: "^Tools::TimeLimitToText(Settings::GetTimeLimit())^" | Round limit: "^Settings::GetRoundLimit()^" | Point limit: "^Settings::GetPointLimit()^" | Warmup round: "^Settings::GetWarmupRounds()^"("^S_WarmupRoundsTime^"s)");
        }

        declare netwrite Net_IsWarmup for Teams[0] = False;

        if (Net_IsWarmup && S_WarmupRoundsTime > 0) {
            EndTime = StartTime + (S_WarmupRoundsTime * 1000);
        } else if (Net_IsWarmup) {
            EndTime = -1;
        }
    }

    if (S_WarmupRounds != Settings::GetWarmupRounds()) {
        Settings::SetWarmupRounds(S_WarmupRounds);

        if (Hud != Null && Hud.ScoresTable != Null) {
            Hud.ScoresTable.SetFooterText("Time limit: "^Tools::TimeLimitToText(Settings::GetTimeLimit())^" | Round limit: "^Settings::GetRoundLimit()^" | Point limit: "^Settings::GetPointLimit()^" | Warmup round: "^Settings::GetWarmupRounds()^"("^S_WarmupRoundsTime^"s)");
        }
    }

    if (S_MinTimeLeft != Settings::GetMinTimeLeft()) {
        Settings::SetMinTimeLeft(S_MinTimeLeft);
    }

    if (S_MaxTimeLeft != Settings::GetMaxTimeLeft()) {
        Settings::SetMaxTimeLeft(S_MaxTimeLeft);
    }

    if (S_CheckpointMarkersCount != Settings::GetCheckpointMarkersCount()) {
        Settings::SetCheckpointMarkersCount(S_CheckpointMarkersCount);
        Layers::Update("Markers", Markers::GetLayer(S_CheckpointMarkersCount));
    }
}
