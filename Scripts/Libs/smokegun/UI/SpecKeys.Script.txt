#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/miltant/Nadeo_Fork/CustomUI.Script.txt" as CustomUI

#Const  Version     "2023-22-04"
#Const  ScriptName  "SpecKeys.Script.txt"

#Struct Keys {
    Boolean Up;
    Boolean Right;
    Boolean Down;
    Boolean Left;
    Boolean LClick;
    Boolean RClick;
    Boolean Space;
    Boolean Esc;
}

Void UpdateLayer(CSmPlayer _Player)
{
    declare UI = UIManager.GetUI(_Player);

    if (UI == Null)
        return;
    declare netread Keys MyKeys for UI;
    declare netwrite Keys LastKeys for _Player;
    LastKeys = MyKeys;
}

Text GetLayer() {
    CustomUI::Add("Frame_SpecKeys", <0., -35.>, <45., 20.>, True);
    return """
<manialink version="1" name="Obstacle:SpecKeys">
    <frame id="Frame_SpecKeys" scale="0.5" class="LibCustomUI_Module" hidden="1">
        <frame posn="0. -35">
            <frame posn="-17. -35">
                <quad id="Down" posn="0 0" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Arrow_Down.png" opacity="0.5"/>
                <quad id="Up" posn="0 15" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Arrow_Up.png" opacity="0.5"/>
                <quad id="Right" posn="15 0" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Arrow_Right.png" opacity="0.5"/>
                <quad id="Left" posn="-15 0" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Arrow_Left.png" opacity="0.5"/>
                <quad id="Space" posn="35 -2" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Space.png" opacity="0.5"/>
                <frame posn="35 13">
                    <quad id="MouseRight" z-index="1" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Mouse_Right.png" opacity="0.0"/>
                    <quad id="MouseLeft" z-index="1" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Mouse_Left.png" opacity="0.0"/>
                    <quad id="Mouse" sizen="20 20" image="file://Media/Manialinks/Keyboard/Dark/Keyboard_Black_Mouse_Simple.png" opacity="0.5"/>
                </frame>
            </frame>
        </frame>
    </frame>
<script><!--
    #Include "TextLib" as TL

    #Const KC_SPACE 119
    #Const KC_W 132
    #Const KC_S 114
    #Const KC_A 11
    #Const KC_D 28
    #Const KC_LCLICK 145
    #Const KC_RCLICK 146

    #Const KC_Z 144
    #Const KC_Q 105

    #Const KC_DEL 30
    #Const KC_HOME 56
    #Const KC_END 34
    #Const KC_PGDOWN 79

    #Const KC_UP 128
    #Const KC_DOWN 32
    #Const KC_RIGHT 110
    #Const KC_LEFT 66

    #Const KC_LCTRL 65
    #Const KC_RCTRL 108
    #Const KC_ALTS 67

    #Const KC_ESC 67

    #Struct Keys {
        Boolean Up;
        Boolean Right;
        Boolean Down;
        Boolean Left;
        Boolean LClick;
        Boolean RClick;
        Boolean Space;
        Boolean Esc;
    }

    declare CMlFrame Frame_SpecKeys;
    declare CMlQuad Quad_Space;
    declare CMlQuad Quad_Down;
    declare CMlQuad Quad_Up;
    declare CMlQuad Quad_Right;
    declare CMlQuad Quad_Left;
    declare CMlQuad Quad_LClick;
    declare CMlQuad Quad_RClick;
    declare CMlQuad Quad_Mouse;

    declare Keys Previous;

    Void UpdatePlayer() {
        declare netwrite Keys MyKeys for UI;

        declare UpPressed = IsKeyPressed(KC_W) || IsKeyPressed(KC_Z) || IsKeyPressed(KC_HOME) || IsKeyPressed(KC_UP);
        declare DownPressed = IsKeyPressed(KC_S) || IsKeyPressed(KC_END) || IsKeyPressed(KC_DOWN);
        declare LeftPressed = IsKeyPressed(KC_A) || IsKeyPressed(KC_Q) || IsKeyPressed(KC_DEL) || IsKeyPressed(KC_LEFT);
        declare RightPressed = IsKeyPressed(KC_D) || IsKeyPressed(KC_PGDOWN) || IsKeyPressed(KC_RIGHT);

        if (Previous.Up != UpPressed) {
            Previous.Up = UpPressed;
            MyKeys.Up = Previous.Up;
        }

        if (Previous.Down != DownPressed) {
            Previous.Down = DownPressed;
            MyKeys.Down = Previous.Down;
        }

        if (Previous.Left != LeftPressed) {
            Previous.Left = LeftPressed;
            MyKeys.Left = Previous.Left;
        }

        if (Previous.Right != RightPressed) {
            Previous.Right = RightPressed;
            MyKeys.Right = Previous.Right;
        }

        if (Previous.Space != IsKeyPressed(KC_SPACE)) {
            Previous.Space = IsKeyPressed(KC_SPACE);
            MyKeys.Space = Previous.Space;
        }

        if (Previous.LClick != IsKeyPressed(KC_LCLICK)) {
            Previous.LClick = IsKeyPressed(KC_LCLICK);
            MyKeys.LClick = Previous.LClick;
        }

        if (Previous.RClick != IsKeyPressed(KC_RCLICK)) {
            Previous.RClick = IsKeyPressed(KC_RCLICK);
            MyKeys.RClick = Previous.RClick;
        }

        if (Previous.Esc != IsKeyPressed(KC_ESC)) {
            Previous.Esc = IsKeyPressed(KC_ESC);
            MyKeys.Esc = Previous.Esc;
        }
    }

    Void UpdateSpec() {
        declare LocalPlayer <=> InputPlayer;
        if (GUIPlayer != Null) LocalPlayer <=> GUIPlayer;
        if (LocalPlayer == Null) return;

        declare netread Keys LastKeys for LocalPlayer;

        if ( LastKeys.Up && Quad_Up.Opacity != 1.0)
            Quad_Up.Opacity = 1.0;
        else if (! LastKeys.Up && Quad_Up.Opacity != 0.5)
            Quad_Up.Opacity = 0.5;

        if ( LastKeys.Down && Quad_Down.Opacity != 1.0)
            Quad_Down.Opacity = 1.0;
        else if (! LastKeys.Down && Quad_Down.Opacity != 0.5)
            Quad_Down.Opacity = 0.5;

        if ( LastKeys.Left && Quad_Left.Opacity != 1.0)
            Quad_Left.Opacity = 1.0;
        else if (! LastKeys.Left && Quad_Left.Opacity != 0.5)
            Quad_Left.Opacity = 0.5;

        if ( LastKeys.Right && Quad_Right.Opacity != 1.0)
            Quad_Right.Opacity = 1.0;
        else if (! LastKeys.Right && Quad_Right.Opacity != 0.5)
            Quad_Right.Opacity = 0.5;

        if ( LastKeys.LClick && Quad_LClick.Opacity != 1.0)
            Quad_LClick.Opacity = 1.0;
        else if (! LastKeys.LClick && Quad_LClick.Opacity != 0.5)
            Quad_LClick.Opacity = 0.5;

        if ( LastKeys.RClick && Quad_RClick.Opacity != 1.0)
            Quad_RClick.Opacity = 1.0;
        else if (! LastKeys.RClick && Quad_RClick.Opacity != 0.5)
            Quad_RClick.Opacity = 0.5;

        if ( LastKeys.Space && Quad_Space.Opacity != 1.0)
            Quad_Space.Opacity = 1.0;
        else if (! LastKeys.Space && Quad_Space.Opacity != 0.5)
            Quad_Space.Opacity = 0.5;

        // if ((LastKeys.LClick || LastKeys.RClick)  && Quad_Mouse.Opacity != 1.0)
        //     Quad_Mouse.Opacity = 1.0;
        // else if (! (LastKeys.LClick || LastKeys.RClick) && Quad_Mouse.Opacity != 0.5)
        //     Quad_Mouse.Opacity = 0.5;
    }

    main() {
        {{{CustomUI::InjectMLInit()}}}
        wait(InputPlayer != Null && Page != Null);

        Frame_SpecKeys <=> (Page.GetFirstChild("Frame_SpecKeys") as CMlFrame);
        Quad_Space <=> (Page.GetFirstChild("Space") as CMlQuad);
        Quad_Down <=> (Page.GetFirstChild("Down") as CMlQuad);
        Quad_Up <=> (Page.GetFirstChild("Up") as CMlQuad);
        Quad_Right <=> (Page.GetFirstChild("Right") as CMlQuad);
        Quad_Left <=> (Page.GetFirstChild("Left") as CMlQuad);
        Quad_LClick <=> (Page.GetFirstChild("MouseLeft") as CMlQuad);
        Quad_RClick <=> (Page.GetFirstChild("MouseRight") as CMlQuad);
        Quad_Mouse <=> (Page.GetFirstChild("Mouse") as CMlQuad);

        Previous.Down = False;
        Previous.Up = False;
        Previous.Left = False;
        Previous.Right = False;
        Previous.Space = False;
        Previous.RClick = False;
        Previous.LClick = False;
        Previous.Esc = False;

        while (True) {
            yield;
            
            if (!IsSpectator) {
                UpdatePlayer();
            }
            
            UpdateSpec();
            
            {{{CustomUI::InjectMLLoop()}}}
        }
    }
--></script>
</manialink>""";
}
