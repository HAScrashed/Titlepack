/*********************************************
* Obstacle Library                           *
* Author:  smokegun                          *
*                                            *
* Obstacle functions.                        *
*********************************************/

#Include "TextLib" as TL

#Include "Libs/Nadeo/Log.Script.txt" as Log
#Include "Libs/Nadeo/Json2.Script.txt" as Json
#Include "Libs/Nadeo/ShootMania/SM3.Script.txt" as SM

#Include "Libs/smokegun/Constants.Script.txt" as Constants

/*********************************************
 CONSTANTS
*********************************************/
#Const Version "2018-10-01"
#Const ScriptName "ObstacleRecords.Script.txt"

/*********************************************
  GLOBALES
*********************************************/
// General globals
declare Text G_Token;
declare Text G_PostHeaders;
declare Text G_GetHeaders;
declare Text G_TokenSuffix;
declare Integer G_HostUrlLength;

// Login
declare Ident G_LoginRequestId;
declare Boolean G_IsLoggedIn;
declare Integer G_LastRequestAttempt;

// Requests
declare Text[] G_ToPost_Url;
declare Text[] G_ToPost_Data;
declare Text[Ident] G_CurrRequest;

// State (what the lib is doing)
declare Integer G_State;
declare Integer G_PreviousState;

/////////////////////////////////////////////////////////////////
/////////////////////       TOOLS       /////////////////////////
/////////////////////////////////////////////////////////////////

Text State(Integer _State) {
    switch(_State) {
        case 0:
            return "Idle";
        case 1:
            return "Logging in";
        }
    return "unknow";
}

Boolean Contains(Text _Text, Text _Input) {
    return TL::Find(_Text, _Input, False, False);
}

// Used to create a POST request
Ident MakePost(Text _Url, Text _Data) {
    G_LastRequestAttempt = Now;

    if (Http.Requests.count >= Http.SlotsAvailable) {
        return NullId;
    }
    declare request <=> Http.CreatePost(Constants::C_HostUrl^_Url, _Data, G_PostHeaders);
    return request.Id;
}

Void SendPost(Text _Url, Text _Data) {
    if (!G_IsLoggedIn || G_LastRequestAttempt + 500 > Now) {
        Log::Log("Cannot send request "^_Url);
        G_ToPost_Url.add(_Url);
        G_ToPost_Data.add(_Data);
    } else {
        Log::Log("Send request to "^_Url);
        G_CurrRequest[MakePost(_Url, _Data)] = _Data;
    }
}

/////////////////////////////////////////////////////////////////
/////////////////////   MAIN FUNCTIONS  /////////////////////////
/////////////////////////////////////////////////////////////////

Void Login() {
    // Destroy previous login request
    if (G_LoginRequestId != NullId && Http.Requests.existskey(G_LoginRequestId)) {
        Http.Destroy(Http.Requests[G_LoginRequestId]);
    }

    declare payload = "";

    G_LoginRequestId = MakePost("Users/Login", payload);
    G_State = Constants::C_SLoggingIn;
}

// Init the API with a token
Void Init() {
    G_PostHeaders = "Content-Type: application/json\nAccept: application/xml";
    G_GetHeaders = "Accept: application/xml";
    G_HostUrlLength = TL::Length(Constants::C_HostUrl);
    Login();
}

/////////////////////////////////////////////////////////////////
/////////////////////  API FUNCTIONS    /////////////////////////
/////////////////////////////////////////////////////////////////

// Send map infos
Void ReplaceOrCreateMap() {
    declare payload = """
    {
    "name": {{{Json::GetText(Map.MapName)}}},
    "maniaplanetMapId": {{{Json::GetText(""^Map.Id)}}},
    "playerId": {{{Json::GetText(Map.AuthorLogin)}}}
    }
    """;

    SendPost("Maps/replaceOrCreate", payload);
}

// Update player infos
Void ReplaceOrCreatePlayer(CSmPlayer _Player) {
    declare payload = """
    {
    "login": {{{Json::GetText(_Player.User.Login)}}},
    "nickname": {{{Json::GetText(_Player.User.Name)}}}
    }""";

    SendPost("Players/replaceOrCreate", payload);
}

// Send records
Void PlayerFinished(CSmPlayer _Player) {
    declare LastRun for _Player.Score = -1;
    declare RespawnCount for _Player.Score = 0;
    declare payload = """
    {
    "time": {{{LastRun}}},
    "respawnCount": {{{Json::GetInteger(RespawnCount)}}},
    "playerId": {{{Json::GetText(_Player.User.Login)}}},
    "mapId": {{{Json::GetText(""^Map.Id)}}}
    }""";

    SendPost("Records/player-finished", payload);
}


/////////////////////////////////////////////////////////////////
/////////////////////      LOOP         /////////////////////////
/////////////////////////////////////////////////////////////////

Void Loop(Text _BestRecordMsg, Text _WorseRecordMsg) {

    if (G_PreviousState != G_State) {
        G_PreviousState = G_State;
    }

    if (G_IsLoggedIn) {
        /*
        /** REQUESTS PROCESSING
        */

        /*
        * G_ToPost arrays act more or less like a queue
        * We execute requests saved one by one
        */
        if (G_ToPost_Url.count > 0 && G_LastRequestAttempt + 500 < Now) {
            if (G_ToPost_Url.count != G_ToPost_Data.count) {
                Log::Error("G_ToPost_Url and G_ToPost_Data have different sizes!");
            }

            SendPost(G_ToPost_Url[0], G_ToPost_Data[0]);

            G_ToPost_Url.removekey(0);
            G_ToPost_Data.removekey(0);
        }

        /*
        * We wait for each post request's response
        */
        foreach (reqId => data in G_CurrRequest) {
            declare request <=> Http.Requests[reqId];
            if (!request.IsCompleted) continue;

            Log::Log("Request done: ("^request.StatusCode^") "^request.Url);

            // Request failed
            if (request.StatusCode == 401) {
                G_IsLoggedIn = False;
                declare ApiUrl = TL::SubString(request.Url, G_HostUrlLength, TL::Length(request.Url) - G_HostUrlLength);
                SendPost(ApiUrl, data);

                // Request succeded
            } else {
                declare response = Xml.Create(request.Result);

                if (TL::Find("player-finished", request.Url, True, True)
                    && response != Null
                    && response.Root != Null
                    && response.Root.GetFirstChild("newBest") != Null
                    && response.Root.GetFirstChild("login") != Null
                    && response.Root.GetFirstChild("old") != Null
                    && response.Root.GetFirstChild("new") != Null
                ) {

                    declare isNewBest = response.Root.GetFirstChild("newBest").TextContents == "true";
                    // TODO: Add fields to backend response
                    declare login = response.Root.GetFirstChild("login").TextContents;
                    declare old = TL::ToInteger(response.Root.GetFirstChild("old").TextContents);
                    declare new = TL::ToInteger(response.Root.GetFirstChild("new").TextContents);

                    declare Player = SM::GetPlayer(login);
                    declare PName = Player.User.Name;
                    declare NewTime = TL::TimeToText(new, True);
                    declare OldTime = TL::TimeToText(old, True);
                    declare DiffTime = TL::TimeToText(new - old, True);

                    if (isNewBest) {
                        if (_BestRecordMsg != "")
                            UIManager.UIAll.SendChat(TL::Compose(_BestRecordMsg, PName, NewTime, OldTime, DiffTime));
                    } else if (Player != Null) {
                        if (_WorseRecordMsg != "")
                            UIManager.GetUI(Player).SendChat(TL::Compose(_WorseRecordMsg, PName, NewTime, OldTime, DiffTime));
                    }

                    declare netwrite Net_RecordsUpdated for Teams[0] = Now;
                    Net_RecordsUpdated = Now;
                }

                Xml.Destroy(response);
            }

            // Destroy requests when they are done
            G_CurrRequest.removekey(reqId);
            Http.Destroy(request);

        }
    }
    else
    {
        /*
        * Wait for the login request to finish
        */
        if (G_State == Constants::C_SLoggingIn && Http.Requests.existskey(G_LoginRequestId))
        {
            declare LoginRequest <=> Http.Requests[G_LoginRequestId];

            if (LoginRequest.IsCompleted)
            {
                if (LoginRequest.StatusCode == 200)
                {
                    declare XmlResponse = Xml.Create(LoginRequest.Result);
                    if (XmlResponse != Null) {
                        if (XmlResponse.Root != Null) {
                            G_Token = XmlResponse.Root.GetFirstChild("id").TextContents;
                            G_IsLoggedIn = True;
                            G_PostHeaders = "Content-Type: application/json\nAccept: application/xml\nAuthorization: "^G_Token;
                        }
                        Xml.Destroy(XmlResponse);
                    }
                }

                // We are done logging in
                G_State = Constants::C_SIdle;
            }
        }
        // We're not logged in and doing nothing so try to reconnect
        else if (G_LastRequestAttempt + 5000 < Now)
        {
            Login();
        }
    }
}
