/************************************************
 *   Obstacle Library
 *   Author:     ahmad3
 *
 *   Reports errors to the API
 ***********************************************/

#Include "TextLib" as TL
#Include "Libs/ahmad3/RequestManager.Script.txt" as ReqMgr

/*********************************************
  TYPES
 *********************************************/

#Struct K_ErrorReportBody {
    Text method;
    Text route;
    Text body;
    Text player_login;
    Integer status_code;
    Text error;
}

/*********************************************
  CONSTANTS
 *********************************************/

#Const Version "2024-07-26"
#Const ScriptName "ErrorReport.Script.txt"

#Const C_Ev_ErrReport "apierror:report"

/*********************************************
  GLOBALES
 *********************************************/

declare ReqMgr::K_PostReqId[] G_Reqs;

/*********************************************
  FUNCTIONS
 *********************************************/

////////////////////
//// Private
////////////////////

Void Private_ReportImpl(Text _Route, Text _Body, Text _PlayerLogin, Integer _StatusCode, Text _RawError, Text _Method) {
    declare K_ErrorReportBody Body = K_ErrorReportBody {
        method = _Method,
        route = _Route,
        body = _Body,
        player_login = _PlayerLogin,
        status_code = _StatusCode,
        error = _RawError
    };

    G_Reqs.add(ReqMgr::Make(ReqMgr::K_PostRequest {
        Route = "report",
        Body = Body.tojson(),
        Headers = ReqMgr::DefaultHeaders()
    }));
}

Void Private_HandleReqs() {
    if (G_Reqs.count == 0) return;

    declare Integer[] ToRemove = [];

    for (Idx, 0, G_Reqs.count - 1) {
        if (ReqMgr::IsWaiting(G_Reqs[Idx])) {
            G_Reqs[Idx] = ReqMgr::MakePending(G_Reqs[Idx]);
            if (ReqMgr::IsWaiting(G_Reqs[Idx])) continue;
        }

        declare CHttpRequest Req <=> ReqMgr::GetReq(G_Reqs[Idx]);
        if (!Req.IsCompleted) continue;

        ToRemove.add(Idx);
        Http.Destroy(Req);
    }

    foreach (Idx => ReqIdx in ToRemove) {
        G_Reqs.removekey(ReqIdx - Idx);
    }
}

////////////////////
//// Public
////////////////////

/**
 * Returns the version of the script module.
 */
Text GetVersion() {
    return Version;
}

/**
 * Returns the name of the script module.
 */
Text GetScriptName() {
    return ScriptName;
}

Void HandleCustomEvent(CUIConfigEvent _Event) {
    if (_Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent || _Event.CustomEventType != C_Ev_ErrReport) return;

    declare Text Route = _Event.CustomEventData[0];
    declare Text Body = _Event.CustomEventData[1];
    declare Text PlayerLogin = _Event.CustomEventData[2];
    declare Integer StatusCode = TL::ToInteger(_Event.CustomEventData[3]);
    declare Text Error = _Event.CustomEventData[4];
    declare Text Method = _Event.CustomEventData[5];

    Private_ReportImpl(Route, Body, PlayerLogin, StatusCode, Error, Method);
}

Void Yield() {
    Private_HandleReqs();
}

Void ReportPost(Text _Route, Text _Body, Text _PlayerLogin, Integer _StatusCode, Text _RawError) {
    Private_ReportImpl(_Route, _Body, _PlayerLogin, _StatusCode, _RawError, "POST");
}

Void ReportPost(Text _Route, Text _Body, Integer _StatusCode, Text _RawError) {
    ReportPost(_Route, _Body, "", _StatusCode, _RawError);
}

Void ReportGet(Text _Route, Text _PlayerLogin, Integer _StatusCode, Text _RawError) {
    Private_ReportImpl(_Route, "", _PlayerLogin, _StatusCode, _RawError, "GET");
}

Void ReportGet(Text _Route, Integer _StatusCode, Text _RawError) {
    ReportGet(_Route, "", _StatusCode, _RawError);
}

Text ML_Content(Text _ModName) {
    return """//!
Void {{{_ModName}}}_ReportPost(Text _Route, Text _Body, Integer _StatusCode, Text _RawErr) {
    SendCustomEvent({{{dump(C_Ev_ErrReport)}}}, [_Route, _Body, LocalUser.Login, _StatusCode ^ "", _RawErr, "POST"]);
}

Void {{{_ModName}}}_ReportGet(Text _Route, Integer _StatusCode, Text _RawErr) {
    SendCustomEvent({{{dump(C_Ev_ErrReport)}}}, [_Route, "", LocalUser.Login, _StatusCode ^ "", _RawErr, "GET"]);
}
    """;
}