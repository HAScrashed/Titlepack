/********************************************
*	Custom SpawnScreen Library				*
*	Author:		steeffeen					*
*	Contact:	schteffens@gmail.com		*
*											*
*	Shows medal times of the current map.	*
********************************************/

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

/***************************************
	CONSTANTS
***************************************/

#Const	Version		"2013-08-25"
#Const	ScriptName	"ObstacleSpawnScreen.Script.txt"

#Const	C_Icons		[	"Gold", "Silver", "Bronze"	]

/***************************************
	GLOBALES
***************************************/

declare Ident	G_CSP_LayerScoresId;	// Id of the layer containing the scores

/***************************************
	FUNCTIONS
***************************************/

// Set the name of the mode (written in the header)
Void SetModeName(Text _ModeName) {
	SpawnScreen::SetModeName(_ModeName);
}

// Create the scores in spawn manialink
Text Private_CreateLayerScores() {
	declare Integer YOffset = 15;
	declare Integer Textsize = 9;
	declare Integer IconSize = 15;
	
	declare TimesListML = """
		<framemodel id="Model_Time">
			<quad id="Quad_Icon" sizen="{{{IconSize}}} {{{IconSize}}}" style="MedalsBig" halign="center" valign="center2"/>
			<label id="Label_Name" posn="20 0" textprefix="$w" textsize="{{{Textsize}}}" halign="left" valign="center2"/>
			<label id="Label_Time" posn="279 0" textprefix="$w" textsize="{{{Textsize + 0}}}" halign="right" valign="center2"/>
		</framemodel>""";
	foreach (Index => Icon in C_Icons) {
		TimesListML ^= """<frameinstance id="Frame_Time_{{{Icon}}}" modelid="Model_Time" posn="-138 {{{Index * -YOffset}}} 41"/>""";
	}
	
	declare Manialink = """
		<frame>
			<quad posn="0 0 -10" sizen="400 200" bgcolor="111f" halign="center" valign="center2"/>
			{{{SpawnScreen::Private_CreateHeaderText(0., 0., -55.)}}}
		</frame>
		<frame posn="0 -20">
			<quad posn="0 11 40" sizen="300 1" bgcolor="fff7" halign="center" valign="center2"/>
			{{{TimesListML}}}
		</frame>
		<script><!--
			#Include "MathLib" as MathLib
			#Include "TextLib" as TextLib
			
			#Const	C_Colors [	"Gold"		=>	<255.,	215.,	0.>,
								"Silver"	=>	<192.,	192.,	192.>,
								"Bronze"	=>	<165.,	113.,	100.>]
			
			Text DecToHex(Integer _Dec) {
				declare Hex = "F";
				
				if (_Dec >= 0 && _Dec <= 9) Hex = TextLib::ToText(_Dec);
				else {
					switch (_Dec) {
						case 10: Hex = "A";
						case 11: Hex = "B";
						case 12: Hex = "C";
						case 13: Hex = "D";
						case 14: Hex = "E";
						case 15: Hex = "F";
						default: Hex = "F";
					}
				}
				
				return Hex;
			}
			Text RgbToHex(Vec3 _RGB) {
				declare Hex = "000";
				declare Ri = MathLib::NearestInteger(_RGB.X * 15.);
				declare Gi = MathLib::NearestInteger(_RGB.Y * 15.);
				declare Bi = MathLib::NearestInteger(_RGB.Z * 15.);
				declare R = DecToHex(Ri);
				declare G = DecToHex(Gi);
				declare B = DecToHex(Bi);
				
				Hex = R^G^B;
				
				return Hex;
			}
			Vec3 ConvertToIngameColor(Vec3 _Color) {
				declare Vec3 NewColor;
				for (I, 0, 2) {
					NewColor[I] = _Color[I] / 255.;
				}
				return NewColor;
			}
			
			main() {
				wait(InputPlayer != Null);
				
				declare LastMap <=> Map;
				LastMap <=> Null;
				
				while (True) {
					yield;
					
					if (!PageIsVisible) continue;
					if (Map == LastMap) continue;
					LastMap <=> Map;
					if (Map == Null) continue;
					
					foreach (Icon => Color in C_Colors) {
						declare Frame_Time	<=> (Page.GetFirstChild("Frame_Time_"^Icon) as CMlFrame);
						declare Quad_Icon	<=> (Frame_Time.GetFirstChild("Quad_Icon") as CMlQuad);
						declare Label_Name	<=> (Frame_Time.GetFirstChild("Label_Name") as CMlLabel);
						declare Label_Time	<=> (Frame_Time.GetFirstChild("Label_Time") as CMlLabel);
						
						declare ColorText = "$"^RgbToHex(ConvertToIngameColor(Color));
						
						Quad_Icon.Substyle = "Medal"^Icon;
						Label_Name.Value = ColorText^Icon;
						
						declare TimeValue = "";
						switch (Icon) {
							case "Gold": {
								TimeValue = Map.ObjectiveTextGold;
							}
							case "Silver": {
								TimeValue = Map.ObjectiveTextSilver;
							}
							case "Bronze": {
								TimeValue = Map.ObjectiveTextBronze;
							}
						}
						if (TimeValue == "") {
							Frame_Time.Visible = False;
						} else {
							Frame_Time.Visible = True;
							Label_Time.Value = ColorText^TimeValue;
						}
					}
				}
			}
		--></script>""";
	return Manialink;
}

// Destroy the scores in the spawn screen
Void DestroyScores() {
	if (UIManager.UILayers.existskey(G_CSP_LayerScoresId)) {
		UIManager.UILayerDestroy(UIManager.UILayers[G_CSP_LayerScoresId]);
		G_CSP_LayerScoresId = NullId;
	}
}

// Create the scores in the spawn screen
Void CreateScores() {
	DestroyScores();
	
	// Create and assign the layer
	declare LayerScores <=> UIManager.UILayerCreate();
	LayerScores.Type = CUILayer::EUILayerType::ScreenIn3d;
	LayerScores.ManialinkPage = Private_CreateLayerScores();
	G_CSP_LayerScoresId = LayerScores.Id;
	UIManager.UIAll.UILayers.add(LayerScores);
}
