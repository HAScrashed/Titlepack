/************************************************
*	Obstacle Library								              *
*	Author:		smokegun  						              *
*												*
*	Items related functions.			            	*
************************************************/

#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/ShootMania/SM3.Script.txt" as SM
#Include "Libs/Nadeo/CustomUI.Script.txt" as CustomUI

/***************************************
	CONSTANTS
***************************************/

#Const	Version		"2017-07-10"
#Const	ScriptName	"Items.Script.txt"

#Const	T_ItemOffzone		"Obstacle\\OffzoneShield.Item.gbx"
#Const	T_ItemAmmo			"Obstacle\\Ammo.Item.gbx"
#Const	C_Module_Items				"ItemsModule"
#Const	C_Module_ItemsInfo			"ItemsInfoModule"

declare	Ident[Text]	G_ItemIdents;
declare CSmObject[] G_AnchorsObjects;

Void Init() {
	ItemList_Begin();
	G_ItemIdents[T_ItemOffzone] = ItemList_Add(T_ItemOffzone);
	G_ItemIdents[T_ItemAmmo] = ItemList_Add(T_ItemAmmo);
	ItemList_End();
}

Void Place() {
	foreach (AnchorLandmark in MapLandmarks_ObjectAnchor) {
		switch (AnchorLandmark.ObjectAnchor.ItemName) {
			case T_ItemOffzone: {
				declare Object <=> ObjectCreate(G_ItemIdents[T_ItemOffzone]);
				if(Object != Null) {
					G_AnchorsObjects.add(Object);
					Object.SetAnchor(AnchorLandmark.ObjectAnchor);
					declare metadata Meta_BuffDuration for AnchorLandmark = 5.;
					declare Text ItemName for Object;
					declare Real Duration for Object;
					declare Ident AnchorLandmarkId for Object;
					ItemName = T_ItemOffzone;
					Duration = Meta_BuffDuration;
					AnchorLandmarkId = AnchorLandmark.Id;
				}
			}
			case T_ItemAmmo: {
				declare Object <=> ObjectCreate(G_ItemIdents[T_ItemAmmo]);
				if(Object != Null) {
					G_AnchorsObjects.add(Object);
					Object.SetAnchor(AnchorLandmark.ObjectAnchor);
					declare metadata Meta_GrantAmmoDuration for AnchorLandmark = 0.;
					declare metadata Meta_GrantAmmoAmount for AnchorLandmark = 1.;
					declare Text ItemName for Object;
					declare Real Duration for Object;
					declare Real Amount for Object;
					declare Ident AnchorLandmarkId for Object;
					ItemName = T_ItemAmmo;
					Duration = Meta_GrantAmmoDuration;
					Amount = Meta_GrantAmmoAmount;
					AnchorLandmarkId = AnchorLandmark.Id;
				}
			}
		}
		if (Objects.count > 100) break;
	}
}

Boolean PickupItems(CSmModeEvent _Event) {
	declare ItemName for _Event.Object = "";
	switch (ItemName) {
		case T_ItemOffzone: {
			// Offzone pickup
			declare netwrite ItemBuffTimes for _Event.Player = Integer[Text];
			declare Duration for _Event.Object = 5.;
			if (!ItemBuffTimes.existskey(T_ItemOffzone) || ItemBuffTimes[T_ItemOffzone] < Now) {
				ItemBuffTimes[T_ItemOffzone] = Now + ML::NearestInteger(Duration * 1000.);
				return True;
			}
		}
		case T_ItemAmmo: {
			// Ammo item
			declare netwrite ItemBuffTimes for _Event.Player = Integer[Text];
			if (!ItemBuffTimes.existskey(T_ItemAmmo) || ItemBuffTimes[T_ItemAmmo] < Now) {
				declare Duration for _Event.Object = 0.;
				declare Amount for _Event.Object = 1.;
				
				// Set buff
				ItemBuffTimes[T_ItemAmmo] = Now + ML::NearestInteger(Duration * 1000.);
				
				// Used if duration > 0
				declare Real AmmoItemBuffDuration for _Event.Player;
				declare Real AmmoItemBuffAmount for _Event.Player;				
				AmmoItemBuffDuration = Duration;
				AmmoItemBuffAmount = Amount;
				
				// Instant grant
				if (Duration <= 0.) {
					// if amount is greater than what we can add
					// set ammo to max
					if(ML::CeilingInteger(Amount) +_Event.Player.CurAmmoUnit > _Event.Player.CurAmmoMax) {
						SetPlayerAmmo(_Event.Player, SM::GetWeapon(_Event.Player.CurWeapon),
							_Event.Player.CurAmmoMax
						);
					// else add it
					} else {
						AddPlayerAmmo(_Event.Player, SM::GetWeapon(_Event.Player.CurWeapon), Amount);
					}
				}
				return True;
			}
		}
	}
	
	return False;
}

Void Destroy() {
	foreach (Object in G_AnchorsObjects) {
		ObjectDestroy(Object);
	}
	G_AnchorsObjects.clear();
}

Text CreateLayerItems() {
	declare ItemCount = G_ItemIdents.count;
	declare Manialink = """
<manialink version="1" name="Obstacle_LayerItems">
	<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib

		#Const	C_ItemCount		{{{ItemCount}}}

		main() {
			wait(InputPlayer != Null && Page != Null && LocalUser != Null);

			declare Label_Info <=> (Page.GetFirstChild("Label_Info") as CMlLabel);

			declare Last_UIUpdate = 0;
			declare Last_LabelInfoShown = 0;
			declare Last_BuffEnds = Integer[Text];
			declare Last_BuffDurations = Integer[Text];

			{{{CustomUI::InjectMLInit()}}}

			while (True) {
				yield;

				if (!PageIsVisible || Last_UIUpdate + 50 > Now) continue;
				Last_UIUpdate = Now;

				declare LocalPlayer <=> InputPlayer;
				if (GUIPlayer != Null && GUIPlayer != LocalPlayer) LocalPlayer <=> GUIPlayer;

				declare Index = 1;
				declare netread ItemBuffTimes for LocalPlayer = Integer[Text];
				if (LocalPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
					if(ItemBuffTimes.count == 0) {
						Label_Info.Visible = False;
					}
					foreach (ItemName => BuffTime in ItemBuffTimes) {
						declare Frame <=> (Page.GetFirstChild("Frame_ItemGauge"^Index) as CMlFrame);
						if (Frame == Null) continue;
						if (BuffTime < ArenaNow) {
							if(Label_Info.Visible) {
								Label_Info.Visible = False;
							}
							continue;
						}

						declare Gauge_Item <=> (Frame.GetFirstChild("Gauge_Item") as CMlGauge);
						declare Label_Time <=> (Frame.GetFirstChild("Label_Time") as CMlLabel);
						declare Label_Item <=> (Frame.GetFirstChild("Label_Item") as CMlLabel);

						Index += 1;
						Frame.Visible = True;

						// Adjust Frame Y
						declare Source_Y for Frame = -1000.;
						if (Source_Y <= -1000.) Source_Y = Frame.AbsolutePosition.Y;
						if (LocalPlayer != InputPlayer) {
							Frame.RelativePosition.Y = Source_Y + 15.;
						} else {
							Frame.RelativePosition.Y = Source_Y;
						}

						if (!Last_BuffEnds.existskey(ItemName) || Last_BuffEnds[ItemName] != BuffTime || !Last_BuffDurations.existskey(ItemName)) {
							Last_BuffEnds[ItemName] = BuffTime;
							Last_BuffDurations[ItemName] = BuffTime - ArenaNow;
						}

						declare TimeDiff = BuffTime - ArenaNow;

						declare Ratio = TimeDiff / MathLib::ToReal(Last_BuffDurations[ItemName]);
						if (Ratio < 0.) {
							Ratio = 0.;
						} else if (Ratio > 1.) {
							Ratio = 1.;
						}
						Gauge_Item.Ratio = Ratio;

						declare TimeDiffText = MathLib::NearestInteger(TimeDiff / 100.) / 10.;
						Label_Time.Value = TimeDiffText^"s";

						declare ItemParts = TextLib::Split("\\", ItemName);
						ItemParts = TextLib::Split(".", ItemParts[ItemParts.count-1]);
						Label_Item.Value = ItemParts[0];

						if (LocalPlayer != InputPlayer || Label_Info.Visible) continue;
						Label_Info.Value = TextLib::Compose(_("You picked up the %1 Item!"), ItemParts[0]);
						Label_Info.Visible = True;
					}
				}
				for (ExtraIndex, Index, C_ItemCount) {
					declare Frame <=> (Page.GetFirstChild("Frame_ItemGauge"^ExtraIndex) as CMlFrame);
					if (Frame == Null) continue;
					Frame.Visible = False;
				}
				

				{{{CustomUI::InjectMLLoop()}}}
			}
		}
	--></script>
	<frame id="{{{C_Module_ItemsInfo}}}" class="LibCustomUI_Module">
		<label id="Label_Info" posn="0 40" sizen="110 10" translate="1" halign="center" valign="center2" hidden="1" text="hi"/>
	</frame>
	<frame id="{{{C_Module_Items}}}" class="LibCustomUI_Module">
		<framemodel id="Model_ItemGauge">
			<gauge id="Gauge_Item" sizen="80 14" color="1c6b" style="EnergyBar" drawbg="0" drawblockbg="1" halign="center" valign="center2"/>
			<label id="Label_Time" posn="0 -0.5" style="TextTitle1" textsize="2" halign="center" valign="center2"/>
			<label id="Label_Item" posn="-36.5 -0.5" style="TextTitle1" textsize="1" translate="1" halign="left" valign="center2"/>
		</framemodel>""";
	for (Index, 1, ItemCount) {
		Manialink ^= """<frameinstance id="Frame_ItemGauge{{{Index}}}" posn="0 {{{-65 + Index * 8.3}}} -15" modelid="Model_ItemGauge" hidden="1"/>""";
	}
	Manialink ^= """
	</frame>
</manialink>""";
	return Manialink;
}