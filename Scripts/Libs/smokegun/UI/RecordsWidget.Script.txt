#Include "MathLib" as ML
#Include "Libs/miltant/Nadeo_Fork/Log.Script.txt" as Log
#Include "Libs/miltant/Nadeo_Fork/Layers2.Script.txt" as Layers
#Include "Libs/miltant/Nadeo_Fork/CustomUI.Script.txt" as CustomUI
#Include "Libs/smokegun/Constants.Script.txt" as Constants

/*********************************************
    CONSTANTS
*********************************************/

#Const  Version     "2022-25-11"
#Const  ScriptName  "RecordsWidget.Script.txt"

Text Private_GetSmallRecords() {
    CustomUI::Add("Frame_Small_Records", <139., 41.5>, <44., 67.>);
    return """
<frame id="Frame_Small_Records" class="LibCustomUI_Module">
    <frame pos="139 75">
        <frame id="Frame_Background" halign="center" valign="center2" z-index="-1">
            <quad z-index="-1" size="44 67" style="BgRaceScore2" substyle="BgCardPlayer" halign="center" valign="top" scriptevents="1"/>
            <label pos="0 -1" size="40 5" text="Records" style="TextTitle3" textsize="4" halign="center" textfont="OswaldMono" maxline="1" valign="top" textemboss="1"/>
        </frame>
        <frame id="Frame_Records" pos="0 -8">
            <frameinstance modelid="small_record" pos="0 0" id="record0" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -4" id="record1" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -8" id="record2" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -12" id="record3" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -16" id="record4" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -20" id="record5" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -24" id="record6" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -28" id="record7" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -32" id="record8" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -36" id="record9" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -40" id="record10" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -44" id="record11" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -48" id="record12" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -52" id="record13" hidden="1"/>
            <frameinstance modelid="small_record" pos="0 -56" id="record14" hidden="1"/>
        </frame>
    </frame>
    <framemodel id="small_record">
        <label id="rank" pos="-20 0" size="6 4" halign="left" valign="center2" style="TextCardSmallScores2" textsize="1" text="1." textfont="OswaldMono"/>
        <label id="name" pos="-14 0" size="20 4" halign="left" valign="center2" textsize="1" text="mon super pseudo" textfont="Oswald"/>
        <label id="time" pos="20 0" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" text="00:00:01" textfont="OswaldMono"/>
    </framemodel>
</frame>
    """;
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:RecordsWidget">
<frame>
    {{{Private_GetSmallRecords()}}}
</frame>
<script><!--
    #Include "TextLib" as TL

    #Struct K_RankedRecord {
        Integer rank;
        Text login;
        Text nickname;
        Integer time;
    }
    
    #Struct K_Response {
        K_RankedRecord[] response;
    }

    declare CHttpRequest G_Req;

    Void UpdateRecords(Text _Login) {
        declare params = "?mapId="^Map.Id^"&playerId="^_Login;
        declare url = "{{{Constants::C_HostUrl}}}overview"^params;
        G_Req = Http.CreateGet(url, True, "Accept: application/json");
    }

    main() {
        {{{CustomUI::InjectMLInit()}}}
        wait(InputPlayer != Null && Page != Null);

        declare LastPlayerLogin = "";
        declare LastUpdate = -1;

        declare Frame_Widget <=> (Page.GetFirstChild("Frame_Small_Records") as CMlFrame);
        declare Frame_Records <=> (Frame_Widget.GetFirstChild("Frame_Records") as CMlFrame);
        declare netread Net_RecordsUpdated for Teams[0] = -1;

        while (True) {
            yield;

            declare LocalPlayer <=> InputPlayer;
            if (GUIPlayer != Null) LocalPlayer <=> GUIPlayer;
            if (LocalPlayer == Null) continue;

            if (LocalPlayer.User.Login != LastPlayerLogin) {
                LastUpdate = -1;
                LastPlayerLogin = LocalPlayer.User.Login;
            }

            if (Net_RecordsUpdated != LastUpdate && Frame_Widget.Visible) {
                UpdateRecords(LocalPlayer.User.Login);
                LastUpdate = Net_RecordsUpdated;
            }

            if (G_Req != Null && G_Req.IsCompleted) {
                if (G_Req.StatusCode != 200) {
                    Http.Destroy(G_Req);
                    G_Req = Null;
                    continue;
                }
                declare K_Response response;
                response.fromjson(G_Req.Result);

                declare HasLocalPlayerFinished = False;
                foreach (Idx => Control in Frame_Records.Controls) {
                    declare frame <=> (Control as CMlFrame);
                    declare rankLabel <=> (frame.GetFirstChild("rank") as CMlLabel);
                    declare nameLabel <=> (frame.GetFirstChild("name") as CMlLabel);
                    declare timeLabel <=> (frame.GetFirstChild("time") as CMlLabel);

                    if (response.response.existskey(Idx)) {
                        rankLabel.SetText(""^response.response[Idx].rank);
                        nameLabel.SetText(response.response[Idx].nickname);
                        timeLabel.SetText(TL::TimeToText(response.response[Idx].time, True));

                        if (response.response[Idx].login == LocalPlayer.User.Login)
                            HasLocalPlayerFinished = True;

                        Control.Show();
                    } else if (!HasLocalPlayerFinished && Idx == Frame_Records.Controls.count - 1) {
                        rankLabel.SetText("");
                        nameLabel.SetText(LocalPlayer.User.Name);
                        timeLabel.SetText("--:--:--");
                        Control.Show();
                    } else {
                        Control.Hide();
                    }
                }

                Http.Destroy(G_Req);
                G_Req = Null;
            }

            foreach (Event in PendingEvents) {
               switch (Event.Type) {
                    case CMlScriptEvent::Type::MouseClick: {
                        OpenLink("{{{Constants::C_WebsiteUrl}}}/map/"^Map.Id,  CMlScript::LinkType::ExternalBrowser);
                    }
                }
            }
            {{{CustomUI::InjectMLLoop()}}}
        }
    }
--></script>
</manialink>
    """;
}
