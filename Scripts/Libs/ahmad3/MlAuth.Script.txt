/************************************************
 *   Obstacle Library                            *
 *   Author:     ahmad3                          *
 *                                               *
 *   Util functions for auth system              *
 ************************************************/

#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib

#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json

/*********************************************
  CONSTANTS
 *********************************************/

#Const  Version     "2023-04-01"
#Const  ScriptName  "Auth.Script.txt"

#Struct K_Banishment {
    Integer id;
    Text date_ban;
    Integer duration;
    Text reason;
    Text banished_by;
    Boolean was_reprieved;
    Boolean is_current;
}

K_Banishment Default_Ban() {
    return K_Banishment {
		banished_by = "",
		date_ban = "",
		duration = -1,
		id = -1,
		is_current = False,
		reason = "",
		was_reprieved = False
	};
}

Text GetLayer() {
	return """
<manialink version="3" name="Obstacle:Auth">
<script><!--

#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib
#Include "TextLib" as TL

//#Const C_HostUrl "http://192.168.1.30:3001/"
#Const C_HostUrl "http://164.132.227.196/"
//#Const C_HostUrl "http://localhost:3000/"
//#Const C_HostUrl "https://api.obstacle.ovh/"
#Const C_MP_App_Id			"de1ce3ba8e"
#Const C_MP_App_Secret	"52877e3c1aa428eeb75a042c52caa01fb74a7526"
#Const C_MP_Link				"https://prod.live.maniaplanet.com/login/oauth2/authorize?response_type=token&"
#Const C_MP_Redirect		"http://192.168.1.30:3001/player/give_token"
//#Const C_MP_Redirect   "http://164.132.227.196/player/give_token"
// #Const C_MP_Redirect "https://api.obstacle.ovh/player/give_token"
// #Const C_MP_Redirect "http://localhost:3000/player/give_token"

#Struct K_GetTokenBody {
	Text login;
	Text state;
}

#Struct K_GetTokenResponse {
	Text token;
}

Void LogMessage(Text _Msg) {
	log("[Obs Auth] " ^ _Msg);
}

Void LogError(Text _Msg) {
	LogMessage("ERROR: " ^_Msg);
}

Text UpdateToken() {
	LogMessage("Updating token...");

	declare persistent Text obsToken for LocalUser;
	
	declare login = LocalUser.Login;
	declare Text state = login ^ Now;
	declare body = K_GetTokenBody {
		login = login,
		state = state
	};
	
	declare req = Http.CreatePost(
		C_HostUrl ^ "player/get_token",
		body.tojson(),
		"Content-Type: application/json\nAccept: application/json");
		
	OpenLink(C_MP_Link
		^ "client_id=" ^ C_MP_App_Id
		^ "&client_secret=" ^ C_MP_App_Secret
		^ "&redirect_uri=" ^ C_MP_Redirect
		^ "&state=" ^ state
		^ "&scope=basic",
		CMlScript::LinkType::ExternalBrowser);
		
	wait(req.IsCompleted);		
	if (req.StatusCode != 200) {
		LogError("Error: " ^ req.StatusCode ^ req.Result);
		UI.SendChat("An error occurred. Please contact the developers (e.g. @ahmadbky or @MiLTanT on discord).");
		SendCustomEvent("token_error", [login]);
		return obsToken;
	}
	
	declare K_GetTokenResponse response;
	response.fromjson(req.Result);
	obsToken = response.token;

	LogMessage("Token updated!");
	SendCustomEvent("token_update", [login]);

	return obsToken;
}

Void initNetTokenUpdateVar() {
	declare netwrite Integer Net_TokenNeedsUpdate for InputPlayer = -1;
	Net_TokenNeedsUpdate = -1;
}

main() {
	declare lastTokenUpdate = -1;
	wait(InputPlayer != Null);

	initNetTokenUpdateVar();

	while (True) {
		yield;

		declare netread Integer Net_TokenNeedsUpdate for InputPlayer;
		if (Net_TokenNeedsUpdate != lastTokenUpdate) {
			declare newToken = UpdateToken();
			lastTokenUpdate = Net_TokenNeedsUpdate;
		}
	}
}

--></script>
</manialink>
	""";
}