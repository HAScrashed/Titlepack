/*********************************************
* Obstacle Library                           *
* Author:  smokegun                          *
*                                            *
* Obstacle functions.                        *
*********************************************/

#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/miltant/Nadeo_Fork/Log.Script.txt" as Log
#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/miltant/Nadeo_Fork/ShootMania/SM3.Script.txt" as SM

#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/miltant/RunFlags.Script.txt" as RunFlags

/*********************************************
 CONSTANTS
*********************************************/
#Const Version "2021-07-13"
#Const ScriptName "ObstacleRecords.Script.txt"

#Struct SRequestData {
    Text Url;
    Text Data;
    Integer Type;
}

/*********************************************
  GLOBALES
*********************************************/
// General globals
declare Text G_PostHeaders;
declare Text G_GetHeaders;

// Requests
declare SRequestData[Ident] G_WaitingToComplete;
declare SRequestData[]  G_WaitingToSend;

/////////////////////////////////////////////////////////////////
/////////////////////       TOOLS       /////////////////////////
/////////////////////////////////////////////////////////////////
Boolean Contains(Text _Text, Text _Input) {
    return TL::Find(_Text, _Input, False, False);
}

Text LogPrefix() {
    return "API (W "^G_WaitingToComplete.count^" | Q "^G_WaitingToSend.count^"):";
}

// Used to create a POST request
Ident MakePost(Text _Url, Text _Data) {
    if (Http.SlotsAvailable > 0) {
        Log::Log(LogPrefix()^" Sending request to "^_Url);
        declare request <=> Http.CreatePost(Constants::C_HostUrl^_Url, _Data, G_PostHeaders);
        return request.Id;
    }
    return NullId;
}

Void SendPost(Text _Url, Text _Data, Integer _Type) {
    declare SRequestData RequestData;
    RequestData.Url = _Url;
    RequestData.Data = _Data;
    RequestData.Type = _Type;

    declare reqId = MakePost(_Url, _Data);
    if (reqId == NullId && G_WaitingToSend.count < 64) {
        Log::Log(LogPrefix()^" Queue up "^_Url^" (count: "^G_WaitingToSend.count^")");
        G_WaitingToSend.add(RequestData);
        return;
    }
    if (reqId == NullId) {
       Log::Log(LogPrefix()^" WARNING requests queue has more than 64 waiting!");
       return;
    }
    G_WaitingToComplete[reqId] = RequestData;
}

/////////////////////////////////////////////////////////////////
/////////////////////   MAIN FUNCTIONS  /////////////////////////
/////////////////////////////////////////////////////////////////

// Init the API with a token
Void Init() {
    G_PostHeaders = "Content-Type: application/json\nAccept: application/xml";
    G_GetHeaders  = "Accept: application/xml";
}

/////////////////////////////////////////////////////////////////
/////////////////////  API FUNCTIONS    /////////////////////////
/////////////////////////////////////////////////////////////////

// Send map infos
Void ReplaceOrCreateMap() {
    declare payload = """
    {
    "name": {{{Json::GetText(Map.MapName)}}},
    "maniaplanetMapId": {{{Json::GetText(""^Map.Id)}}},
    "playerId": {{{Json::GetText(Map.AuthorLogin)}}}
    }
    """;

    SendPost("Maps/replaceOrCreate", payload, Constants::C_Request_ReplaceOrCreateMap);
}

// Update player infos
Void ReplaceOrCreatePlayer(CSmPlayer _Player) {
    declare payload = """
    {
    "login": {{{Json::GetText(_Player.User.Login)}}},
    "nickname": {{{Json::GetText(_Player.User.Name)}}}
    }""";

    SendPost("Players/replaceOrCreate", payload, Constants::C_Request_ReplaceOrCreatePlayer);
}

// Send records
Void PlayerFinished(CSmPlayer _Player) {
    declare LastRun for _Player.Score = -1;
    declare RespawnCount for _Player.Score = 0;

    declare payload = """
    {
    "time": {{{LastRun}}},
    "respawnCount": {{{Json::GetInteger(RespawnCount)}}},
    "playerId": {{{Json::GetText(_Player.User.Login)}}},
    "mapId": {{{Json::GetText(""^Map.Id)}}},
    "flags": {{{Json::GetInteger(RunFlags::GetFlagsSum(
        Player::usedRSBug(_Player),
        Player::usedAltGlitch(_Player),
        Player::usedPvPWeapons(_Player),
        Player::usedPvPCollisions(_Player)
    ))}}}
    }""";

    SendPost("Records/player-finished", payload, Constants::C_Request_PlayerFinished);
}


/////////////////////////////////////////////////////////////////
/////////////////////      LOOP         /////////////////////////
/////////////////////////////////////////////////////////////////

// Process requests
Void Loop(Text _BestRecordMsg, Text _WorseRecordMsg)
{
    declare Ident[] ToDelete = [];
    declare UpdateRecords = False;

    foreach (reqId => ReqData in G_WaitingToComplete) {

        if (!Http.Requests.existskey(reqId)) {
            ToDelete.add(reqId);
            continue;
        }

        declare request <=> Http.Requests[reqId];
        if (!request.IsCompleted) continue;

        Log::Log(LogPrefix()^" Request done: ("^request.StatusCode^") "^request.Url);

        if (request.StatusCode == 200) {

            if (ReqData.Type == Constants::C_Request_PlayerFinished) {
                declare response = Xml.Create(request.Result);

                if ( response != Null
                    && response.Root != Null
                    && response.Root.GetFirstChild("newBest") != Null
                    && response.Root.GetFirstChild("login") != Null
                    && response.Root.GetFirstChild("old") != Null
                    && response.Root.GetFirstChild("new") != Null
                ) {
                    declare isNewBest = response.Root.GetFirstChild("newBest").TextContents == "true";
                    // TODO: Add fields to backend response
                    declare login = response.Root.GetFirstChild("login").TextContents;
                    declare old = TL::ToInteger(response.Root.GetFirstChild("old").TextContents);
                    declare new = TL::ToInteger(response.Root.GetFirstChild("new").TextContents);

                    declare Player = SM::GetPlayer(login);
                    declare PName = Player.User.Name;
                    declare NewTime = TL::TimeToText(new, True);
                    declare OldTime = TL::TimeToText(old, True);
                    declare DiffTime = TL::TimeToText(new - old, True);

                    if (isNewBest) {
                        if (_BestRecordMsg != "") {
                            UIManager.UIAll.SendChat(TL::Compose(_BestRecordMsg, PName, NewTime, OldTime, DiffTime));
                        }
                    } else if (Player != Null) {
                        if (_WorseRecordMsg != "") {
                            UIManager.GetUI(Player).SendChat(TL::Compose(_WorseRecordMsg, PName, NewTime, OldTime, DiffTime));
                        }
                    }

                    UpdateRecords = True;
                }

                Xml.Destroy(response);
            }
        }
        else {
             UIManager.UIAll.SendChat(TL::Compose("OBSTACLE API ERROR(%1): Please contact the developer on Obstacle's discord.", ""^request.StatusCode));
        }

        ToDelete.add(reqId);
    }

    foreach (reqId in ToDelete) {
        if (!Http.Requests.existskey(reqId)) {
            continue;
        }
        declare request <=> Http.Requests[reqId];
        declare Removed = G_WaitingToComplete.removekey(reqId);
        Http.Destroy(request);
    }

    if (G_WaitingToSend.count > 0) {
        declare Integer[] ToRemove = [];
        declare ToSendCount = ML::Min(Http.SlotsAvailable, G_WaitingToSend.count);

        for (I, 0, ToSendCount-1) {
            declare RequestData = G_WaitingToSend[I];
            declare reqId = MakePost(RequestData.Url, RequestData.Data);
            G_WaitingToComplete[reqId] = RequestData;
        }

        for (I, 0, ToSendCount-1) {
            declare Removed = G_WaitingToSend.removekey(0);
        }
    }

    if (UpdateRecords) {
        declare netwrite Net_RecordsUpdated for Teams[0] = Now;
        Net_RecordsUpdated = Now;
    }
}
