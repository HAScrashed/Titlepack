/*********************************************
* Obstacle Library                           *
* Author:  smokegun                          *
*                                            *
* Obstacle functions.                        *
*********************************************/

#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/miltant/Nadeo_Fork/Log.Script.txt" as Log
#Include "Libs/miltant/Nadeo_Fork/Json2.Script.txt" as Json
#Include "Libs/miltant/Nadeo_Fork/ShootMania/SM3.Script.txt" as SM

#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "Libs/smokegun/Player.Script.txt" as Player
#Include "Libs/miltant/RunFlags.Script.txt" as RunFlags

#Include "Libs/ahmad3/MlAuth.Script.txt" as Auth

/*********************************************
 CONSTANTS
*********************************************/
#Const Version "2021-07-14"
#Const ScriptName "ObstacleRecords.Script.txt"

#Struct SRequestData {
    // We store the login and not the CSmPlayer instance
    // because if the player despawns (i believe?), the insance will not be available anymore
    Text PlayerLogin;
    Text Headers;
    Text Url;
    Text Data;
    Integer Type;
}

#Struct K_UpdatePlayerResponse {
    Boolean banned;
    Auth::K_Banishment current_ban;
}

/*********************************************
  GLOBALES
*********************************************/
// General globals
declare Text G_PostHeaders;
declare Text G_GetHeaders;

// Requests
declare SRequestData[Ident] G_WaitingToComplete;
declare SRequestData[]  G_WaitingToSend;

declare SRequestData[] G_WaitingToUpdateToken;

/////////////////////////////////////////////////////////////////
/////////////////////       TOOLS       /////////////////////////
/////////////////////////////////////////////////////////////////
Text Private_MultipartHeaders(Text _Boundary) {
    return "Content-Type: multipart/form-data; boundary=" ^ _Boundary ^ "\nAccept: application/xml\n";
}

Boolean Contains(Text _Text, Text _Input) {
    return TL::Find(_Text, _Input, False, False);
}

Text LogPrefix() {
    return "API (W "^G_WaitingToComplete.count^" | Q "^G_WaitingToSend.count^"):";
}

// Used to create a POST request
Ident MakePost(Text _Url, Text _Data, Text _Headers) {
    if (Http.SlotsAvailable > 0) {
        Log::Log(LogPrefix()^" Sending request to "^_Url);
        declare request <=> Http.CreatePost(Constants::C_HostUrl^_Url, _Data, _Headers);
        return request.Id;
    }
    return NullId;
}

Void SendPost(Text _Url, Text _Data, Integer _Type, CSmPlayer _Player, Text _Headers) {
    declare SRequestData RequestData;
    if (_Player == Null) RequestData.PlayerLogin = "";
    else RequestData.PlayerLogin = _Player.User.Login;
    RequestData.Headers = _Headers;
    RequestData.Url = _Url;
    RequestData.Data = _Data;
    RequestData.Type = _Type;

    declare Text authHeaders = "";
    if (_Player != Null) authHeaders = "PlayerLogin: " ^ RequestData.PlayerLogin ^ "\nAuthorization: " ^ Player::getToken(_Player);
    declare reqId = MakePost(_Url, _Data, _Headers ^ authHeaders);
    if (reqId == NullId && G_WaitingToSend.count < 64) {
        Log::Log(LogPrefix()^" Queue up "^_Url^" (count: "^G_WaitingToSend.count^")");
        G_WaitingToSend.add(RequestData);
        return;
    }
    if (reqId == NullId) {
       Log::Log(LogPrefix()^" WARNING requests queue has more than 64 waiting!");
       return;
    }
    G_WaitingToComplete[reqId] = RequestData;
}

/////////////////////////////////////////////////////////////////
/////////////////////   MAIN FUNCTIONS  /////////////////////////
/////////////////////////////////////////////////////////////////

// Init the API with a token
Void Init() {
    G_PostHeaders = "Content-Type: application/json\nAccept: application/xml\n";
    G_GetHeaders  = "Accept: application/xml\n";
}

/////////////////////////////////////////////////////////////////
/////////////////////  API FUNCTIONS    /////////////////////////
/////////////////////////////////////////////////////////////////

// Send map infos
Void ReplaceOrCreateMap() {
    declare payload =
"""{
    "name": {{{Json::GetText(Map.MapName)}}},
    "map_uid": {{{Json::GetText(""^Map.Id)}}},
    "author": {
        "login": {{{Json::GetText(Map.AuthorLogin)}}},
        "nickname": {{{Json::GetText(Map.AuthorNickName)}}},
        "zone_path": {{{Json::GetText(Map.AuthorZonePath)}}}
    }
}""";

    SendPost("map/insert", payload, Constants::C_Request_ReplaceOrCreateMap, Null, G_PostHeaders);
}

// Update player infos
Void ReplaceOrCreatePlayer(CSmPlayer _Player) {
    declare payload =
"""{
    "login": {{{Json::GetText(_Player.User.Login)}}},
    "nickname": {{{Json::GetText(_Player.User.Name)}}},
    "country": {{{Json::GetText(_Player.User.ZonePath)}}}
}""";

    SendPost("player/update", payload, Constants::C_Request_ReplaceOrCreatePlayer, _Player, G_PostHeaders);
}

// Send records
Void PlayerFinished(CSmPlayer _Player) {
    declare LastRun for _Player.Score = -1;
    declare RespawnCount for _Player.Score = 0;
    declare Flags = RunFlags::GetFlagsSum(
        Player::usedRSBug(_Player),
        Player::usedAltGlitch(_Player),
        Player::usedPvPWeapons(_Player),
        Player::usedPvPCollisions(_Player),
        Player::usedSpeedHack(_Player)
    );

    declare state = _Player.User.Login ^ Now;

    log("flags:" ^ Flags);

    declare boundary = "----------------" ^ state ^ ML::Rand(0, 10000000);
    // TODO: register inputs
    declare inputs = "";

    declare body = """
--{{{boundary}}}
Content-Disposition: form-data; name="time"
Content-Type: text/plain

{{{LastRun}}}
--{{{boundary}}}
Content-Disposition: form-data; name="respawn_count"
Content-Type: text/plain

{{{RespawnCount}}}
--{{{boundary}}}
Content-Disposition: form-data; name="login"
Content-Type: text/plain

{{{_Player.User.Login}}}
--{{{boundary}}}
Content-Disposition: form-data; name="map_uid"
Content-Type: text/plain

{{{""^Map.Id}}}
--{{{boundary}}}
Content-Disposition: form-data; name="flags"
Content-Type: text/plain

{{{Flags}}}
""";

    declare Integer[Ident] lastCpTimes = Player::getLastCPTimes(_Player);
    foreach (time in lastCpTimes) {
        declare Integer cpTime;
        if (time == LastRun) cpTime = time;
        else cpTime = LastRun - time;
        body ^= """--{{{boundary}}}
Content-Disposition: form-data; name="cps"
Content-Type: text/plain

{{{cpTime}}}
""";
    }

    body ^= """--{{{boundary}}}
Content-Disposition: form-data; name="inputs"
Content-Type: text/plain

{{{inputs}}}
--{{{boundary}}}--
""";
    
    body = TL::Replace(body, "\n", "\r\n");

    SendPost("player/finished", body, Constants::C_Request_PlayerFinished, _Player, Private_MultipartHeaders(boundary));
}

Void TokenReceivedFor(CSmPlayer _Player) {
    foreach (idx => req in G_WaitingToUpdateToken) {
        if (req.PlayerLogin == _Player.User.Login) {
            SendPost(req.Url, req.Data, req.Type, _Player, req.Headers);
            declare _rem = G_WaitingToUpdateToken.removekey(idx);
            break;
        }
    }
}

/////////////////////////////////////////////////////////////////
/////////////////////      LOOP         /////////////////////////
/////////////////////////////////////////////////////////////////

// Process requests
Void Loop(Text _BestRecordMsg, Text _WorseRecordMsg)
{
    declare Ident[] ToDelete = [];
    declare UpdateRecords = False;

    foreach (reqId => ReqData in G_WaitingToComplete) {

        if (!Http.Requests.existskey(reqId)) {
            ToDelete.add(reqId);
            continue;
        }

        declare request <=> Http.Requests[reqId];
        if (!request.IsCompleted) continue;

        Log::Log(LogPrefix()^" Request done: ("^request.StatusCode^") "^request.Url);

        if (request.StatusCode == 404) {
            declare CSmPlayer player = GetPlayer(ReqData.PlayerLogin);
            declare netwrite Integer Net_TokenNeedsUpdate for player = Now;
            Net_TokenNeedsUpdate = Now;
            G_WaitingToUpdateToken.add(ReqData);
            ToDelete.add(reqId);
            continue;
        }

        if (request.StatusCode == 200) {

            if (ReqData.Type == Constants::C_Request_PlayerFinished) {
                declare response = Xml.Create(request.Result);

                if ( response != Null
                    && response.Root != Null
                    && response.Root.GetFirstChild("newBest") != Null
                    && response.Root.GetFirstChild("login") != Null
                    && response.Root.GetFirstChild("old") != Null
                    && response.Root.GetFirstChild("new") != Null
                ) {
                    declare isNewBest = response.Root.GetFirstChild("newBest").TextContents == "true";
                    // TODO: Add fields to backend response
                    declare login = response.Root.GetFirstChild("login").TextContents;
                    declare old = TL::ToInteger(response.Root.GetFirstChild("old").TextContents);
                    declare new = TL::ToInteger(response.Root.GetFirstChild("new").TextContents);

                    declare Player = SM::GetPlayer(login);
                    declare PName = Player.User.Name;
                    declare NewTime = TL::TimeToText(new, True);
                    declare OldTime = TL::TimeToText(old, True);
                    declare DiffTime = TL::TimeToText(new - old, True);

                    if (isNewBest) {
                        if (_BestRecordMsg != "") {
                            UIManager.UIAll.SendChat(TL::Compose(_BestRecordMsg, PName, NewTime, OldTime, DiffTime));
                        }
                    } else if (Player != Null) {
                        if (_WorseRecordMsg != "") {
                            UIManager.GetUI(Player).SendChat(TL::Compose(_WorseRecordMsg, PName, NewTime, OldTime, DiffTime));
                        }
                    }

                    UpdateRecords = True;
                }

                Xml.Destroy(response);
            } else if (ReqData.Type == Constants::C_Request_ReplaceOrCreatePlayer) {
                declare K_UpdatePlayerResponse res;
                declare err = res.fromjson(request.Result);
                if (err) {
                    ToDelete.add(reqId);
                    continue;
                }
                log("checked if player is banned");
                if (res.banned) {
                    log("yes he is");
                    declare player = SM::GetPlayer(ReqData.PlayerLogin);
                    Player::setBanned(player, res.current_ban);
                }
            }
        }
        else {
             UIManager.UIAll.SendChat(TL::Compose("OBSTACLE API ERROR(%1): Please contact the developer on Obstacle's discord.", ""^request.StatusCode));
        }

        ToDelete.add(reqId);
    }

    foreach (reqId in ToDelete) {
        if (!Http.Requests.existskey(reqId)) {
            continue;
        }
        declare request <=> Http.Requests[reqId];
        declare Removed = G_WaitingToComplete.removekey(reqId);
        Http.Destroy(request);
    }

    if (G_WaitingToSend.count > 0) {
        declare Integer[] ToRemove = [];
        declare ToSendCount = ML::Min(Http.SlotsAvailable, G_WaitingToSend.count);

        for (I, 0, ToSendCount-1) {
            declare RequestData = G_WaitingToSend[I];
            declare reqId = MakePost(RequestData.Url, RequestData.Data, RequestData.Headers);
            G_WaitingToComplete[reqId] = RequestData;
        }

        for (I, 0, ToSendCount-1) {
            declare Removed = G_WaitingToSend.removekey(0);
        }
    }

    if (UpdateRecords) {
        declare netwrite Net_RecordsUpdated for Teams[0] = Now;
        Net_RecordsUpdated = Now;
    }
}
