#Include "Libs/miltant/Nadeo_Fork/Layers2.Script.txt" as Layers
#Include "Libs/miltant/Nadeo_Fork/CustomUI.Script.txt" as CustomUI
#Include "Libs/smokegun/Constants.Script.txt" as Constants
#Include "TextLib" as TL

#Include "Libs/ahmad3/Error.Script.txt" as Error
#Include "Libs/ahmad3/Ban.Script.txt" as Ban
#Include "Libs/ahmad3/Events.Script.txt" as ObsEvents

/*********************************************
    CONSTANTS
*********************************************/

#Const  Version     "2023-28-06"
#Const  ScriptName  "RecordsWidget.Script.txt"

Void Init(Integer _EventEdition) {
    if (ObsEvents::HasFailed()) return;

    declare netwrite Integer[][Text] Net_MedalsTimesPerMap for Teams[0];
    declare netwrite Integer Net_MedalsTimesPerMapUpdated for Teams[0] = -1;

    foreach (Category in ObsEvents::Current().EditionsDetails[_EventEdition].categories) {
        foreach (Map in Category.maps) {
            Net_MedalsTimesPerMap[Map.map_uid] = [Map.bronze_time, Map.silver_time, Map.gold_time, Map.champion_time];
        }
    }

    Net_MedalsTimesPerMapUpdated = Now;
}

Text Private_GetSmallRecords() {
    CustomUI::Add("Frame_Medals_Records", <139., 75.>, <44., 34.>);
    return """
<frame id="Frame_Medals_Records" class="LibCustomUI_Module">
    <framemodel id="small_record">
        <label id="rank" pos="-20 0" size="6 4" halign="left" valign="center2" style="TextCardSmallScores2" textsize="1" textfont="light"/>
        <label id="name" pos="-14 0" size="20 4" halign="left" valign="center2" textsize="1" textfont="light"/>
        <label id="time" pos="20 0" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" textfont="OswaldMono"/>
    </framemodel>

    <frame pos="139 75">
        <frame id="Frame_Records" pos="0 -3">
            <frameinstance modelid="small_record" pos="0 0" id="record0"/>
            <frameinstance modelid="small_record" pos="0 -4" id="record1" />
            <frameinstance modelid="small_record" pos="0 -8" id="record2"/>

			<frame pos="-20 -13" id="Frame_Medal_3">
				<quad pos="-1" size="4 4" image="file://Media/Images/Obstacle/Medals/champion.png" valign="center"/>
        		<label pos="6 0" size="20 4" halign="left" valign="center2" textsize="1" text="Master Time" textfont="light"/>
        		<label id="time" pos="40" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" textfont="OswaldMono"/>
			</frame>

			<frame pos="-20 -18" id="Frame_Medal_2">
				<quad pos="-1" size="4 4" image="file://Media/Images/Obstacle/Medals/gold.png" valign="center"/>
        		<label pos="6 0" size="20 4" halign="left" valign="center2" textsize="1" text="Gold Time" textfont="light"/>
        		<label id="time" pos="40" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" textfont="OswaldMono"/>
			</frame>

			<frame pos="-20 -23" id="Frame_Medal_1">
				<quad pos="-1" size="4 4" image="file://Media/Images/Obstacle/Medals/silver.png" valign="center"/>
        		<label pos="6 0" size="20 4" halign="left" valign="center2" textsize="1" text="Silver Time" textfont="light"/>
        		<label id="time" pos="40" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" textfont="OswaldMono"/>
			</frame>

			<frame pos="-20 -28" id="Frame_Medal_0">
				<quad pos="-1" size="4 4" image="file://Media/Images/Obstacle/Medals/bronze.png" valign="center"/>
        		<label pos="6 0" size="20 4" halign="left" valign="center2" textsize="1" text="Bronze Time" textfont="light"/>
        		<label id="time" pos="40" size="14 4" halign="right" valign="center2" style="TextTitle2" textsize="1" textfont="OswaldMono"/>
			</frame>
        </frame>

    	<quad size="44 34" style="BgRaceScore2" substyle="BgCardPlayer" halign="center" valign="top" scriptevents="1"/>
    </frame>
</frame>
    """;
}

Text GetLayer() {
    return """
<manialink version="3" name="Obstacle:RecordsWidget">
<frame>
    {{{Private_GetSmallRecords()}}}
</frame>
<script><!--
    #Include "TextLib" as TL

    #Struct K_RankedRecord {
        Integer rank;
        Text login;
        Text nickname;
        Integer time;
    }
    
    #Struct K_Response {
        K_RankedRecord[] response;
    }

    {{{Ban::ML_Preproc()}}}
    {{{Error::ML_Preproc()}}}

    {{{Ban::ML_Content()}}}
    {{{Error::ML_Content()}}}

    declare Integer[][Text] G_MedalsTimesPerMap;
    declare CHttpRequest G_Req;

    Integer GetMedal(Integer Medal) {
        if (G_MedalsTimesPerMap.existskey(Map.MapInfo.MapUid)) {
            return G_MedalsTimesPerMap[Map.MapInfo.MapUid][Medal];
        }
        switch (Medal) {
            case 0: {
                return Map.MapInfo.TMObjective_BronzeTime;
            }
            case 1: {
                return Map.MapInfo.TMObjective_SilverTime;
            }
            case 2: {
                return Map.MapInfo.TMObjective_GoldTime;
            }
        }
        return Map.MapInfo.TMObjective_AuthorTime;
    }

    Void UpdateRecords(Text _Login) {
        declare params = "?mapId="^Map.Id^"&playerId="^_Login;
        declare netread Text Net_EventRoutePrefix for Teams[0];
        declare url = "{{{Constants::C_HostUrl}}}" ^ Net_EventRoutePrefix ^ "overview" ^ params;
        G_Req = Http.CreateGet(url, True, "Accept: application/json");
    }

    main() {
        {{{CustomUI::InjectMLInit()}}}
        Error_Init();
        wait(InputPlayer != Null);

		declare Integer[Text] CampaignRecords for LocalUser;

        declare netread Integer[][Text] Net_MedalsTimesPerMap for Teams[0];
        declare netread Integer Net_MedalsTimesPerMapUpdated for Teams[0] = -1;
        declare Integer MedalsTimesPerMapUpdated = -1;

        declare netread Net_StartTime for InputPlayer = -1;
        declare netread Net_CheckpointsTotal for Teams[0] = -1;
        declare netread Net_CpProgress for InputPlayer = -1;
        declare netread Net_Time1 for InputPlayer = 0;
        declare Integer CurrentPlayerRank for LocalUser = 0;
        declare netread Net_RecordsUpdated for Teams[0] = -1;
        declare LastUpdate = -1;
        declare Running = False;

        declare LastPlayerLogin = InputPlayer.User.Login;
        declare UpdateUI = False;

        declare Frame_Widget <=> (Page.GetFirstChild("Frame_Medals_Records") as CMlFrame);
        declare Frame_Records <=> (Frame_Widget.GetFirstChild("Frame_Records") as CMlFrame);

        while (True) {
            yield;

            declare LocalPlayer <=> InputPlayer;
            if (GUIPlayer != Null) LocalPlayer <=> GUIPlayer;
            if (LocalPlayer == Null) continue;

            if (Net_MedalsTimesPerMapUpdated != MedalsTimesPerMapUpdated) {
                G_MedalsTimesPerMap = Net_MedalsTimesPerMap;
                MedalsTimesPerMapUpdated = Net_MedalsTimesPerMapUpdated;
            }

            if (Net_CpProgress < 0 || Net_CheckpointsTotal < 0 || Net_StartTime < 0) {
                if (Frame_Widget.Visible)
                    Frame_Widget.Hide();
            } else if (!Frame_Widget.Visible) {
                Frame_Widget.Show();
            }

            if (Net_RecordsUpdated != LastUpdate) {
                log("Records updated " ^ LastUpdate ^ " -> " ^ Net_RecordsUpdated ^ " (running: " ^ Running ^ ")");
                LastUpdate = Net_RecordsUpdated;
                UpdateRecords(LocalPlayer.User.Login);
                Running = False;
            }

            if (Net_CpProgress > -1) {
                Running = True;
            }

            if (G_Req != Null && G_Req.IsCompleted) {
                if (G_Req.StatusCode == 200)
                    UpdateUI = True;
                else {
                    declare err = Error_Handle(G_Req.StatusCode, G_Req.Result);
                    UI.SendChat(err.err.message);
                    Http.Destroy(G_Req);
                    G_Req = Null;
                }
            }

            if (UpdateUI) {
                UpdateUI = False;
                declare K_Response response;
                response.fromjson(G_Req.Result);
                Http.Destroy(G_Req);
                G_Req = Null;

                declare PlayerRank = -1;
                foreach (I => Record in response.response) {
                    if (Record.login == LocalPlayer.User.Login) {
                        CampaignRecords[Map.MapInfo.MapUid] = Record.time;
                        CurrentPlayerRank = I + 1;
                        PlayerRank = I;
                        break;
                    }
                }
                if (PlayerRank == -1) {
                    CampaignRecords[Map.MapInfo.MapUid] = 0;
                    CurrentPlayerRank = response.response.count + 2;
                }

                // medals to display
                declare Integer[] Medals = [GetMedal(0), GetMedal(1), GetMedal(2), GetMedal(3)];
                // non-null ranks to display
                declare Integer[] Ranks;
                if (response.response.count > 0) {
                    Ranks.add(0);

                    if (PlayerRank < 3 || PlayerRank == -1) {
                        if (response.response.count > 1)
                            Ranks.add(1);
                        if (response.response.count > 2)
                            Ranks.add(2);
                    } else {
                        Ranks.add(PlayerRank - 1);
                        Ranks.add(PlayerRank);
                    }
                }

                declare CurrentHeight = 0.;
                declare CurrentMedal = Medals.count - 1;
                declare CurrentTime = Medals[0] + 1;

                foreach (I => Rank in Ranks) {
                    CurrentTime = response.response[Rank].time;
                    
                    // displays medals before the current rank
                    while (CurrentMedal >= 0 && Medals[CurrentMedal] < CurrentTime) {
                        declare Frame <=> (Frame_Records.GetFirstChild("Frame_Medal_" ^ CurrentMedal) as CMlFrame);
                        declare timeLabel <=> (Frame.GetFirstChild("time") as CMlLabel);

                        Frame.RelativePosition_V3.Y = CurrentHeight;
                        timeLabel.SetText(TL::TimeToText(Medals[CurrentMedal], True));
                        CurrentHeight -= 5.;
                        CurrentMedal -= 1;
                    }

                    // displays the current rank
                    declare frame <=> (Frame_Records.GetFirstChild("record" ^ I) as CMlFrame);
                    declare rankLabel <=> (frame.GetFirstChild("rank") as CMlLabel);
                    declare nameLabel <=> (frame.GetFirstChild("name") as CMlLabel);
                    declare timeLabel <=> (frame.GetFirstChild("time") as CMlLabel);

                    frame.RelativePosition_V3.Y = CurrentHeight;
                    CurrentHeight -= 4.;
                    if (I < Ranks.count) {
                        rankLabel.SetText(""^response.response[Rank].rank);
                        nameLabel.SetText(response.response[Rank].nickname);
                        timeLabel.SetText(TL::TimeToText(response.response[Rank].time, True));
                    }
                }

                // displays medals after the last rank
                while (CurrentMedal >= 0) {
                    declare Frame <=> (Frame_Records.GetFirstChild("Frame_Medal_" ^ CurrentMedal) as CMlFrame);
                    declare timeLabel <=> (Frame.GetFirstChild("time") as CMlLabel);

                    Frame.RelativePosition_V3.Y = CurrentHeight;
                    timeLabel.SetText(TL::TimeToText(Medals[CurrentMedal], True));
                    CurrentHeight -= 5.;
                    CurrentMedal -= 1;
                }

                // hides unused ranks
                for (I, Ranks.count, 2) {
                    declare frame <=> (Frame_Records.GetFirstChild("record" ^ I) as CMlFrame);
                    declare rankLabel <=> (frame.GetFirstChild("rank") as CMlLabel);
                    declare nameLabel <=> (frame.GetFirstChild("name") as CMlLabel);
                    declare timeLabel <=> (frame.GetFirstChild("time") as CMlLabel);

                    frame.RelativePosition_V3.Y = CurrentHeight;
                    CurrentHeight -= 4.;
                    
                    rankLabel.SetText("");
                    nameLabel.SetText("---");
                    timeLabel.SetText("--:--:--");
                }
            }

            foreach (Event in PendingEvents) {
               switch (Event.Type) {
                    case CMlScriptEvent::Type::MouseClick: {
                        OpenLink("{{{Constants::C_WebsiteUrl}}}/map/"^Map.Id,  CMlScript::LinkType::ExternalBrowser);
                    }
                }
            }
            {{{CustomUI::InjectMLLoop()}}}
        }
    }
--></script>
</manialink>
    """;
}
