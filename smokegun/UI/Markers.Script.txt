#Include "TextLib" as TL
#Include "Libs/smokegun/Tools.Script.txt" as Tools
#Include "Libs/miltant/Randomizer.Script.txt" as RNG


Text Private_LandmarkToText(CSmMapLandmark _Landmark)
{
	declare prefix = "";
	if (Tools::IsPortal(_Landmark))
		prefix = "PORTAL ";
	else if (Tools::IsCheckpoint(_Landmark))
		prefix = "CP ";
	else if (Tools::IsACandidateGoal(_Landmark))
		return "GOAL";
	else
		return TL::ToUpperCase(_Landmark.Tag);

	declare Order = RNG::GetOrder(_Landmark);
	if (Order != 0)
		return prefix^" "^Order;
	return prefix;
}

Text GetXML() {
	declare MarkersXML = "";
	foreach (Landmark in MapLandmarks) {
		if (!Tools::IsCheckpoint(Landmark) && !Tools::IsACandidateGoal(Landmark) && !Tools::IsPortal(Landmark)) continue;

		MarkersXML ^= """
			<marker box="0 1.5 0"
				manialinkframeid="Marker_{{{Landmark.Id}}}"
				pos="{{{Tools::GetPos(Landmark.Position)}}}"
				gauge="-1."
			/>
		""";
	}

	return MarkersXML;
}

Text GetLayer(Integer MarkerCount) {
	declare ML = """
<manialink version="3" name="Obstacle:Markers">
	<frame id="Checkpoints">""";


	foreach (Landmark in MapLandmarks) {
		if (!Tools::IsCheckpoint(Landmark) && !Tools::IsACandidateGoal(Landmark) && !Tools::IsPortal(Landmark)) continue;

		ML ^= """
		<frame hidden="1">
			<frame id="Marker_{{{Landmark.Id}}}">
				<frame id="Content">
					<label id="Foreground" pos="0 -0.2" z-index="2" size="20 10"
						text="{{{Private_LandmarkToText(Landmark)}}}"
						textfont="OswaldMono" halign="center" valign="center2"
						textsize="2" textcolor="fff"/>

					<quad id="Background_Gray" pos="0 0" z-index="0" size="10 5" bgcolor="000C"
						halign="center" valign="center" style="Bgs1InRace"
						substyle="BgCardList"/>

					<quad id="Background_Green" pos="0 0" z-index="0" size="18 10"
						halign="center" valign="center" style="Bgs1InRace" hidden="1"
						substyle="BgTitle3_4"/>
				</frame>""";
		if (MarkerCount > 1) {
			ML ^= """
				<frame halign="center" valign="center" id="Gauge_Wrapper" pos="0 -5">
					<gauge z-index="1" size="18 2" halign="center" valign="center" ratio="0.43" grading="0.166" id="Gauge_Content" style="BgCard" drawbg="0"/>
					<quad size="21 3" halign="center" valign="center" style="Bgs1InRace" substyle="ProgressBar" id="Gauge_Background"/>
				</frame>
			""";
		}

		ML ^= """
				</frame>
			</frame>
		""";
	}

	ML ^= """
	</frame>
	<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML

// From Tools.Script.txt

Integer GetMapTypeVersion() {
   declare metadata LibMapType_MapTypeVersion for Map = 0;
   return LibMapType_MapTypeVersion;
}

Boolean IsEnabled(CSmMapLandmark _Landmark) {
    if (_Landmark.Tag == "No-Function")
        return False;

	declare metadata Meta_Enabled for _Landmark = True;
	declare metadata Meta_Randomize for _Landmark = False;
	""";

	if (RNG::GetEnabledGoal() != NullId) {
		ML ^= """if (Meta_Randomize) {
			return ""^_Landmark.Id == "{{{RNG::GetEnabledGoal()}}}" || ""^_Landmark.Id == "{{{RNG::GetEnabledSpawn()}}}";
		} else """;
	}

	ML ^= """
	if (Meta_Enabled) {
		return True;
	}
	return False;
}

Boolean IsGoal(CSmMapLandmark _Landmark) {
	declare metadata Meta_Enabled for _Landmark = True;

	if (!Meta_Enabled || (GetMapTypeVersion() <= 2 && _Landmark.Tag == "No-Function"))
		return False;

	if (GetMapTypeVersion() <= 2)
		return _Landmark.Tag == "Goal";

	declare metadata Meta_CPType for _Landmark = 0;
	return _Landmark.Tag == "Goal" || Meta_CPType == 2;
}

Boolean IsCheckpoint(CSmMapLandmark _Landmark) {
	if (!IsEnabled(_Landmark))
		return False;

	if (GetMapTypeVersion() <= 2)
		return "Checkpoint" == TL::SubText(_Landmark.Tag, 0, 10);

	declare metadata Meta_CPType for _Landmark = 0;
	return _Landmark.Tag == "Checkpoint"
		   && (Meta_CPType == 0 || Meta_CPType == 1);
}

Boolean IsPortal(CSmMapLandmark _Landmark) {
	if (!IsEnabled(_Landmark))
		return False;

	if (GetMapTypeVersion() <= 2)
		return _Landmark.Tag == "Portal" || _Landmark.Tag == "CheckpointType3";
	declare metadata Meta_IsPortal for _Landmark = False;
	return Meta_IsPortal;
}

// Kinda from Randomizer.Script.txt

Integer GetOrder(CSmMapLandmark _Landmark) {
	declare Integer[Integer] LandmarksOrders = {{{RNG::GetLandmarksOrders()}}};


	if (_Landmark.Order >= 0)
		return _Landmark.Order;
	else if (LandmarksOrders.existskey(_Landmark.Order))
		return LandmarksOrders[_Landmark.Order];
	
	return 0;
}

main() {
	wait(InputPlayer != Null && Page != Null);

	declare Frame_Checkpoints = (Page.GetFirstChild("Checkpoints") as CMlFrame);
	declare netread Integer Net_CheckpointsTotal for Teams[0];    declare LastCpProgress = -1;

	declare Latest_Distance_Update = Now;
	declare CMlFrame[Ident] NextLandmarksGaugeCache = [];
	

	while (True) {
		yield;

		declare LocalPlayer <=> InputPlayer;
		if (GUIPlayer != Null) LocalPlayer <=> GUIPlayer;
		if (LocalPlayer == Null) continue;

		declare netread Integer Net_CpProgress for LocalPlayer;
		declare netread Text[] LastCheckpointsIdsStr for LocalPlayer;
		declare netread Integer[] PreviousCheckpointsOrder for LocalPlayer;
""";

	if (MarkerCount > 1) {
		ML ^= """
		if (Latest_Distance_Update + 50 < Now) {
			Latest_Distance_Update = Now;

			foreach (Id => Gauge_Frame in NextLandmarksGaugeCache) {
				declare Gauge = (Gauge_Frame.GetFirstChild("Gauge_Content") as CMlGauge);

				declare PlayerPosProjection = LocalPlayer.Position;
				PlayerPosProjection.Y = 0.;

				declare CPPosProjection = MapLandmarks[Id].Position;
				CPPosProjection.Y = 0.;

				declare Distance = ML::Distance(PlayerPosProjection, CPPosProjection);

				Gauge.Ratio = 1. - (ML::Clamp(Distance, 8., 384.) - 8) / 376.;
			}
		}""";
	}

	ML ^= """
		if (LastCpProgress != Net_CpProgress) {
			LastCpProgress = Net_CpProgress;
			NextLandmarksGaugeCache.clear();

			// Update the visibility of each marker
			foreach (CP_Marker_Frame in Frame_Checkpoints.Controls) {
				declare CP_Frame = (CP_Marker_Frame as CMlFrame);
				declare CP_Marker = (CP_Frame.Controls[0] as CMlFrame);
				declare CP_Content = CP_Frame.GetFirstChild("Content");
				declare CP_Background_Gray = CP_Frame.GetFirstChild("Background_Gray");
				declare CP_Background_Green = CP_Frame.GetFirstChild("Background_Green");

				declare Text[] Parts = TL::Split("_", CP_Marker.ControlId);
				declare CP_Id = Parts[Parts.count - 1];
				declare CSmMapLandmark CP_Landmark;


				// Find the landmark associated to the frame
				foreach (Landmark in MapLandmarks) {
					if (""^Landmark.Id == CP_Id) {
						CP_Landmark <=> Landmark;
						break;
					}
				}

				if (CP_Landmark == Null)
					continue;

				if (IsPortal(CP_Landmark)) {
					CP_Background_Gray.Size.X = 15.;
					CP_Background_Green.Size.X = 21.;
				}

				declare Order = GetOrder(CP_Landmark);

				if (IsGoal(CP_Landmark))
				{
					if (IsEnabled(CP_Landmark)) {
						CP_Frame.Visible = (Net_CpProgress + {{{MarkerCount}}} > Net_CheckpointsTotal);

						CP_Background_Green.Visible = (Net_CpProgress == Net_CheckpointsTotal) && ({{{MarkerCount}}} > 1);
						CP_Background_Gray.Visible = (Net_CpProgress == Net_CheckpointsTotal) && ({{{MarkerCount}}} == 1);
					} else {
						CP_Frame.Visible = False;
					}
				}
				else if (IsCheckpoint(CP_Landmark) || IsPortal(CP_Landmark))
				{
					if (Order == 0) {
						CP_Background_Green.Visible = False;
						CP_Background_Gray.Visible = True;
						CP_Frame.Visible = True;

						if (CP_Landmark.Order == 0) {
							if (LastCheckpointsIdsStr.exists(""^CP_Landmark.Id))
								CP_Frame.Visible = False;
						} else {
							if (PreviousCheckpointsOrder.exists(CP_Landmark.Order))
								CP_Frame.Visible = False;
						}
					} else {
						CP_Frame.Visible = (Order == 0 || Order > Net_CpProgress) && Order < Net_CpProgress + 1 + {{{MarkerCount}}};

						CP_Background_Green.Visible = (Net_CpProgress == Order - 1) && ({{{MarkerCount}}} > 1);
						CP_Background_Gray.Visible = (Net_CpProgress == Order - 1) && ({{{MarkerCount}}} == 1);
					}
				}
		""";

		if (MarkerCount > 1) {
			ML ^= """
				if (CP_Frame.Visible) {
					declare Gauge_Frame = (CP_Marker.GetFirstChild("Gauge_Wrapper") as CMlFrame);
					declare Gauge_Background = (Gauge_Frame.GetFirstChild("Gauge_Background") as CMlQuad);
					Gauge_Background.Visible = CP_Background_Green.Visible;

					NextLandmarksGaugeCache[CP_Landmark.Id] = Gauge_Frame;
				}""";
		}

		ML ^= """
			}
		}
	}
}
	--></script>
</manialink>
	""";

	return ML;
}