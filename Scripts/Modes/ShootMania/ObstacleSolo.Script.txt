/********************************************
*	Obstacle Solo Campaign Mode				*
*	Author:		steeffeen					*
*	Contact:	steeffeen@team-devota.com	*
********************************************/

#Extends "Modes/ShootMania/Obstacle.Script.txt"

#Const SoloScriptName	"ObstacleSolo.Script.txt"
#Const SoloVersion		"1.1 (2014-06-28)"

#Setting	S_FastRespawn			False
#Setting	S_FastRespawnOldMap		False
#Setting	S_RespawnPenalty		0
#Setting	S_AllowJump				False
#Setting	S_DisplayMedals			False

/***************************************************
	LABELS
***************************************************/

***LogVersion***
***
MB_LogVersion(SoloScriptName, SoloVersion);
***

***ScoresTable***
***
ScoresTable::Load(G_Solo);
ScoresTable::SetTableFormat(1, 2);
ScoresTable::SetTableWidth(160.);
ScoresTable::SetTableBackgroundImage("file://Media/Manialinks/ShootMania/Common/topsBg.dds", <0., 42.>, <176., 130.>);
//Pos,Status,Avatar,Name,Spec,Prof,Custom1,Custom2,Custom3,RoundPoints,Points
ScoresTable::SetColumnsWidth(1.5, 1., 2.5, 20., 0.5, 1., 0., 3., 5.5, 0., 0.5);
ScoresTable::SetPlayerCardHeight(15.);
ScoresTable::SetHeaderHeight(14.);
ScoresTable::SetColumnName("Custom1", "");
ScoresTable::SetColumnName("Custom2", _("|Number of respawns by a player|Respawns"));
ScoresTable::SetColumnName("Custom3", _("|The progress a player made on a challenge|Progress"));
ScoresTable::SetColumnName("Points", "");
ScoresTable::SetScoreFormat("$w     ");
ScoresTable::SetDefaultCustom1("");
ScoresTable::SetDefaultCustom2("-");
ScoresTable::SetDefaultCustom3("-");
ScoresTable::SetDefaultFooterScore("");
ScoresTable::SetDefaultFooterStats("");
ScoresTable::Build();

// Only load tabs (needed for the lib)
Tabs::Load();
declare TabsLayer <=> Tabs::CreateTabPaneLayer(["ScoresTab" => "Rankings"], -500, -500, False);
TabsLayer.Type = CUILayer::EUILayerType::AltMenu;
UIManager.UIAll.UILayers.add(TabsLayer);
***

***Ladder_OpenMatch_All***
***
DoNothing();
***

***UpdateFooterStats***
***
DoNothing();
***

***CheckTimes***
***
DoNothing();
***

***UpdateSoloFooterStats***
***
declare metadata Integer ObjectiveAuthor 	for Map;
declare metadata Integer ObjectiveGold 	for Map;
declare metadata Integer ObjectiveSilver 	for Map;
declare metadata Integer ObjectiveBronze 	for Map;
declare FooterStats = TextLib::Compose(
	"%1: "^	GetTime(ObjectiveGold)^		"				"^
	"%2: "^	GetTime(ObjectiveSilver)^	"				"^
	"%3: "^	GetTime(ObjectiveBronze)^	" ", _("Gold"), _("Silver"), _("Bronze"));
foreach (Player in Players) {
	ScoresTable::SetFooterStats(Player, FooterStats);
}
***

***PlayerFinish***
***
declare netwrite Net_StartTime for _Player = 0;
declare RunLast for _Player = -1;
declare RunBest for _Player.Score = -1;
declare CheckpointsTimeLast for _Player.Score = Integer[Ident];
declare CheckpointsTimeBest for _Player.Score = Integer[Ident];
declare RespawnCount for _Player = 0;
declare BestRespawnCount for _Player.Score = -1;
declare RunNew = 0;

RunNew = Now - Net_StartTime;
RunLast = RunNew;
UpdateLayerTimeDiff(_Player, RunNew, RunBest, -1, -1);

// Check best time
if (RunNew < RunBest || RunBest < 0) {
	RunBest = RunNew;
	CheckpointsTimeBest = CheckpointsTimeLast;
	UpdateRanking();
}
// Check best respawns
if (RespawnCount < BestRespawnCount || BestRespawnCount < 0) {
	BestRespawnCount = RespawnCount;
}

Net_StartTime = 0;
UpdateCustom3(_Player);
UpdateFooterScore(_Player);
UpdateLayerInfo(_Player, RunLast, RunBest);

UnspawnPlayer(_Player);

declare UI <=> UIManager.GetUI(_Player);
if (UI != Null) {
	declare Time = TextLib::TimeToText(RunNew, True);
	UI.SendNotice(
		TextLib::Compose("%1: %2",_("Finish"), "$<$0f0"^Time^"$>"),
		CUIConfig::ENoticeLevel::PlayerInfo, _Player.User, CUIConfig::EAvatarVariant::Default,
		CUIConfig::EUISound::Finish, 1);
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;

// Submit result
while (!UIManager.UIAll.UISequenceIsCompleted) {
	MB_Yield();
}

MB_StopMap = True;
***

***InitServer***
***
G_Solo = True;
G_ModeName = "Obstacle Solo";
***

***StartServer***
***
UIManager.UIAll.OverlayHideCountdown = True;
UIManager.UIAll.OverlayHideChat = True;
***

***StartMap***
***
---UpdateSoloFooterStats---
***

***ObstacleEndMap***
***
ScoresTable::EndMatch();
foreach (Player in AllPlayers) {
	declare netwrite Integer Net_StartTime for Player;
	Net_StartTime = 0;
}
StartTime = -1;
EndTime = -1;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

// Clean players messages
Message::CleanBigMessages();
Message::CleanStatusMessages();

// Hide ui stuff
LayerMarkers.IsVisible = False;

// Check medal
foreach (Player in Players) {
	declare Messages = MedalFromRunNew(Player);
	if (Messages.count > 0) {
		Message::SendBigMessage(Player, Messages[0], 4000, 4, CUIConfig::EUISound::ScoreProgress, 0);
	}
}

MB_Sleep(5000);
Message::CleanBigMessages();

return;
***

/***************************************************
	FUNCTIONS
***************************************************/

Text GetTime(Integer _Objective) {
	if (_Objective > 0) {
		return TextLib::TimeToText(_Objective);
	}
	return "--:--";
}
