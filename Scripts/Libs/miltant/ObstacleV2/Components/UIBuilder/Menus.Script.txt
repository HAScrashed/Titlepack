#Include "Libs/Nadeo_Fork/Common/Core/MenuLayers.Script.txt"						as Layers
#Include "TextLib" 																	as TL


#Struct K_Section {
    Text Name;
    Text DisplayName;
    Text Icon;
    
    Text[] Menu;
    Text Alias;
    Text OpenUrl;
    Text Window;
}

declare K_Section[Text] G_Menus;


Text Private_Build_Menus(K_Section _Menu) {
	declare Text[] MLArr_Menus;

	foreach (Menu in G_Menus) {
		if (Menu.Menu.count > 0) {
			declare Hidden = "";
			if (Menu.Name == _Menu.Name)
				Hidden  = " data-show=\"\"";
			
			declare ML_Text = """
				<frame
					data-name="{{{Menu.Name}}}" data-icon="{{{Menu.Icon}}}" hidden="1"
					pos="-120 {{{Menu.Menu.count * 6}}}" size="69 128"{{{Hidden}}}
				>""";

			foreach (I => Item_Raw in Menu.Menu) {
				declare Item = G_Menus[Item_Raw];
				declare Name = Item.Name;
				if (Item.Alias != "")
					Name = Item.Alias;

				ML_Text ^= """
				<frameinstance
					id="Frame_MenuItem_{{{I}}}" modelid="Frame_MenuItem"
					pos="0 {{{-(I*12.)}}}"
					data-name="{{{Name}}}"
					data-icon="{{{Item.Icon}}}"
					data-text="{{{Item.DisplayName}}}"
					data-url="{{{Item.OpenUrl}}}"
					data-window="{{{Item.Window}}}"
				/>""";
			}

			ML_Text ^= """</frame>""";
			MLArr_Menus.add(ML_Text);
		}
	}

	return TL::Join("", MLArr_Menus);
}

Text Build(K_Section _Menu) {
	declare ML_Text =  """
<manialink version="3" name="L_Menus">
	<framemodel id="Frame_MenuItem">
		<label id="Label_Icon" pos="-23 -6.2" size="8 8" halign="center" valign="center2" textsize="5" textcolor="fff" opacity="0"/>
		<label id="Label_Text" pos="-16 -6" size="50 6" valign="center2" textprefix="$t" textsize="5" textfont="Lato-Light" textcolor="fff" opacity="0"/>
		<quad id="Quad_Trigger" size="69 12" scriptevents="1"/>
	</framemodel>

	<frame id="Frame_Menus" pos="-135">
		{{{Private_Build_Menus(_Menu)}}}
	</frame>

	<label id="Label_IconMenu" pos="-40.3 0" size="6 6" halign="center" valign="center2" textsize="4.2" textfont="ForkAwesome" textcolor="fff" opacity="0"/>
	<quad id="Quad_IconMenu" pos="-40.3 0" size="6 6" halign="center" valign="center2"/>

	<script><![CDATA[
		#Include "MathLib" as ML
		#Include "AnimLib" as AL
		#Const C_AnimDuration 500

		declare Text G_Frame_CurrentMenu;
		declare Text G_Main_Menu;
		declare CMlFrame[Text] G_MenuContainers;
		declare Integer G_ChangeLabelIcon;

		Void HideMenu(Text _Menu) {
			G_Frame_CurrentMenu = "";

			declare Menu = G_MenuContainers[_Menu];

			AnimMgr.Add(Menu, "<frame pos=\"-120 " ^ Menu.RelativePosition_V3.Y ^ "\" />", Now + C_AnimDuration / 4, C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadIn);

			foreach (I => Item in Menu.Controls) {
				declare Frame_MenuItem = (Item as CMlFrame);
				declare Label_Icon	 = (Frame_MenuItem.GetFirstChild("Label_Icon")   as CMlLabel);
				declare Label_Text   = (Frame_MenuItem.GetFirstChild("Label_Text")   as CMlLabel);

				AnimMgr.Add(Label_Icon, "<label opacity=\"0\" pos=\"-27 " ^ Label_Icon.RelativePosition_V3.Y ^ "\" />", Now + I * 50, C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.Add(Label_Text, "<label opacity=\"0\" pos=\"-16 " ^ Label_Text.RelativePosition_V3.Y ^ "\" />", Now + I * 50, C_AnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		Void ShowMenu(Text _Menu) {
			G_Frame_CurrentMenu = _Menu;

			declare Menu = G_MenuContainers[_Menu];
			G_ChangeLabelIcon = Now + C_AnimDuration / 2;
			Menu.Show();

			AnimMgr.Add(Menu, "<frame pos=\"0 " ^ Menu.RelativePosition_V3.Y ^ "\" />", C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadIn);


			foreach (I => Item in Menu.Controls) {
				declare Frame_MenuItem = (Item as CMlFrame);
				declare Label_Icon	 = (Frame_MenuItem.GetFirstChild("Label_Icon")   as CMlLabel);
				declare Label_Text   = (Frame_MenuItem.GetFirstChild("Label_Text")   as CMlLabel);

				AnimMgr.Add(Label_Icon, "<label opacity=\"1\" pos=\"6 " ^ Label_Icon.RelativePosition_V3.Y ^ "\" />", Now + C_AnimDuration / 4 + I * 50, C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadIn);
				AnimMgr.Add(Label_Text, "<label opacity=\"1\" pos=\"14 " ^ Label_Text.RelativePosition_V3.Y ^ "\" />", Now + C_AnimDuration / 4 + I * 50, C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadIn);
			}

			declare Label_IconMenu = (Page.GetFirstChild("Label_IconMenu") as CMlLabel);
			declare Quad_IconMenu = (Page.GetFirstChild("Quad_IconMenu") as CMlQuad);

			if (Menu.DataAttributeExists("icon")) {
				AnimMgr.Add(Label_IconMenu, "<label opacity=\"0\" />", C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.AddChain(Label_IconMenu, "<label opacity=\"1\" />", C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadIn);
			} else if (Menu.DataAttributeExists("icon_url")) {
				AnimMgr.Add(Quad_IconMenu, "<quad opacity=\"0\" />", C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadOut);
				AnimMgr.AddChain(Quad_IconMenu, "<quad opacity=\"1\" />", C_AnimDuration / 2, CAnimManager::EAnimManagerEasing::QuadIn);
			}
		}

		Void SwitchMenu(Text _Menu) {
			// hide before show to avoid double-click bugs
			SendCustomEvent("menu_unloaded", [G_Frame_CurrentMenu]);
			HideMenu(G_Frame_CurrentMenu);

			SendCustomEvent("menu_loaded", [_Menu]);
			ShowMenu(_Menu);
		}

		main() {
			declare Frame_Menus = (Page.GetFirstChild("Frame_Menus") as CMlFrame);
			declare Label_IconMenu = (Page.GetFirstChild("Label_IconMenu") as CMlLabel);
			declare Quad_IconMenu = (Page.GetFirstChild("Quad_IconMenu") as CMlQuad);
			declare CMlFrame Frame_BlinkingCurrent;

			foreach (MenuContainer in Frame_Menus.Controls) {
				declare Frame_MenuContainer = (MenuContainer as CMlFrame);

				if (Frame_MenuContainer.DataAttributeExists("name")) {
					declare Frame_Name = Frame_MenuContainer.DataAttributeGet("name");
					G_MenuContainers[Frame_Name] = Frame_MenuContainer;

					if (Frame_MenuContainer.DataAttributeExists("show")) {
						G_Main_Menu = Frame_Name;
						ShowMenu(Frame_Name);
					}

					foreach (MenuItem in Frame_MenuContainer.Controls) {
						declare Frame_MenuItem = (MenuItem as CMlFrame);
						declare Quad_Trigger = (Frame_MenuItem.GetFirstChild("Quad_Trigger") as CMlFrame);

						declare Text ItemId for Quad_Trigger;
						declare Text ItemUrl for Quad_Trigger;
						declare Text ItemWindow for Quad_Trigger;

						ItemId = Frame_MenuItem.DataAttributeGet("name");
						ItemUrl = Frame_MenuItem.DataAttributeGet("url");
						ItemWindow = Frame_MenuItem.DataAttributeGet("window");
						

						declare Label_Icon	 = (Frame_MenuItem.GetFirstChild("Label_Icon")   as CMlLabel);
						declare Label_Text   = (Frame_MenuItem.GetFirstChild("Label_Text")   as CMlLabel);

						Label_Icon.SetText(Frame_MenuItem.DataAttributeGet("icon"));
						Label_Text.SetText(Frame_MenuItem.DataAttributeGet("text"));
					}
				}
			}
			

			while(True) {
				yield;

				if (!PageIsVisible && PendingEvents.count == 0) continue;

				if (G_ChangeLabelIcon > 0 && G_ChangeLabelIcon <= Now) {
					if (G_MenuContainers[G_Frame_CurrentMenu].DataAttributeExists("icon")) {
						// if ampoule Ã©quiv 54 px
						Label_IconMenu.SetText(G_MenuContainers[G_Frame_CurrentMenu].DataAttributeGet("icon"));
					} else if (G_MenuContainers[G_Frame_CurrentMenu].DataAttributeExists("icon_url")) {
						Quad_IconMenu.ChangeImageUrl(G_MenuContainers[G_Frame_CurrentMenu].DataAttributeGet("icon_url"));
					}
					G_ChangeLabelIcon = 0;
				}

				if (Frame_BlinkingCurrent != Null) {
					declare Label_Icon = (Frame_BlinkingCurrent.GetFirstChild("Label_Icon")   as CMlLabel);
					declare Label_Text = (Frame_BlinkingCurrent.GetFirstChild("Label_Text")   as CMlLabel);

					declare Source = <1., 1., 1.>;
					declare Target = <.64, .8, 1.>;
					declare AnimTime = Now % C_AnimDuration;
					declare Vec3 Color;

					if (Now % (C_AnimDuration * 2) >= C_AnimDuration) {
						Color = <
							AL::EaseInOutQuad(AnimTime, Target.X, Source.X - Target.X, C_AnimDuration),
							AL::EaseInOutQuad(AnimTime, Target.Y, Source.Y - Target.Y, C_AnimDuration),
							AL::EaseInOutQuad(AnimTime, Target.Z, Source.Z - Target.Z, C_AnimDuration)
						>;
					} else {
						Color = <
							AL::EaseInOutQuad(AnimTime, Source.X, Target.X - Source.X, C_AnimDuration),
							AL::EaseInOutQuad(AnimTime, Source.Y, Target.Y - Source.Y, C_AnimDuration),
							AL::EaseInOutQuad(AnimTime, Source.Z, Target.Z - Source.Z, C_AnimDuration)
						>;
					}
					
					Label_Icon.TextColor = Color;
					Label_Text.TextColor = Color;
				}


				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlScriptEvent::Type::PluginCustomEvent: {
							switch(Event.CustomEventType) {
								case "menu_load" : {
									if (Event.CustomEventData.count > 0) {
										SwitchMenu(Event.CustomEventData[0]);
									}
								}
								case "menu_unload" : {
									if (Event.CustomEventData.count > 0) {
										HideMenu(Event.CustomEventData[0]);
									}
								}
							}
						}
						case CMlScriptEvent::Type::MouseClick: {
							declare Text ItemId for Event.Control;
							declare Text ItemUrl for Event.Control;
							declare Text ItemWindow for Event.Control;
							
							if (ItemUrl != "") {
								OpenLink(ItemUrl, CMlScript::LinkType::ExternalBrowser);
							} else if (G_MenuContainers.existskey(ItemId)) {
								SwitchMenu(ItemId);
							}

							SendCustomEvent("item_click", [ItemId]);
							SendCustomEvent("window_load", [ItemWindow]);
						}

						case CMlScriptEvent::Type::MouseOver: {
							declare Text ItemId for Event.Control;
							
							if (ItemId != "") {
								declare Frame_MenuItem = (Event.Control.Parent as CMlFrame);
								Frame_MenuItem.Scale = 1.05;
								Frame_BlinkingCurrent = Frame_MenuItem;
							}
						}

						case CMlScriptEvent::Type::MouseOut: {
							declare Text ItemId for Event.Control;
							
							if (ItemId != "") {
								declare Frame_MenuItem = (Event.Control.Parent as CMlFrame);
								declare Label_Icon	 = (Frame_MenuItem.GetFirstChild("Label_Icon")   as CMlLabel);
								declare Label_Text   = (Frame_MenuItem.GetFirstChild("Label_Text")   as CMlLabel);
								
								Frame_BlinkingCurrent = Null;
								Frame_MenuItem.Scale = 1.;

								Label_Icon.TextColor = <1., 1., 1.>;
								Label_Text.TextColor = <1., 1., 1.>;
							}
						}
					}
				}
			}
		}
	]]></script>
</manialink>
	""";

	return ML_Text;
}

Void CreateMenu(K_Section _Menu) {
	if (!G_Menus.existskey(_Menu.Name)) {
		G_Menus[_Menu.Name] = _Menu;
	}
}

K_Section GetMenu(Text _Name) {
    return G_Menus[_Name];
}

Void Load(Text _Menu) {
	if (G_Menus.existskey(_Menu)) {
		declare LayerName = "L_Menu_" ^ _Menu;
		declare Text MLText = Build(G_Menus[_Menu]);
	
		Layers::Create(LayerName, MLText);
		// Layers::SetAnimationTypeIn(LayerName, CUILayer::EUILayerAnimation::DownSlow);
		// Layers::SetAnimationTypeOut(LayerName, CUILayer::EUILayerAnimation::DownSlow);
		Layers::Attach(LayerName);
	}
}



Void Loop() {
	
}